var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/ActivatedRouteSnapshotStub.html",[0,0.029,1,1.49]],["body/classes/ActivatedRouteSnapshotStub.html",[0,0.027,1,1.732,2,0.503,3,0.503,4,0.503,5,0.361,6,0.929,7,0.937,8,2.804,9,0.244,10,1.046,11,2.689,12,2.933,13,2.622,14,2.803,15,2.433,16,0.895,17,1.595,18,1.665,19,1.323,20,1.665,21,1.665,22,1.665,23,1.059,24,0.062,25,0.802,26,0.624,27,0.814,28,1.059,29,0.894,30,1.656,31,1.323,32,1.665,33,1.665,34,1.573,35,1.665,36,1.323,37,1.665,38,1.665,39,1.038,40,1.665,41,1.323,42,1.665,43,1.665,44,1.665,45,1.323,46,1.665,47,1.665,48,2.148,49,1.665,50,0.937,51,2.3,52,1.097,53,3.249,54,2.449,55,2.046,56,0.929,57,2.61,58,1.097,59,2.983,60,0.794,61,0.503,62,1.133,63,1.942,64,1.218,65,0.554,66,1.889,67,1.481,68,1.424,69,1.942,70,1.218,71,1.69,72,2.373,73,1.424,74,2.483,75,1.942,76,2.412,77,1.976,78,2.094,79,0.794,80,1.732,81,2.483,82,1.481,83,1.046,84,1.481,85,0.375,86,1.226,87,2.3,88,2.209,89,1.218,90,0.683,91,0.996,92,1.424,93,1.424,94,1.424,95,1.682,96,1.424,97,1.046,98,1.046,99,1.218,100,1.424,101,1.538,102,1.322,103,1.732,104,0.929,105,3.065,106,1.682,107,1.682,108,2.219,109,2.294,110,2.294,111,3.197,112,1.682,113,1.682,114,2.61,115,2.094,116,1.682,117,1.02,118,1.196,119,1.097,120,2.046,121,2.526,122,1.682,123,2.983,124,2.483,125,2.803,126,0.965,127,2.046,128,2.294,129,0.554,130,1.732,131,2.473,132,2.717,133,1.097,134,1.682,135,2.717,136,1.097,137,2.473,138,2.473,139,1.682,140,1.682,141,1.097,142,1.682,143,1.682,144,1.682,145,1.682,146,1.682,147,1.682,148,2.473,149,2.717,150,2.046,151,2.046,152,2.046,153,1.732,154,1.682,155,0.794,156,1.682,157,0.794,158,1.038,159,0.587,160,0.929,161,1.097,162,1.097,163,1.732,164,0.929,165,1.906,166,0.683,167,1.481,168,2.094,169,3.153,170,1.682,171,1.682,172,1.682,173,1.682,174,1.682,175,1.097,176,2.294,177,1.097,178,2.473,179,1.097,180,2.294,181,1.097,182,2.294,183,1.097,184,2.294,185,1.097,186,1.097,187,1.097,188,1.682,189,1.097,190,1.097,191,1.682,192,1.097,193,1.682,194,1.682,195,1.424,196,0.428,197,1.097,198,2.094,199,1.387,200,1.097,201,1.097,202,1.097,203,0.929,204,2.483,205,1.424,206,1.097,207,1.682,208,1.097,209,1.942,210,1.719,211,1.097,212,1.097,213,1.097,214,1.097,215,0.794,216,1.097,217,1.097,218,1.097,219,1.682,220,1.682,221,0.794,222,0.798,223,0.929,224,1.097,225,1.097,226,1.097,227,1.097,228,0.503,229,1.097,230,1.424,231,1.424,232,0.503,233,1.344,234,1.097,235,2.094,236,1.097,237,1.097,238,1.097,239,1.097,240,1.097,241,1.097,242,0.503,243,1.481,244,1.942,245,0.771,246,0.929,247,0.428,248,0.929,249,1.097,250,1.097,251,1.097,252,1.097,253,1.097,254,1.097,255,1.097,256,1.097,257,1.097,258,1.097,259,1.097,260,1.097,261,1.097,262,1.097,263,1.097,264,1.097,265,1.097,266,1.097,267,1.097,268,1.097,269,1.097,270,1.097,271,1.097,272,1.097,273,1.097,274,1.097,275,1.097,276,1.097,277,1.097,278,1.097,279,1.097,280,1.097,281,1.097,282,1.097,283,1.097,284,1.097,285,1.097,286,1.097,287,1.097,288,1.097,289,1.097,290,1.097,291,1.097,292,1.097,293,1.097,294,1.097,295,1.097,296,1.097,297,1.097,298,1.097,299,1.097,300,1.536,301,2.874,302,2.803,303,2.803,304,2.803,305,2.483,306,1.097,307,2.473,308,1.942,309,2.294,310,1.732,311,1.097,312,1.097,313,1.682,314,1.097,315,1.097,316,1.097,317,1.682,318,1.097,319,1.682,320,1.097,321,0.929,322,1.097,323,1.682,324,1.097,325,1.097,326,2.294,327,2.046,328,1.097,329,1.097,330,1.097,331,0.929,332,0.929,333,1.097,334,0.929,335,1.097,336,1.097,337,1.097,338,1.097,339,1.097,340,0.929,341,1.097,342,1.097,343,1.097,344,1.097,345,1.097,346,1.097,347,0.929,348,0.929,349,1.097,350,0.029,351,0.029]],["title/classes/ActivatedRouteStub.html",[0,0.029,165,1.095]],["body/classes/ActivatedRouteStub.html",[0,0.025,1,1.277,2,0.437,3,0.437,4,0.437,5,0.314,6,0.808,7,0.857,8,2.694,9,0.212,10,0.938,11,2.708,12,2.877,13,2.599,14,2.675,15,2.331,16,0.73,17,1.641,19,1.15,23,1.091,24,0.062,25,0.854,26,0.677,27,0.928,28,1.067,29,0.963,30,1.669,31,1.15,34,1.559,36,1.15,39,0.99,41,1.15,45,1.15,48,2.135,50,0.857,51,2.304,52,0.954,53,3.298,54,2.487,55,1.871,56,0.808,57,2.463,58,0.954,59,2.926,60,0.691,61,0.437,62,1.061,63,1.8,64,1.092,65,0.497,66,1.783,67,1.54,68,1.277,69,1.8,70,1.092,71,1.754,72,2.435,73,1.277,74,2.477,75,1.8,76,2.406,77,1.979,78,2.085,79,0.691,80,1.584,81,2.435,82,1.54,83,0.938,84,1.54,85,0.336,86,1.137,87,2.184,88,2.085,89,1.355,90,0.593,91,1.058,92,1.277,93,1.277,94,1.277,95,1.509,96,1.277,97,0.938,98,0.938,99,1.092,100,1.277,101,1.664,102,1.238,103,1.584,104,0.808,105,3.097,106,1.509,107,1.509,108,2.327,109,2.127,110,2.127,111,3.267,112,1.509,113,1.509,114,2.463,115,2.264,116,1.509,117,1.075,118,1.129,119,0.954,120,1.871,121,2.678,122,1.509,123,2.926,124,2.387,125,2.675,126,0.961,127,1.871,128,2.463,129,0.497,130,1.584,131,2.317,132,2.58,133,0.954,134,1.509,135,2.58,136,0.954,137,2.317,138,2.317,139,1.509,140,1.509,141,0.954,142,1.509,143,1.509,144,1.509,145,1.509,146,1.509,147,1.509,148,2.317,149,2.58,150,1.871,151,1.871,152,1.871,153,1.584,154,1.509,155,0.691,156,1.509,157,0.691,158,1.01,159,0.51,160,0.808,161,0.954,162,0.954,163,2.184,164,0.808,165,1.87,166,0.593,167,1.677,168,1.961,169,3.07,170,1.509,171,1.509,172,1.509,173,1.509,174,1.509,175,0.954,176,2.127,177,0.954,178,2.317,179,0.954,180,2.127,181,0.954,182,2.127,183,0.954,184,2.127,185,0.954,186,0.954,187,0.954,188,1.509,189,0.954,190,0.954,191,1.509,192,0.954,193,1.509,194,2.127,195,1.8,196,0.589,197,1.509,198,2.387,199,1.48,200,1.509,201,1.509,202,1.509,203,1.277,204,2.678,205,1.8,206,1.509,207,2.127,208,1.509,209,2.184,210,1.763,211,1.509,212,1.509,213,1.509,214,1.509,215,1.092,216,1.509,217,1.509,218,1.509,219,2.127,220,2.127,221,1.092,222,0.961,223,1.277,224,1.509,225,1.509,226,1.509,227,1.509,228,0.691,229,1.509,230,1.8,231,1.8,232,0.691,233,1.449,234,1.509,235,1.961,236,0.954,237,0.954,238,0.954,239,0.954,240,0.954,241,1.509,242,0.691,243,1.783,244,2.264,245,0.974,246,1.277,247,0.589,248,1.277,249,1.509,250,0.954,251,0.954,252,0.954,253,0.954,254,0.954,255,0.954,256,0.954,257,0.954,258,0.954,259,0.954,260,0.954,261,0.954,262,0.954,263,0.954,264,0.954,265,0.954,266,0.954,267,0.954,268,0.954,269,0.954,270,0.954,271,0.954,272,0.954,273,0.954,274,0.954,275,0.954,276,0.954,277,0.954,278,0.954,279,0.954,280,0.954,281,0.954,282,0.954,283,0.954,284,0.954,285,0.954,286,0.954,287,0.954,288,0.954,289,0.954,290,0.954,291,0.954,292,0.954,293,0.954,294,0.954,295,0.954,296,0.954,297,0.954,298,0.954,299,0.954,300,1.669,301,3.121,302,3.07,303,3.07,304,3.121,305,2.792,306,1.509,307,2.317,308,2.264,309,2.675,310,2.085,311,1.509,312,0.954,313,1.509,314,1.509,315,1.509,316,0.954,317,1.509,318,1.509,319,2.127,320,1.509,321,0.808,322,0.954,323,1.509,324,1.509,325,1.509,326,2.463,327,2.463,328,1.509,329,1.509,330,1.509,331,1.277,332,1.277,333,1.509,334,1.277,335,1.509,336,1.509,337,0.954,338,0.954,339,0.954,340,0.808,341,0.954,342,0.954,343,0.954,344,0.954,345,0.954,346,2.127,347,0.808,348,0.808,349,0.954,350,0.026,351,0.026,352,0.437,353,0.691,354,2.289,355,2.289,356,2.289,357,2.289,358,2.289,359,2.289,360,2.289,361,2.289,362,1.448,363,0.954,364,1.448,365,1.448,366,1.448,367,1.448,368,1.448,369,1.448,370,1.448,371,1.448,372,1.448,373,2.289,374,1.448,375,1.448,376,1.448,377,1.448,378,1.448,379,1.448]],["title/interfaces/ActivatedRouteStubOptions.html",[166,1.095,167,1.275]],["body/interfaces/ActivatedRouteStubOptions.html",[0,0.027,1,1.415,3,0.498,4,0.498,5,0.358,6,0.921,7,0.766,8,2.747,9,0.242,11,2.643,12,2.977,13,2.665,14,2.601,15,2.477,16,0.652,23,1.036,24,0.062,25,0.674,26,0.673,27,1.051,28,1.027,29,0.55,30,1.532,34,1.58,39,0.994,48,2.159,50,0.932,51,2.296,52,1.088,53,3.319,54,2.472,55,2.464,56,0.921,57,2.601,58,1.088,59,2.977,60,0.788,61,0.498,62,1.129,63,1.933,64,1.21,65,0.55,66,1.883,67,1.473,68,1.415,69,1.933,70,1.21,71,1.685,72,2.52,73,1.415,74,2.589,75,1.933,76,2.433,77,1.973,78,2.202,79,0.788,80,1.723,81,2.477,82,1.473,83,1.039,84,1.473,85,0.372,86,1.221,87,2.293,88,2.202,89,1.21,90,0.677,91,0.994,92,1.415,93,1.415,94,1.415,95,1.671,96,1.415,97,1.039,98,1.039,99,1.21,100,1.415,101,1.532,102,1.317,103,1.723,104,0.921,105,3.171,106,1.671,107,1.671,108,2.239,109,2.283,110,2.283,111,3.26,112,1.671,113,1.671,114,2.601,115,2.086,116,1.671,117,1.036,118,1.192,119,1.088,120,2.283,121,2.52,122,1.671,123,2.977,124,2.477,125,2.795,126,1.015,127,2.283,128,2.283,129,0.55,130,1.723,131,2.464,132,2.708,133,1.088,134,1.671,135,2.708,136,1.088,137,2.464,138,2.464,139,1.671,140,1.671,141,1.088,142,1.671,143,1.671,144,1.671,145,1.671,146,1.671,147,1.671,148,2.464,149,2.708,150,2.035,151,2.035,152,2.035,153,1.723,154,1.671,155,0.788,156,1.671,157,0.788,158,1.036,159,0.582,160,0.921,161,1.088,162,1.088,163,1.933,164,1.415,165,2.009,166,0.677,167,1.653,168,2.477,169,3.148,170,1.671,171,1.671,172,1.671,173,1.671,174,1.671,175,1.088,176,2.283,177,1.088,178,2.464,179,1.088,180,2.283,181,1.088,182,2.283,183,1.088,184,2.283,185,1.088,186,1.088,187,1.088,188,1.671,189,1.088,190,1.088,191,1.671,192,1.088,193,1.671,194,1.671,195,1.415,196,0.425,197,1.088,198,2.086,199,1.384,200,1.088,201,1.088,202,1.088,203,0.921,204,2.477,205,1.415,206,1.088,207,1.671,208,1.088,209,1.933,210,1.717,211,1.088,212,1.088,213,1.088,214,1.088,215,0.788,216,1.088,217,1.088,218,1.088,219,1.671,220,1.671,221,0.788,222,0.794,223,0.921,224,1.088,225,1.088,226,1.088,227,1.088,228,0.498,229,1.088,230,1.415,231,1.415,232,0.498,233,1.341,234,1.088,235,2.086,236,1.088,237,1.088,238,1.088,239,1.088,240,1.088,241,1.088,242,0.498,243,1.473,244,1.933,245,0.766,246,0.921,247,0.425,248,0.921,249,1.088,250,1.088,251,1.088,252,1.088,253,1.088,254,1.088,255,1.088,256,1.088,257,1.088,258,1.088,259,1.088,260,1.088,261,1.088,262,1.088,263,1.088,264,1.088,265,1.088,266,1.088,267,1.088,268,1.088,269,1.088,270,1.088,271,1.088,272,1.088,273,1.088,274,1.088,275,1.088,276,1.088,277,1.088,278,1.088,279,1.088,280,1.088,281,1.088,282,1.088,283,1.088,284,1.088,285,1.088,286,1.088,287,1.088,288,1.088,289,1.088,290,1.088,291,1.088,292,1.088,293,1.088,294,1.088,295,1.088,296,1.088,297,1.088,298,1.088,299,1.088,300,1.532,301,2.866,302,2.795,303,2.795,304,2.795,305,2.477,306,1.088,307,2.464,308,1.933,309,2.283,310,1.723,311,1.088,312,1.088,313,1.671,314,1.088,315,1.088,316,1.088,317,1.671,318,1.088,319,1.671,320,1.088,321,0.921,322,1.088,323,1.671,324,1.088,325,1.088,326,2.283,327,2.035,328,1.088,329,1.088,330,1.088,331,0.921,332,0.921,333,1.088,334,0.921,335,1.088,336,1.088,337,1.088,338,1.088,339,1.088,340,0.921,341,1.088,342,1.088,343,1.088,344,1.088,345,1.088,346,1.088,347,0.921,348,0.921,349,1.088,350,0.029,351,0.029,352,0.498,380,1.088,381,1.671]],["title/interfaces/Matchers.html",[166,1.095,382,1.49]],["body/interfaces/Matchers.html",[0,0.042,3,0.936,4,0.936,5,0.672,9,0.674,17,1.789,23,1.082,24,0.061,25,0.9,26,0.732,27,1.082,28,1.082,29,1.102,91,1.132,117,1.144,159,1.393,166,1.27,350,0.045,351,0.045,353,1.194,380,2.042,382,2.207,383,5.112,384,3.099,385,2.561,386,3.025,387,2.607,388,3.142,389,2.607,390,2.607,391,2.607,392,2.607,393,2.607,394,3.142,395,3.099,396,3.47,397,4.183,398,1.18,399,2.607,400,2.158,401,3.099,402,1.017,403,2.207,404,3.142,405,3.099,406,1.507,407,3.416,408,2.125,409,1.565,410,3.142,411,4.003,412,3.142,413,3.099,414,1.393,415,3.099,416,3.142,417,2.871,418,3.099,419,1.464,420,3.852,421,3.142,422,3.099,423,3.646,424,3.767,425,3.646,426,3.142,427,3.099,428,3.142,429,3.099,430,3.142,431,3.142,432,3.099,433,3.142,434,3.142,435,3.099,436,1.017,437,3.099,438,3.099,439,2.042]],["title/classes/TestButton.html",[0,0.029,440,1.095]],["body/classes/TestButton.html",[0,0.026,2,0.731,3,0.731,4,0.731,5,0.525,7,1.014,9,0.355,10,1.376,16,0.623,17,1.8,23,1.127,24,0.061,25,0.924,26,0.785,27,1.099,28,0.525,29,1.119,30,1.357,34,1.53,39,1.005,50,1.163,61,0.731,62,1.014,65,0.728,85,0.355,91,1.104,102,0.853,117,1.119,118,1.448,126,1.192,129,0.728,158,0.836,196,0.863,199,1.014,222,0.863,228,1.256,232,1.014,233,1.163,242,1.014,245,1.014,247,0.623,300,1.357,350,0.038,351,0.056,352,1.515,353,1.256,398,1.123,400,1.376,402,1.162,406,1.565,409,1.582,414,1.743,419,1.163,436,0.623,440,1.579,441,2.149,442,2.422,443,2.737,444,2.289,445,1.873,446,1.602,447,1.873,448,1.873,449,1.376,450,2.149,451,1.873,452,1.985,453,1.937,454,1.602,455,1.602,456,1.873,457,2.011,458,2.156,459,2.084,460,2.084,461,2.361,462,1.376,463,2.437,464,1.602,465,1.985,466,2.254,467,2.422,468,2.828,469,1.596,470,1.351,471,1.838,472,1.351,473,1.351,474,2.814,475,1.873,476,1.156,477,1.351,478,2.438,479,2.523,480,2.32,481,1.985,482,2.32,483,2.378,484,1.351,485,1.351,486,2.521,487,1.351,488,1.351,489,1.156,490,1.351,491,2.32,492,1.351,493,2.149,494,2.437,495,1.602,496,1.376,497,1.873,498,1.873,499,1.873,500,1.602,501,1.985,502,1.873,503,1.351,504,1.351,505,1.602,506,1.156,507,1.791,508,1.351,509,1.873,510,1.156,511,1.351,512,1.156,513,2.521,514,1.351,515,1.602,516,1.873,517,1.602,518,1.873,519,1.156,520,1.351,521,1.156,522,1.351,523,1.156,524,1.156,525,1.156,526,1.351,527,1.156,528,1.351,529,1.156,530,1.351,531,1.351,532,2.32,533,1.351,534,2.32,535,1.376,536,1.351,537,1.351,538,1.596,539,2.422,540,3.357,541,0.993,542,1.156,543,1.596]],["title/classes/TestHtmlElement.html",[0,0.029,402,0.687]],["body/classes/TestHtmlElement.html",[0,0.025,2,0.709,3,0.709,4,0.709,5,0.51,7,0.992,9,0.345,10,1.347,16,0.604,17,1.794,23,1.124,24,0.061,25,0.921,26,0.784,27,1.095,28,0.51,29,1.115,30,1.446,34,1.524,39,0.997,50,1.144,61,0.709,62,0.992,65,0.89,71,1.347,85,0.345,91,1.1,102,0.828,117,1.115,118,1.439,126,1.182,129,0.713,158,0.822,196,0.845,199,0.992,222,0.845,228,1.239,232,0.992,233,1.239,242,0.992,245,0.992,247,0.604,300,1.446,350,0.037,351,0.056,352,1.508,353,1.239,398,1.111,400,1.347,402,1.056,403,2.658,406,1.571,408,1.683,409,1.589,414,1.734,419,1.144,436,0.604,440,0.963,441,2.29,443,2.746,444,2.061,445,1.833,446,1.568,447,1.833,448,1.833,449,1.347,450,2.29,451,1.833,452,1.959,453,1.922,454,1.568,455,1.568,456,1.833,457,2,458,2.136,459,2.061,460,2.061,461,2.349,462,1.347,464,1.568,465,1.959,466,2.237,468,2.802,470,1.833,471,1.959,472,1.311,473,1.311,474,2.802,475,1.833,476,1.121,477,1.311,478,2.429,479,2.518,480,2.29,481,1.959,482,2.29,483,2.367,484,1.311,485,1.311,486,2.497,487,1.311,488,1.311,489,1.121,490,1.311,491,2.29,492,1.311,493,2.115,494,2.41,495,1.568,496,1.347,497,1.833,498,1.833,499,1.833,500,1.568,501,1.959,502,1.833,503,1.311,504,1.311,505,1.568,506,1.121,507,1.771,508,1.311,509,1.833,510,1.121,511,1.311,512,1.121,513,2.497,514,1.311,515,1.568,516,1.833,517,1.568,518,1.833,519,1.121,520,1.311,521,1.121,522,1.311,523,1.121,524,1.121,525,1.121,526,1.311,527,1.121,528,1.311,529,1.121,530,1.311,531,1.311,532,2.29,533,1.311,534,2.29,535,1.347,536,1.311,537,1.311,541,1.835,542,1.121,544,2.349,545,2.349,546,2.349,547,2.349,548,2.349,549,3.286,550,3.286,551,3.286,552,2.611,553,3.286,554,3.286,555,2.611,556,3.261,557,4.105,558,3.286,559,2.611,560,2.349,561,2.349,562,2.349,563,2.349,564,2.349]],["title/classes/TestInput.html",[0,0.029,398,0.687]],["body/classes/TestInput.html",[0,0.024,2,0.665,3,0.665,4,0.665,5,0.478,7,0.948,9,0.323,10,1.287,16,0.566,17,1.809,23,1.119,24,0.061,25,0.918,26,0.784,27,1.091,28,1.064,29,1.122,30,1.654,34,1.511,39,0.979,50,1.105,61,0.665,62,0.948,65,0.681,85,0.323,91,1.091,102,0.776,117,1.122,118,1.417,126,1.16,129,0.681,158,0.915,196,0.807,199,0.948,210,1.106,222,0.807,228,1.204,232,0.948,233,1.482,242,0.948,245,0.948,247,0.566,300,1.654,350,0.036,351,0.055,352,1.502,353,1.204,396,2.069,398,1.16,399,2.779,400,1.635,402,1.127,406,1.551,408,1.287,409,1.57,414,1.714,419,1.105,436,0.566,440,0.903,441,2.573,443,2.865,444,2.012,445,1.752,446,1.498,447,1.752,448,1.752,449,1.287,450,2.041,451,1.752,452,1.903,453,1.891,454,1.498,455,1.498,456,1.752,457,1.975,458,2.457,459,2.012,460,2.012,461,2.322,462,1.287,463,2.352,464,1.498,465,1.903,466,2.201,468,2.791,469,1.451,470,1.229,471,2.239,472,1.229,473,1.229,474,2.776,475,1.752,476,1.051,477,1.229,478,2.41,479,2.508,480,2.225,481,1.903,482,2.225,483,2.341,484,1.229,485,1.229,486,2.446,487,1.229,488,1.229,489,1.051,490,1.229,491,2.225,492,1.229,493,2.041,494,2.352,495,1.498,496,1.287,497,1.752,498,1.752,499,1.752,500,1.498,501,1.903,502,1.752,503,1.229,504,1.229,505,1.498,506,1.051,507,1.975,508,1.229,509,2.573,510,1.051,511,1.229,512,1.051,513,2.446,514,1.229,515,1.498,516,1.752,517,1.498,518,1.752,519,1.051,520,1.229,521,1.051,522,1.229,523,1.051,524,1.051,525,1.051,526,1.229,527,1.051,528,1.229,529,1.051,530,1.229,531,1.229,532,2.225,533,1.229,534,2.225,535,1.287,536,1.229,537,1.229,538,1.451,541,1.5,542,1.051,543,1.451,565,2.202,566,3.169,567,2.494,568,3.989,569,2.202,570,2.202,571,2.494,572,2.202,573,2.494,574,2.202,575,3.14,576,1.749,577,2.202,578,2.202,579,2.202,580,2.225,581,2.202,582,1.749,583,2.494,584,1.749,585,3.659,586,2.202,587,3.14,588,1.229]],["title/classes/TestTextArea.html",[0,0.029,436,0.687]],["body/classes/TestTextArea.html",[0,0.025,2,0.699,3,0.699,4,0.699,5,0.502,7,0.982,9,0.34,10,1.333,16,0.595,17,1.803,23,1.125,24,0.061,25,0.923,26,0.785,27,1.098,28,1.073,29,1.12,30,1.514,34,1.521,39,0.993,50,1.135,61,0.699,62,0.982,65,0.706,85,0.34,91,1.098,102,0.816,117,1.127,118,1.434,126,1.177,129,0.706,158,0.885,196,0.837,199,0.982,210,1.146,222,0.837,228,1.232,232,0.982,233,1.297,242,0.982,245,0.982,247,0.595,300,1.514,350,0.037,351,0.056,352,1.513,353,1.232,398,1.105,400,1.333,402,1.146,406,1.558,408,1.333,409,1.577,414,1.73,419,1.135,436,0.967,440,0.949,441,2.397,443,2.824,444,2.05,445,1.815,446,1.552,447,1.815,448,1.815,449,1.333,450,2.098,451,1.815,452,1.946,453,1.915,454,1.552,455,1.552,456,1.815,457,1.994,458,2.229,459,2.05,460,2.391,461,2.343,462,1.333,463,2.397,464,1.552,465,1.946,466,2.229,468,2.811,469,1.526,470,1.292,471,2.05,472,1.292,473,1.292,474,2.796,475,1.815,476,1.105,477,1.292,478,2.425,479,2.516,480,2.275,481,1.946,482,2.275,483,2.361,484,1.292,485,1.292,486,2.486,487,1.292,488,1.292,489,1.105,490,1.292,491,2.275,492,1.292,493,2.098,494,2.397,495,1.552,496,1.333,497,1.815,498,1.815,499,1.815,500,1.552,501,1.946,502,1.815,503,1.292,504,1.292,505,1.552,506,1.105,507,1.876,508,1.292,509,2.275,510,1.105,511,1.292,512,1.105,513,2.486,514,1.292,515,1.552,516,1.815,517,1.552,518,1.815,519,1.105,520,1.292,521,1.105,522,1.292,523,1.105,524,1.105,525,1.105,526,1.292,527,1.105,528,1.292,529,1.105,530,1.292,531,1.292,532,2.275,533,1.292,534,2.275,535,1.333,536,1.292,537,1.292,538,1.526,541,1.541,542,1.105,543,1.526,567,2.584,571,2.584,573,2.584,576,1.839,580,1.815,582,1.839,583,2.584,584,1.839,589,2.315,590,2.315,591,2.315,592,2.315,593,2.315]],["title/changelog.html",[594,1.078,595,1.261,596,1.795]],["body/changelog.html",[0,0.031,5,0.635,15,1.633,24,0.059,25,0.528,26,0.56,28,0.635,34,1.151,39,0.92,48,1.2,60,1.397,64,1.819,77,1.2,83,1.2,85,0.56,86,1.683,97,1.2,98,1.2,101,1.2,108,1.397,126,0.753,129,1.011,155,1.397,157,1.397,158,0.635,215,1.397,221,2.321,222,0.753,235,1.633,243,1.819,247,0.753,305,1.633,332,1.633,350,0.043,351,0.043,382,2.127,385,1.633,387,1.929,389,1.929,390,1.929,391,1.929,392,2.513,393,1.929,398,0.753,402,0.981,403,1.633,406,0.884,409,1.151,419,0.884,436,0.753,439,1.929,453,2.062,457,1.2,462,1.2,463,1.633,505,1.397,519,1.397,524,1.397,541,1.2,580,1.633,588,1.633,594,1.397,596,2.326,597,2.928,598,3.864,599,2.326,600,2.928,601,2.326,602,2.326,603,3.961,604,2.928,605,2.928,606,2.326,607,3.813,608,3.813,609,3.961,610,2.928,611,2.928,612,4.241,613,2.928,614,2.326,615,2.326,616,2.928,617,1.929,618,2.928,619,2.928,620,2.928,621,2.928,622,2.928,623,2.928,624,2.928,625,3.996,626,2.928,627,3.813,628,3.813,629,4.493,630,4.241,631,4.776,632,4.071,633,4.071,634,4.932,635,3.437,636,2.928,637,2.928,638,2.928,639,3.795,640,2.928,641,4.776,642,4.776,643,3.813,644,3.029,645,3.029,646,2.928,647,2.928,648,2.928,649,4.493,650,3.813,651,2.928,652,4.241,653,3.813,654,2.928,655,4.659,656,4.659,657,2.928,658,2.928,659,2.928,660,2.928,661,2.928,662,2.928,663,2.928,664,2.928,665,2.928,666,2.928,667,2.928,668,2.928,669,1.929,670,2.928,671,2.928,672,2.928,673,4.493,674,2.928,675,4.493,676,4.493,677,2.928,678,2.928,679,2.928,680,2.928,681,2.928,682,2.928,683,2.928,684,2.928,685,2.928,686,4.493,687,2.928,688,2.928,689,2.928,690,2.928,691,2.928,692,2.928,693,2.928,694,2.928,695,2.928,696,2.928,697,4.659,698,2.928,699,2.928,700,2.928,701,2.928,702,2.928,703,2.928,704,2.928,705,2.928,706,2.928,707,2.928,708,3.813,709,2.928,710,3.029,711,2.928,712,2.928,713,3.369,714,2.928,715,2.928,716,2.928,717,4.493,718,2.928,719,2.928,720,2.928,721,2.928,722,2.928,723,2.326,724,2.928,725,3.813,726,2.928,727,2.928,728,2.928,729,2.928,730,2.928,731,2.928,732,2.928,733,3.813,734,2.928,735,2.928,736,2.928,737,2.928,738,2.326,739,2.326,740,2.326,741,2.928,742,2.928,743,2.928,744,2.928,745,2.928,746,2.928,747,2.928,748,2.928,749,2.928,750,2.928,751,2.928,752,2.928,753,2.928,754,2.928,755,2.928,756,2.928,757,2.928,758,2.326,759,2.928,760,2.928,761,2.928,762,2.928,763,2.928,764,3.813,765,2.928,766,2.928,767,2.928,768,3.864,769,3.813,770,2.928,771,2.928,772,3.813,773,2.928,774,2.928,775,2.928,776,2.928,777,3.813,778,2.326,779,2.928,780,2.928,781,2.928,782,2.928,783,2.928,784,2.928,785,2.928,786,2.928,787,2.928,788,2.928,789,2.928,790,2.928,791,2.928,792,2.326,793,2.928,794,2.928,795,1.929,796,2.326,797,2.928,798,2.928,799,2.928,800,2.928,801,2.928,802,2.928,803,2.928,804,2.928,805,2.928,806,2.928,807,2.928,808,2.928,809,2.928,810,2.928]],["title/dependencies.html",[669,1.489,811,2.54]],["body/dependencies.html",[24,0.059,56,2.296,60,1.963,61,1.242,350,0.053,351,0.053,738,3.269,739,3.269,740,3.269,811,3.73,812,4.115,813,4.115,814,4.927,815,4.115]],["title/miscellaneous/functions.html",[816,1.261,817,2.107]],["body/miscellaneous/functions.html",[0,0.052,6,1.963,8,2.388,9,0.516,16,0.905,23,1.068,24,0.059,25,0.887,26,0.734,27,1.068,29,1.068,39,0.763,48,1.892,51,2.291,54,2.043,62,1.511,63,2.679,64,2.043,65,0.929,66,2.388,67,2.043,68,2.388,69,2.388,70,2.043,71,1.968,72,2.388,73,2.388,74,2.388,75,2.388,76,2.457,77,2.077,78,2.575,79,1.679,80,2.575,81,2.388,82,2.043,83,1.755,84,2.043,85,0.628,86,1.692,87,2.388,88,2.388,89,1.679,90,1.442,91,0.763,92,2.388,93,2.388,94,2.388,96,2.388,97,1.968,98,1.755,99,2.043,100,2.388,101,1.755,104,1.963,155,2.043,157,2.043,159,1.239,160,1.963,163,2.575,165,1.755,167,2.043,210,1.239,347,2.575,348,1.963,350,0.049,351,0.049,352,1.062,353,1.293,363,2.319,496,1.755,552,2.795,617,2.821,713,3.401,816,1.963,817,2.319,818,4.281,819,4.281,820,4.615,821,3.518,822,3.518,823,3.518,824,3.518,825,3.518,826,2.795,827,3.518,828,3.518,829,3.518,830,4.281,831,3.518,832,3.518,833,3.518,834,2.795,835,2.795,836,3.518,837,3.518]],["title/index.html",[9,0.332,594,1.078,595,1.261]],["body/index.html",[0,0.05,2,1.012,5,0.727,7,1.255,9,0.277,11,1.054,13,1.054,16,0.954,23,0.609,24,0.061,25,0.506,26,0.631,27,0.41,29,1.067,39,0.727,48,1.521,50,0.848,51,1.599,54,0.902,65,1.045,67,1.34,71,1.374,76,0.902,77,1.151,79,0.902,82,1.599,83,1.151,84,1.599,85,0.631,86,1.516,89,1.34,90,0.775,97,0.775,98,1.374,99,1.892,101,0.775,103,1.054,108,2.225,115,1.054,117,0.959,118,1.508,121,1.567,124,2.07,126,1.02,129,0.901,130,1.054,153,1.054,158,1.045,159,0.666,164,2.07,165,1.374,168,1.054,195,2.07,196,0.722,198,1.054,199,1.426,203,1.054,204,1.054,205,1.567,209,1.567,210,1.181,215,0.902,221,1.77,222,1.107,228,1.012,230,1.054,231,1.87,232,1.255,233,0.848,242,1.197,243,1.599,244,1.567,247,0.722,308,1.054,310,1.87,331,2.212,334,2.07,340,1.054,350,0.032,351,0.042,353,1.501,363,1.245,382,2.401,385,1.054,386,1.245,398,1.107,402,0.954,404,1.501,406,1.514,407,1.245,408,1.374,409,1.426,412,1.501,414,1.307,416,1.501,417,2.613,419,1.364,421,1.501,426,1.501,428,1.501,431,1.501,434,1.501,436,0.722,439,2.209,440,1.151,444,0.902,446,1.34,449,1.374,452,2.193,453,1.912,454,0.902,455,1.34,457,1.974,458,0.902,459,0.902,460,0.902,461,1.34,462,1.374,464,0.902,465,2.372,466,2.053,471,1.34,476,0.902,478,0.902,479,2.109,481,0.902,483,1.34,489,1.34,495,1.34,496,1.764,500,1.34,501,1.599,506,0.902,507,1.703,510,0.902,512,1.599,515,1.77,517,1.34,521,1.34,523,1.77,525,0.902,527,0.902,529,0.902,535,0.775,541,1.151,542,0.902,555,2.231,556,2.663,580,1.054,588,1.054,594,1.34,595,1.567,598,2.948,599,2.231,601,1.501,602,1.501,609,2.231,614,1.501,615,2.948,617,1.245,625,1.501,632,3.791,633,3.791,635,2.836,639,2.231,644,1.501,645,2.231,710,2.231,723,2.231,758,1.501,778,1.501,792,2.231,795,1.245,796,1.501,817,1.245,826,3.418,834,2.948,835,1.501,838,1.501,839,3.965,840,3.352,841,2.808,842,2.663,843,3.352,844,3.352,845,3.965,846,1.89,847,2.808,848,3.965,849,3.711,850,1.89,851,2.808,852,4.947,853,1.89,854,1.89,855,2.808,856,1.89,857,2.808,858,2.808,859,2.808,860,2.808,861,3.352,862,4.816,863,3.711,864,4.156,865,2.808,866,3.352,867,4.156,868,3.965,869,3.352,870,3.711,871,2.808,872,3.352,873,3.965,874,2.808,875,4.597,876,4.156,877,4.421,878,3.711,879,3.711,880,3.352,881,2.808,882,3.711,883,3.352,884,1.89,885,1.501,886,4.303,887,2.808,888,3.711,889,4.156,890,2.808,891,3.352,892,2.808,893,2.808,894,2.808,895,2.808,896,2.808,897,2.808,898,3.711,899,1.89,900,1.89,901,1.89,902,1.89,903,1.89,904,1.89,905,1.89,906,1.89,907,1.89,908,2.808,909,2.808,910,2.808,911,1.89,912,1.89,913,3.301,914,1.89,915,2.808,916,1.89,917,3.352,918,4.156,919,2.808,920,1.89,921,2.808,922,1.89,923,1.89,924,1.89,925,1.89,926,1.89,927,3.352,928,2.808,929,3.352,930,1.89,931,3.965,932,2.808,933,2.808,934,2.808,935,2.808,936,2.808,937,1.89,938,3.711,939,1.89,940,2.808,941,2.808,942,1.89,943,1.89,944,2.808,945,1.89,946,2.808,947,1.89,948,2.808,949,2.808,950,2.808,951,1.89,952,1.89,953,3.352,954,1.89,955,2.808,956,1.89,957,1.89,958,1.89,959,1.501,960,1.89,961,2.808,962,2.808,963,2.808,964,2.808,965,3.711,966,4.156,967,1.89,968,2.808,969,1.89,970,2.808,971,1.89,972,1.89,973,1.89,974,1.89,975,1.89,976,1.89,977,1.89,978,1.89,979,2.808,980,1.89,981,1.89,982,1.89,983,1.89,984,2.808,985,2.808,986,1.89,987,3.711,988,1.89,989,2.808,990,1.89,991,4.156,992,3.352,993,1.89,994,1.89,995,1.89,996,1.89,997,2.808,998,2.808,999,1.89,1000,4.303,1001,3.352,1002,2.948,1003,2.808,1004,2.808,1005,1.89,1006,3.352,1007,1.89,1008,1.89,1009,1.89,1010,1.89,1011,1.89,1012,1.89,1013,3.711,1014,1.89,1015,1.89,1016,1.89,1017,1.89,1018,2.808,1019,1.89,1020,1.89,1021,1.89,1022,1.89,1023,1.89,1024,1.89,1025,1.89,1026,1.89,1027,1.89,1028,3.711,1029,1.89,1030,2.808,1031,1.89,1032,2.808,1033,3.711,1034,1.89,1035,3.352,1036,4.303,1037,1.89,1038,2.808,1039,1.89,1040,2.808,1041,2.808,1042,1.89,1043,1.89,1044,1.89,1045,2.808,1046,2.808,1047,1.89,1048,1.89,1049,1.89,1050,1.89,1051,1.89,1052,1.89,1053,1.89,1054,2.231,1055,1.89,1056,1.89,1057,1.89,1058,1.89,1059,1.89,1060,1.89,1061,1.89,1062,1.89,1063,1.89,1064,2.808,1065,1.89,1066,1.89,1067,1.89,1068,1.89,1069,1.89,1070,1.89,1071,3.352,1072,2.808,1073,3.352,1074,1.89,1075,1.89,1076,1.89,1077,1.89,1078,1.89,1079,2.808,1080,1.89,1081,1.89,1082,1.89,1083,1.89,1084,1.89,1085,1.89,1086,1.89,1087,1.89,1088,1.89,1089,1.89,1090,1.89,1091,1.89,1092,3.352,1093,1.89,1094,1.89,1095,1.89,1096,1.89,1097,1.89,1098,1.89,1099,2.808,1100,2.808,1101,1.89,1102,1.89,1103,1.89,1104,1.89,1105,1.89,1106,1.89,1107,1.89,1108,1.89,1109,1.89,1110,1.89,1111,1.89,1112,2.808,1113,1.89,1114,1.89,1115,1.89,1116,1.89,1117,1.89,1118,1.89,1119,2.808,1120,1.89,1121,1.89,1122,1.89,1123,1.89,1124,1.89,1125,2.808,1126,1.89,1127,1.89,1128,1.89,1129,1.89,1130,1.89,1131,1.89,1132,2.808,1133,1.89,1134,1.89,1135,1.89,1136,1.89,1137,1.89,1138,1.89,1139,1.89,1140,1.89,1141,1.89,1142,1.89,1143,1.89,1144,1.89,1145,1.89,1146,1.89,1147,1.89,1148,1.501,1149,1.89,1150,1.89,1151,1.89,1152,1.89,1153,1.89,1154,1.89,1155,1.89,1156,1.89,1157,1.89,1158,1.89,1159,1.89]],["title/license.html",[594,1.078,595,1.261,1160,1.489]],["body/license.html",[24,0.051,86,1.596,90,1.97,223,2.158,245,1.168,248,2.158,350,0.051,351,0.051,507,1.586,768,3.073,885,3.073,913,3.073,959,3.073,1002,3.073,1148,3.073,1160,2.549,1161,3.073,1162,4.805,1163,3.868,1164,3.073,1165,3.073,1166,4.531,1167,3.868,1168,3.868,1169,3.868,1170,3.868,1171,3.868,1172,3.868,1173,4.531,1174,5.227,1175,3.868,1176,3.868,1177,3.868,1178,4.531,1179,3.868,1180,3.868,1181,3.868,1182,3.868,1183,3.868,1184,3.868,1185,3.868,1186,3.868,1187,3.868,1188,4.531,1189,3.868,1190,3.868,1191,3.868,1192,3.868,1193,4.531,1194,4.531,1195,3.868,1196,3.868,1197,3.868,1198,3.868,1199,3.868,1200,3.868,1201,3.868,1202,3.868,1203,3.868,1204,3.868,1205,3.868,1206,3.868,1207,3.868,1208,3.868,1209,3.868,1210,3.868,1211,3.868,1212,3.868,1213,3.868,1214,3.868,1215,3.868,1216,3.868,1217,3.868,1218,3.868,1219,3.868,1220,3.868,1221,3.868]],["title/modules.html",[1222,2.851]],["body/modules.html",[24,0.054,350,0.054,351,0.054,1222,3.32]],["title/overview.html",[1223,2.851]],["body/overview.html",[2,1.258,24,0.054,350,0.054,351,0.054,380,2.745,1223,3.309,1224,4.165,1225,4.165]],["title/properties.html",[381,2.107,669,1.489]],["body/properties.html",[24,0.06,65,0.883,85,0.597,350,0.053,351,0.053,352,1.229,381,2.682,449,1.668,603,3.233,606,3.233,635,3.075,838,3.233,842,3.233,1160,2.682,1161,3.233,1164,3.233,1165,3.233,1226,4.069,1227,4.069,1228,4.666,1229,4.666,1230,4.069,1231,4.069,1232,4.069,1233,4.069]],["title/miscellaneous/variables.html",[816,1.261,1234,2.54]],["body/miscellaneous/variables.html",[0,0.04,9,0.588,24,0.062,26,0.285,28,1.018,66,2.534,70,1.367,85,0.285,91,0.987,117,1.091,129,1.135,158,1.152,159,0.684,196,1.299,246,1.083,321,2.876,350,0.032,351,0.032,385,1.083,386,1.279,387,1.279,388,1.542,389,1.279,390,1.279,391,1.279,392,1.279,393,1.279,394,1.542,396,3.049,397,3.675,398,1.031,399,2.244,400,1.896,402,0.876,403,1.598,406,1.448,407,2.936,408,1.826,409,1.602,410,2.276,411,2.987,414,0.684,417,2.244,419,1.373,420,3.772,423,2.276,424,3.186,425,2.276,430,1.542,433,2.987,436,0.876,535,0.796,559,1.542,566,3.981,588,2.796,795,3.129,816,1.083,1054,2.276,1234,1.542,1235,2.865,1236,1.941,1237,1.941,1238,1.941,1239,4.626,1240,4.626,1241,5.182,1242,5.33,1243,5.367,1244,5.235,1245,4.626,1246,4.692,1247,1.941,1248,2.865,1249,1.941,1250,1.941,1251,4.626,1252,5.012,1253,4.626,1254,4.626,1255,4.626,1256,1.941,1257,2.865,1258,2.865,1259,1.941,1260,4.01,1261,1.941,1262,1.941,1263,1.941,1264,1.941,1265,1.941,1266,1.941,1267,1.941,1268,3.76,1269,2.865,1270,1.941,1271,1.941]]],"invertedIndex":[["",{"_index":24,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"interfaces/Matchers.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":911,"title":{},"body":{"index.html":{}}}],["0.1.0",{"_index":806,"title":{},"body":{"changelog.html":{}}}],["0.2.0",{"_index":790,"title":{},"body":{"changelog.html":{}}}],["0.2.1",{"_index":789,"title":{},"body":{"changelog.html":{}}}],["0.2.2",{"_index":788,"title":{},"body":{"changelog.html":{}}}],["0.2.3",{"_index":787,"title":{},"body":{"changelog.html":{}}}],["0172de3",{"_index":797,"title":{},"body":{"changelog.html":{}}}],["02",{"_index":612,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":608,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":630,"title":{},"body":{"changelog.html":{}}}],["04770c66399ad864e0881886aaf0800",{"_index":719,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":649,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":686,"title":{},"body":{"changelog.html":{}}}],["060449f",{"_index":680,"title":{},"body":{"changelog.html":{}}}],["065ab58",{"_index":800,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":707,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":682,"title":{},"body":{"changelog.html":{}}}],["085fd65",{"_index":804,"title":{},"body":{"changelog.html":{}}}],["09e1172",{"_index":716,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":1054,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":772,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":767,"title":{},"body":{"changelog.html":{}}}],["1.1.8",{"_index":722,"title":{},"body":{"changelog.html":{}}}],["10.0.0",{"_index":704,"title":{},"body":{"changelog.html":{}}}],["10.x",{"_index":678,"title":{},"body":{"changelog.html":{}}}],["100",{"_index":771,"title":{},"body":{"changelog.html":{}}}],["11",{"_index":629,"title":{},"body":{"changelog.html":{}}}],["11.0.0",{"_index":677,"title":{},"body":{"changelog.html":{}}}],["11.x",{"_index":662,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":894,"title":{},"body":{"index.html":{}}}],["12.0.0",{"_index":661,"title":{},"body":{"changelog.html":{}}}],["13",{"_index":650,"title":{},"body":{"changelog.html":{}}}],["13.0.0",{"_index":814,"title":{},"body":{"dependencies.html":{}}}],["13.x",{"_index":636,"title":{},"body":{"changelog.html":{}}}],["146",{"_index":727,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":683,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":769,"title":{},"body":{"changelog.html":{}}}],["17ac60f",{"_index":751,"title":{},"body":{"changelog.html":{}}}],["192a2bd",{"_index":684,"title":{},"body":{"changelog.html":{}}}],["1c0395b",{"_index":734,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":1225,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":735,"title":{},"body":{"changelog.html":{}}}],["2.3.1",{"_index":813,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":674,"title":{},"body":{"changelog.html":{}}}],["2018",{"_index":768,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2019",{"_index":736,"title":{},"body":{"changelog.html":{}}}],["2020",{"_index":673,"title":{},"body":{"changelog.html":{}}}],["2021",{"_index":628,"title":{},"body":{"changelog.html":{}}}],["2022",{"_index":607,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":613,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":807,"title":{},"body":{"changelog.html":{}}}],["26",{"_index":687,"title":{},"body":{"changelog.html":{}}}],["27b885a",{"_index":762,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":791,"title":{},"body":{"changelog.html":{}}}],["2c49330",{"_index":803,"title":{},"body":{"changelog.html":{}}}],["2df1219",{"_index":659,"title":{},"body":{"changelog.html":{}}}],["2e6bce7",{"_index":785,"title":{},"body":{"changelog.html":{}}}],["3.0.0",{"_index":706,"title":{},"body":{"changelog.html":{}}}],["3.4.3",{"_index":715,"title":{},"body":{"changelog.html":{}}}],["30",{"_index":1107,"title":{},"body":{"index.html":{}}}],["31",{"_index":737,"title":{},"body":{"changelog.html":{}}}],["39d1f3a",{"_index":798,"title":{},"body":{"changelog.html":{}}}],["3a159e3",{"_index":759,"title":{},"body":{"changelog.html":{}}}],["3b7ff6c",{"_index":748,"title":{},"body":{"changelog.html":{}}}],["3c95bc6",{"_index":757,"title":{},"body":{"changelog.html":{}}}],["4.0.0",{"_index":685,"title":{},"body":{"changelog.html":{}}}],["4.1.0",{"_index":681,"title":{},"body":{"changelog.html":{}}}],["42",{"_index":786,"title":{},"body":{"changelog.html":{}}}],["5.0.0",{"_index":672,"title":{},"body":{"changelog.html":{}}}],["53b3a45",{"_index":624,"title":{},"body":{"changelog.html":{}}}],["55de6e2",{"_index":623,"title":{},"body":{"changelog.html":{}}}],["5731919",{"_index":654,"title":{},"body":{"changelog.html":{}}}],["592249a",{"_index":732,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":777,"title":{},"body":{"changelog.html":{}}}],["6.0.0",{"_index":648,"title":{},"body":{"changelog.html":{}}}],["6179153",{"_index":754,"title":{},"body":{"changelog.html":{}}}],["6ca161c",{"_index":647,"title":{},"body":{"changelog.html":{}}}],["7.0.0",{"_index":627,"title":{},"body":{"changelog.html":{}}}],["7.1.0",{"_index":611,"title":{},"body":{"changelog.html":{}}}],["7.2.0",{"_index":606,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["7.4.0",{"_index":815,"title":{},"body":{"dependencies.html":{}}}],["7.x",{"_index":766,"title":{},"body":{"changelog.html":{}}}],["768c113",{"_index":610,"title":{},"body":{"changelog.html":{}}}],["8.0.0",{"_index":764,"title":{},"body":{"changelog.html":{}}}],["8.x",{"_index":709,"title":{},"body":{"changelog.html":{}}}],["8036c22",{"_index":805,"title":{},"body":{"changelog.html":{}}}],["80a3aac",{"_index":712,"title":{},"body":{"changelog.html":{}}}],["822963d",{"_index":691,"title":{},"body":{"changelog.html":{}}}],["825f19f",{"_index":626,"title":{},"body":{"changelog.html":{}}}],["9",{"_index":1224,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":708,"title":{},"body":{"changelog.html":{}}}],["9.x",{"_index":705,"title":{},"body":{"changelog.html":{}}}],["_children",{"_index":173,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["_firstchild",{"_index":172,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["_parent",{"_index":170,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["_pathfromroot",{"_index":174,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["_root",{"_index":171,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["_routeconfig",{"_index":175,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["a282826",{"_index":793,"title":{},"body":{"changelog.html":{}}}],["a84096b",{"_index":616,"title":{},"body":{"changelog.html":{}}}],["above",{"_index":913,"title":{},"body":{"index.html":{},"license.html":{}}}],["abstraction",{"_index":1039,"title":{},"body":{"index.html":{}}}],["abstractions",{"_index":499,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["access",{"_index":927,"title":{},"body":{"index.html":{}}}],["accessors",{"_index":10,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["act",{"_index":878,"title":{},"body":{"index.html":{}}}],["action",{"_index":1215,"title":{},"body":{"license.html":{}}}],["activatedroute",{"_index":51,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["activatedroutesnapshot",{"_index":8,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{}}}],["activatedroutesnapshotstub",{"_index":1,"title":{"classes/ActivatedRouteSnapshotStub.html":{}},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["activatedroutestub",{"_index":165,"title":{"classes/ActivatedRouteStub.html":{}},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["activatedroutestub(options",{"_index":349,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["activatedroutestuboptions",{"_index":167,"title":{"interfaces/ActivatedRouteStubOptions.html":{}},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{}}}],["actual",{"_index":196,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["actual.indexof(expected",{"_index":1248,"title":{},"body":{"miscellaneous/variables.html":{}}}],["actual.join",{"_index":1250,"title":{},"body":{"miscellaneous/variables.html":{}}}],["actual.length",{"_index":1249,"title":{},"body":{"miscellaneous/variables.html":{}}}],["actually",{"_index":228,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["add",{"_index":221,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"changelog.html":{},"index.html":{}}}],["adding",{"_index":968,"title":{},"body":{"index.html":{}}}],["addition",{"_index":202,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["additional",{"_index":446,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["adopting",{"_index":976,"title":{},"body":{"index.html":{}}}],["advance",{"_index":1012,"title":{},"body":{"index.html":{}}}],["again",{"_index":980,"title":{},"body":{"index.html":{}}}],["against",{"_index":676,"title":{},"body":{"changelog.html":{}}}],["allow",{"_index":614,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["allowing",{"_index":666,"title":{},"body":{"changelog.html":{}}}],["allows",{"_index":82,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["already",{"_index":758,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["although",{"_index":774,"title":{},"body":{"changelog.html":{}}}],["always",{"_index":792,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["ancestors",{"_index":558,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["and/or",{"_index":1186,"title":{},"body":{"license.html":{}}}],["angular",{"_index":635,"title":{},"body":{"changelog.html":{},"index.html":{},"properties.html":{}}}],["angular's",{"_index":1004,"title":{},"body":{"index.html":{}}}],["angular/core",{"_index":61,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":738,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["angular/router",{"_index":56,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"dependencies.html":{}}}],["anywhere",{"_index":554,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["api",{"_index":958,"title":{},"body":{"index.html":{}}}],["applied",{"_index":1029,"title":{},"body":{"index.html":{}}}],["argument",{"_index":1033,"title":{},"body":{"index.html":{}}}],["arising",{"_index":1218,"title":{},"body":{"license.html":{}}}],["around",{"_index":918,"title":{},"body":{"index.html":{}}}],["array",{"_index":39,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["assert",{"_index":1240,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assert(false",{"_index":1253,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assert(true",{"_index":1255,"title":{},"body":{"miscellaneous/variables.html":{}}}],["associated",{"_index":223,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"license.html":{}}}],["attr",{"_index":451,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["attr(name",{"_index":472,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["attribute",{"_index":475,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["attributes",{"_index":447,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["author",{"_index":1233,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":1208,"title":{},"body":{"license.html":{}}}],["automatic",{"_index":920,"title":{},"body":{"index.html":{}}}],["automatically",{"_index":1000,"title":{},"body":{"index.html":{}}}],["avoid",{"_index":915,"title":{},"body":{"index.html":{}}}],["b2e77d6",{"_index":770,"title":{},"body":{"changelog.html":{}}}],["based",{"_index":243,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"changelog.html":{},"index.html":{}}}],["basic",{"_index":711,"title":{},"body":{"changelog.html":{}}}],["bba2b6b",{"_index":726,"title":{},"body":{"changelog.html":{}}}],["before",{"_index":230,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"index.html":{}}}],["beforeeach",{"_index":966,"title":{},"body":{"index.html":{}}}],["behaves",{"_index":194,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["behavior",{"_index":1088,"title":{},"body":{"index.html":{}}}],["behaviorsubject",{"_index":57,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["behaviorsubject(this.snapshot.data",{"_index":284,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["behaviorsubject(this.snapshot.fragment",{"_index":286,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["behaviorsubject(this.snapshot.params",{"_index":280,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["behaviorsubject(this.snapshot.queryparams",{"_index":282,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["behaviorsubject>(this.snapshot.url",{"_index":288,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["being",{"_index":1011,"title":{},"body":{"index.html":{}}}],["benefiting",{"_index":960,"title":{},"body":{"index.html":{}}}],["better",{"_index":689,"title":{},"body":{"changelog.html":{}}}],["bf9309e",{"_index":620,"title":{},"body":{"changelog.html":{}}}],["birth",{"_index":1052,"title":{},"body":{"index.html":{}}}],["birthdate",{"_index":1050,"title":{},"body":{"index.html":{}}}],["bit",{"_index":1116,"title":{},"body":{"index.html":{}}}],["block",{"_index":723,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["boolean",{"_index":400,"title":{},"body":{"interfaces/Matchers.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"miscellaneous/variables.html":{}}}],["both",{"_index":159,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"interfaces/Matchers.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["breaking",{"_index":631,"title":{},"body":{"changelog.html":{}}}],["browser",{"_index":739,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["bug",{"_index":655,"title":{},"body":{"changelog.html":{}}}],["bugs",{"_index":1227,"title":{},"body":{"properties.html":{}}}],["builds",{"_index":671,"title":{},"body":{"changelog.html":{}}}],["built",{"_index":675,"title":{},"body":{"changelog.html":{}}}],["bump",{"_index":643,"title":{},"body":{"changelog.html":{}}}],["button",{"_index":444,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["button(selector",{"_index":476,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["button.ts",{"_index":442,"title":{},"body":{"classes/TestButton.html":{}}}],["button.ts:16",{"_index":539,"title":{},"body":{"classes/TestButton.html":{}}}],["button.ts:8",{"_index":467,"title":{},"body":{"classes/TestButton.html":{}}}],["buttons",{"_index":935,"title":{},"body":{"index.html":{}}}],["c",{"_index":1163,"title":{},"body":{"license.html":{}}}],["call",{"_index":876,"title":{},"body":{"index.html":{}}}],["called",{"_index":1142,"title":{},"body":{"index.html":{}}}],["calling",{"_index":347,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{}}}],["calls",{"_index":1072,"title":{},"body":{"index.html":{}}}],["cardeditbutton",{"_index":1060,"title":{},"body":{"index.html":{}}}],["cardreviewercomponent",{"_index":1062,"title":{},"body":{"index.html":{}}}],["care",{"_index":859,"title":{},"body":{"index.html":{}}}],["case",{"_index":926,"title":{},"body":{"index.html":{}}}],["cases",{"_index":1136,"title":{},"body":{"index.html":{}}}],["category",{"_index":1100,"title":{},"body":{"index.html":{}}}],["categoryid",{"_index":1094,"title":{},"body":{"index.html":{}}}],["cause",{"_index":1143,"title":{},"body":{"index.html":{}}}],["champagne",{"_index":810,"title":{},"body":{"changelog.html":{}}}],["change",{"_index":233,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["changed",{"_index":340,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"index.html":{}}}],["changelog",{"_index":596,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":598,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["changing",{"_index":205,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"index.html":{}}}],["charge",{"_index":1170,"title":{},"body":{"license.html":{}}}],["check",{"_index":566,"title":{},"body":{"classes/TestInput.html":{},"miscellaneous/variables.html":{}}}],["checkboxes",{"_index":1079,"title":{},"body":{"index.html":{}}}],["checked",{"_index":399,"title":{},"body":{"interfaces/Matchers.html":{},"classes/TestInput.html":{},"miscellaneous/variables.html":{}}}],["checking",{"_index":227,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["checks",{"_index":396,"title":{},"body":{"interfaces/Matchers.html":{},"classes/TestInput.html":{},"miscellaneous/variables.html":{}}}],["child",{"_index":127,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["children",{"_index":13,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"index.html":{}}}],["children(value",{"_index":183,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["choose",{"_index":1010,"title":{},"body":{"index.html":{}}}],["chore",{"_index":733,"title":{},"body":{"changelog.html":{}}}],["cities",{"_index":888,"title":{},"body":{"index.html":{}}}],["city",{"_index":898,"title":{},"body":{"index.html":{}}}],["claim",{"_index":1211,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"interfaces/Matchers.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{},"overview.html":{}}}],["classname",{"_index":415,"title":{},"body":{"interfaces/Matchers.html":{}}}],["cleaner",{"_index":841,"title":{},"body":{"index.html":{}}}],["cli",{"_index":645,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["click",{"_index":450,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["clicks",{"_index":470,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["closes",{"_index":717,"title":{},"body":{"changelog.html":{}}}],["code",{"_index":83,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["codelyzer",{"_index":746,"title":{},"body":{"changelog.html":{}}}],["collectmethodnames",{"_index":818,"title":{},"body":{"miscellaneous/functions.html":{}}}],["collectmethodnames(proto",{"_index":822,"title":{},"body":{"miscellaneous/functions.html":{}}}],["combine",{"_index":749,"title":{},"body":{"changelog.html":{}}}],["comment",{"_index":189,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["commit",{"_index":604,"title":{},"body":{"changelog.html":{}}}],["compare",{"_index":1251,"title":{},"body":{"miscellaneous/variables.html":{}}}],["compilation",{"_index":653,"title":{},"body":{"changelog.html":{}}}],["complete",{"_index":882,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":721,"title":{},"body":{"changelog.html":{}}}],["compodoc/compodoc#765",{"_index":728,"title":{},"body":{"changelog.html":{}}}],["component",{"_index":118,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["component's",{"_index":1149,"title":{},"body":{"index.html":{}}}],["component(selector",{"_index":484,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["component.spec.ts",{"_index":951,"title":{},"body":{"index.html":{}}}],["componentfixture",{"_index":849,"title":{},"body":{"index.html":{}}}],["componentinstance",{"_index":962,"title":{},"body":{"index.html":{}}}],["components",{"_index":452,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["components(selector",{"_index":487,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["componenttester",{"_index":465,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["componenttester(mycomponent);and",{"_index":974,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":1192,"title":{},"body":{"license.html":{}}}],["config",{"_index":658,"title":{},"body":{"changelog.html":{}}}],["configuration",{"_index":120,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["configure",{"_index":1139,"title":{},"body":{"index.html":{}}}],["configured",{"_index":981,"title":{},"body":{"index.html":{}}}],["connection",{"_index":1220,"title":{},"body":{"license.html":{}}}],["consistent",{"_index":335,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["const",{"_index":129,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":116,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["constructor",{"_index":16,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["constructor(options",{"_index":249,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["constructor(tester",{"_index":464,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["constructs",{"_index":241,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["contain",{"_index":70,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["contains",{"_index":410,"title":{},"body":{"interfaces/Matchers.html":{},"miscellaneous/variables.html":{}}}],["contents",{"_index":796,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["contract",{"_index":1216,"title":{},"body":{"license.html":{}}}],["converttoparammap",{"_index":52,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["converttoparammap(options.params",{"_index":161,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["converttoparammap(options.queryparams",{"_index":162,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["converttoparammap(params",{"_index":134,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["copies",{"_index":1188,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1173,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1162,"title":{},"body":{"license.html":{}}}],["corresponding",{"_index":332,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"changelog.html":{}}}],["country",{"_index":889,"title":{},"body":{"index.html":{}}}],["countryselect",{"_index":891,"title":{},"body":{"index.html":{}}}],["countryselect.dispatchevent(new",{"_index":895,"title":{},"body":{"index.html":{}}}],["countryselect.selectedindex",{"_index":893,"title":{},"body":{"index.html":{}}}],["create",{"_index":496,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["created",{"_index":67,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["createmock",{"_index":617,"title":{},"body":{"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["createmock(productservice);testing",{"_index":1121,"title":{},"body":{"index.html":{}}}],["createmock(type",{"_index":824,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createmock(userservice",{"_index":831,"title":{},"body":{"miscellaneous/functions.html":{}}}],["creates",{"_index":62,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{}}}],["creating",{"_index":164,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"index.html":{}}}],["creations",{"_index":619,"title":{},"body":{"changelog.html":{}}}],["css",{"_index":414,"title":{},"body":{"interfaces/Matchers.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["current",{"_index":119,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["custom",{"_index":453,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{}}}],["custom(selector",{"_index":490,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["customs",{"_index":454,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["customs(selector",{"_index":503,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["customtestelementtype",{"_index":491,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["damages",{"_index":1212,"title":{},"body":{"license.html":{}}}],["data",{"_index":53,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["datasubject",{"_index":238,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["date",{"_index":1035,"title":{},"body":{"index.html":{}}}],["datepicker",{"_index":1030,"title":{},"body":{"index.html":{}}}],["datepickerdirective",{"_index":1028,"title":{},"body":{"index.html":{}}}],["day",{"_index":1046,"title":{},"body":{"index.html":{}}}],["deal",{"_index":1176,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1221,"title":{},"body":{"license.html":{}}}],["debug",{"_index":930,"title":{},"body":{"index.html":{}}}],["debugelement",{"_index":466,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["debugelement.query(by.css",{"_index":1005,"title":{},"body":{"index.html":{}}}],["debugelement.query(by.directive",{"_index":1008,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":985,"title":{},"body":{"index.html":{}}}],["declare",{"_index":437,"title":{},"body":{"interfaces/Matchers.html":{}}}],["declared",{"_index":1118,"title":{},"body":{"index.html":{}}}],["default",{"_index":246,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":17,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/Matchers.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["delete",{"_index":830,"title":{},"body":{"miscellaneous/functions.html":{}}}],["demo",{"_index":1159,"title":{},"body":{"index.html":{}}}],["dep",{"_index":741,"title":{},"body":{"changelog.html":{}}}],["dependencies",{"_index":811,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["dependency",{"_index":744,"title":{},"body":{"changelog.html":{}}}],["depending",{"_index":94,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{}}}],["deprecate",{"_index":622,"title":{},"body":{"changelog.html":{}}}],["deprecated",{"_index":95,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["deprecation/deprecation",{"_index":154,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["describe('my",{"_index":983,"title":{},"body":{"index.html":{}}}],["describe('routing",{"_index":1093,"title":{},"body":{"index.html":{}}}],["description",{"_index":352,"title":{},"body":{"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{},"properties.html":{}}}],["details",{"_index":861,"title":{},"body":{"index.html":{}}}],["detectchanges",{"_index":877,"title":{},"body":{"index.html":{}}}],["detecting",{"_index":999,"title":{},"body":{"index.html":{}}}],["detection",{"_index":471,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["dev",{"_index":949,"title":{},"body":{"index.html":{}}}],["df43796",{"_index":745,"title":{},"body":{"changelog.html":{}}}],["different",{"_index":229,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["directive",{"_index":483,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["directives",{"_index":489,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["directly",{"_index":1145,"title":{},"body":{"index.html":{}}}],["disable",{"_index":151,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["disabled",{"_index":463,"title":{},"body":{"classes/TestButton.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"changelog.html":{}}}],["dispatch",{"_index":996,"title":{},"body":{"index.html":{}}}],["dispatched",{"_index":1001,"title":{},"body":{"index.html":{}}}],["dispatches",{"_index":509,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["dispatchevent",{"_index":455,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["dispatchevent(event",{"_index":506,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["dispatcheventoftype",{"_index":456,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["dispatcheventoftype(type",{"_index":510,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["dispatching",{"_index":867,"title":{},"body":{"index.html":{}}}],["display",{"_index":556,"title":{},"body":{"classes/TestHtmlElement.html":{},"index.html":{}}}],["distribute",{"_index":1184,"title":{},"body":{"license.html":{}}}],["docs",{"_index":783,"title":{},"body":{"changelog.html":{}}}],["documentation",{"_index":959,"title":{},"body":{"index.html":{},"license.html":{}}}],["documented",{"_index":600,"title":{},"body":{"changelog.html":{}}}],["doesn't",{"_index":79,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["dom",{"_index":408,"title":{},"body":{"interfaces/Matchers.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["don't",{"_index":89,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["downgrade",{"_index":720,"title":{},"body":{"changelog.html":{}}}],["dry",{"_index":910,"title":{},"body":{"index.html":{}}}],["e",{"_index":493,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["e0a0472",{"_index":801,"title":{},"body":{"changelog.html":{}}}],["e1163fb",{"_index":802,"title":{},"body":{"changelog.html":{}}}],["e354723",{"_index":742,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":964,"title":{},"body":{"index.html":{}}}],["easier",{"_index":98,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["easily",{"_index":1037,"title":{},"body":{"index.html":{}}}],["eee2e97",{"_index":799,"title":{},"body":{"changelog.html":{}}}],["el",{"_index":1242,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.checked",{"_index":1263,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.classes",{"_index":1247,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.selectedindex",{"_index":1265,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.selectedlabel",{"_index":1267,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.selectedvalue",{"_index":1266,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.textcontent",{"_index":1257,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.textcontent?.trim",{"_index":1262,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.value",{"_index":1256,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.visible",{"_index":1271,"title":{},"body":{"miscellaneous/variables.html":{}}}],["element",{"_index":409,"title":{},"body":{"interfaces/Matchers.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["element('input",{"_index":1017,"title":{},"body":{"index.html":{}}}],["element(datepickerdirective",{"_index":1027,"title":{},"body":{"index.html":{}}}],["element(s",{"_index":696,"title":{},"body":{"changelog.html":{}}}],["element(selector",{"_index":512,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["element.ts",{"_index":544,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["element.ts:16",{"_index":546,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["element.ts:26",{"_index":548,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["element.ts:8",{"_index":545,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["elements",{"_index":457,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{}}}],["elements(selector",{"_index":521,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["emit",{"_index":209,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"index.html":{}}}],["emits",{"_index":224,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["emitting",{"_index":1147,"title":{},"body":{"index.html":{}}}],["empty",{"_index":247,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{}}}],["enable",{"_index":651,"title":{},"body":{"changelog.html":{}}}],["enabled",{"_index":665,"title":{},"body":{"changelog.html":{}}}],["encourage",{"_index":781,"title":{},"body":{"changelog.html":{}}}],["engine",{"_index":664,"title":{},"body":{"changelog.html":{}}}],["enjoy",{"_index":967,"title":{},"body":{"index.html":{}}}],["entirely",{"_index":217,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["entry",{"_index":971,"title":{},"body":{"index.html":{}}}],["equal",{"_index":425,"title":{},"body":{"interfaces/Matchers.html":{},"miscellaneous/variables.html":{}}}],["equivalent",{"_index":832,"title":{},"body":{"miscellaneous/functions.html":{}}}],["error",{"_index":481,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["eslint",{"_index":150,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["eslint/ban",{"_index":187,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["etc",{"_index":199,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["even",{"_index":922,"title":{},"body":{"index.html":{}}}],["event",{"_index":507,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{},"license.html":{}}}],["event('change",{"_index":896,"title":{},"body":{"index.html":{}}}],["events",{"_index":868,"title":{},"body":{"index.html":{}}}],["everything",{"_index":339,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["exact",{"_index":430,"title":{},"body":{"interfaces/Matchers.html":{},"miscellaneous/variables.html":{}}}],["example",{"_index":222,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{}}}],["except",{"_index":328,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["exist",{"_index":934,"title":{},"body":{"index.html":{}}}],["expect(city).tobetruthy",{"_index":900,"title":{},"body":{"index.html":{}}}],["expect(city.options.length).tobe(3",{"_index":901,"title":{},"body":{"index.html":{}}}],["expect(city.options[0].label).tobe",{"_index":903,"title":{},"body":{"index.html":{}}}],["expect(city.options[0].value).tobe",{"_index":902,"title":{},"body":{"index.html":{}}}],["expect(city.options[1].label).tobe('paris",{"_index":905,"title":{},"body":{"index.html":{}}}],["expect(city.options[1].value).tobe('paris",{"_index":904,"title":{},"body":{"index.html":{}}}],["expect(city.options[2].label).tobe('lyon",{"_index":907,"title":{},"body":{"index.html":{}}}],["expect(city.options[2].value).tobe('lyon",{"_index":906,"title":{},"body":{"index.html":{}}}],["expect(fixture.nativeelement.queryselector('#city')).tobefalsy",{"_index":912,"title":{},"body":{"index.html":{}}}],["expect(tester.city).tobefalsy",{"_index":945,"title":{},"body":{"index.html":{}}}],["expect(tester.city.optionlabels).toequal",{"_index":942,"title":{},"body":{"index.html":{}}}],["expect(tester.city.optionvalues).toequal",{"_index":939,"title":{},"body":{"index.html":{}}}],["expect(tester.title).tohavetrimmedtext('some",{"_index":1259,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expect(userservice.create).not.tohavebencalled",{"_index":1056,"title":{},"body":{"index.html":{}}}],["expectations",{"_index":923,"title":{},"body":{"index.html":{}}}],["expected",{"_index":1243,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expected.trim",{"_index":1261,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expectedstate",{"_index":1268,"title":{},"body":{"miscellaneous/variables.html":{}}}],["export",{"_index":102,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["expose",{"_index":954,"title":{},"body":{"index.html":{}}}],["exposing",{"_index":197,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["express",{"_index":1199,"title":{},"body":{"license.html":{}}}],["extending",{"_index":952,"title":{},"body":{"index.html":{}}}],["extends",{"_index":7,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["f46816e",{"_index":765,"title":{},"body":{"changelog.html":{}}}],["fake",{"_index":63,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{}}}],["fakeroute",{"_index":157,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["fakeroute(options",{"_index":104,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{}}}],["fakesnapshot",{"_index":155,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["fakesnapshot(options",{"_index":160,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{}}}],["false",{"_index":588,"title":{},"body":{"classes/TestInput.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["falsy",{"_index":1245,"title":{},"body":{"miscellaneous/variables.html":{}}}],["faster",{"_index":670,"title":{},"body":{"changelog.html":{}}}],["favor",{"_index":96,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{}}}],["features",{"_index":609,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["feedback",{"_index":1151,"title":{},"body":{"index.html":{}}}],["few",{"_index":853,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"interfaces/Matchers.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{}}}],["files",{"_index":1175,"title":{},"body":{"license.html":{}}}],["filing",{"_index":1152,"title":{},"body":{"index.html":{}}}],["fillwith",{"_index":567,"title":{},"body":{"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["fillwith(value",{"_index":571,"title":{},"body":{"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["fine",{"_index":776,"title":{},"body":{"changelog.html":{}}}],["first",{"_index":126,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{}}}],["firstchild",{"_index":12,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["firstchild(value",{"_index":181,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["fitness",{"_index":1204,"title":{},"body":{"license.html":{}}}],["fix",{"_index":794,"title":{},"body":{"changelog.html":{}}}],["fixes",{"_index":656,"title":{},"body":{"changelog.html":{}}}],["fixture",{"_index":928,"title":{},"body":{"index.html":{}}}],["fixture.detectchanges",{"_index":897,"title":{},"body":{"index.html":{}}}],["fixture.nativeelement.queryselector('#city",{"_index":899,"title":{},"body":{"index.html":{}}}],["fixture.nativeelement.queryselector('#country",{"_index":892,"title":{},"body":{"index.html":{}}}],["flag",{"_index":540,"title":{},"body":{"classes/TestButton.html":{}}}],["following",{"_index":885,"title":{},"body":{"index.html":{},"license.html":{}}}],["force",{"_index":1146,"title":{},"body":{"index.html":{}}}],["formatting",{"_index":756,"title":{},"body":{"changelog.html":{}}}],["found",{"_index":494,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["fragment",{"_index":111,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["fragmentsubject",{"_index":239,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["france",{"_index":890,"title":{},"body":{"index.html":{}}}],["free",{"_index":1169,"title":{},"body":{"license.html":{}}}],["french",{"_index":887,"title":{},"body":{"index.html":{}}}],["function",{"_index":103,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"index.html":{}}}],["functionalities",{"_index":973,"title":{},"body":{"index.html":{}}}],["functions",{"_index":817,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["furnished",{"_index":1191,"title":{},"body":{"license.html":{}}}],["future",{"_index":778,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["generated",{"_index":969,"title":{},"body":{"index.html":{}}}],["generic",{"_index":1014,"title":{},"body":{"index.html":{}}}],["getchecked",{"_index":578,"title":{},"body":{"classes/TestInput.html":{}}}],["getchildren",{"_index":36,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{}}}],["getdisabled",{"_index":538,"title":{},"body":{"classes/TestButton.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["getfirstchild",{"_index":31,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{}}}],["getpathfromroot",{"_index":41,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{}}}],["getroot",{"_index":19,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{}}}],["getrouteconfig",{"_index":45,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{}}}],["gets",{"_index":474,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["getters",{"_index":955,"title":{},"body":{"index.html":{}}}],["getting",{"_index":594,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"changelog.html":{},"index.html":{}}}],["getvalue",{"_index":576,"title":{},"body":{"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["getvisible",{"_index":547,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["github",{"_index":1156,"title":{},"body":{"index.html":{}}}],["github.com/definitelytyped/definitelytyped/commit/b7d7813c5deacde98bcb7a5e63104431b85c09eb#diff",{"_index":718,"title":{},"body":{"changelog.html":{}}}],["given",{"_index":91,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"interfaces/Matchers.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["goes",{"_index":73,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{}}}],["going",{"_index":1070,"title":{},"body":{"index.html":{}}}],["good",{"_index":1085,"title":{},"body":{"index.html":{}}}],["gotchas",{"_index":874,"title":{},"body":{"index.html":{}}}],["granted",{"_index":1168,"title":{},"body":{"license.html":{}}}],["guaranteed",{"_index":780,"title":{},"body":{"changelog.html":{}}}],["guidelines",{"_index":605,"title":{},"body":{"changelog.html":{}}}],["handling",{"_index":216,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["happens",{"_index":206,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["having",{"_index":1089,"title":{},"body":{"index.html":{}}}],["helper",{"_index":870,"title":{},"body":{"index.html":{}}}],["helpful",{"_index":994,"title":{},"body":{"index.html":{}}}],["helping",{"_index":448,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["helps",{"_index":838,"title":{},"body":{"index.html":{},"properties.html":{}}}],["hereby",{"_index":1167,"title":{},"body":{"license.html":{}}}],["hide",{"_index":908,"title":{},"body":{"index.html":{}}}],["higher",{"_index":497,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["holders",{"_index":1209,"title":{},"body":{"license.html":{}}}],["host",{"_index":873,"title":{},"body":{"index.html":{}}}],["hostcomponent",{"_index":1124,"title":{},"body":{"index.html":{}}}],["hostcomponenttester",{"_index":1130,"title":{},"body":{"index.html":{}}}],["html",{"_index":541,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{}}}],["https://github.com/ninja",{"_index":1228,"title":{},"body":{"properties.html":{}}}],["i.e",{"_index":552,"title":{},"body":{"classes/TestHtmlElement.html":{},"miscellaneous/functions.html":{}}}],["id",{"_index":1126,"title":{},"body":{"index.html":{}}}],["ignore",{"_index":190,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["ignored",{"_index":327,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["imperatively",{"_index":1091,"title":{},"body":{"index.html":{}}}],["implementation",{"_index":550,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["implicit",{"_index":743,"title":{},"body":{"changelog.html":{}}}],["implied",{"_index":1200,"title":{},"body":{"license.html":{}}}],["import",{"_index":50,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["imports",{"_index":750,"title":{},"body":{"changelog.html":{}}}],["in'}visible",{"_index":1270,"title":{},"body":{"miscellaneous/variables.html":{}}}],["included",{"_index":1195,"title":{},"body":{"license.html":{}}}],["includes",{"_index":1065,"title":{},"body":{"index.html":{}}}],["including",{"_index":1178,"title":{},"body":{"license.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"interfaces/Matchers.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["infer",{"_index":693,"title":{},"body":{"changelog.html":{}}}],["inferred",{"_index":697,"title":{},"body":{"changelog.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"interfaces/Matchers.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["information",{"_index":995,"title":{},"body":{"index.html":{}}}],["inherited",{"_index":468,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["initial",{"_index":168,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"index.html":{}}}],["initialize",{"_index":1137,"title":{},"body":{"index.html":{}}}],["inject",{"_index":1086,"title":{},"body":{"index.html":{}}}],["injection",{"_index":865,"title":{},"body":{"index.html":{}}}],["injector",{"_index":534,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["input",{"_index":458,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["input(selector",{"_index":525,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["input.ts",{"_index":565,"title":{},"body":{"classes/TestInput.html":{}}}],["input.ts:17",{"_index":572,"title":{},"body":{"classes/TestInput.html":{}}}],["input.ts:25",{"_index":577,"title":{},"body":{"classes/TestInput.html":{}}}],["input.ts:32",{"_index":579,"title":{},"body":{"classes/TestInput.html":{}}}],["input.ts:39",{"_index":581,"title":{},"body":{"classes/TestInput.html":{}}}],["input.ts:46",{"_index":570,"title":{},"body":{"classes/TestInput.html":{}}}],["input.ts:54",{"_index":574,"title":{},"body":{"classes/TestInput.html":{}}}],["input.ts:8",{"_index":569,"title":{},"body":{"classes/TestInput.html":{}}}],["inputfield",{"_index":1042,"title":{},"body":{"index.html":{}}}],["inputs",{"_index":523,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["inspect",{"_index":1018,"title":{},"body":{"index.html":{}}}],["install",{"_index":947,"title":{},"body":{"index.html":{}}}],["installation",{"_index":860,"title":{},"body":{"index.html":{}}}],["installed",{"_index":1066,"title":{},"body":{"index.html":{}}}],["instance",{"_index":242,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["instanceof",{"_index":1246,"title":{},"body":{"miscellaneous/variables.html":{}}}],["instances",{"_index":989,"title":{},"body":{"index.html":{}}}],["instead",{"_index":226,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["interact",{"_index":1038,"title":{},"body":{"index.html":{}}}],["interface",{"_index":166,"title":{"interfaces/ActivatedRouteStubOptions.html":{},"interfaces/Matchers.html":{}},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"interfaces/Matchers.html":{}}}],["interfaces",{"_index":380,"title":{},"body":{"interfaces/ActivatedRouteStubOptions.html":{},"interfaces/Matchers.html":{},"overview.html":{}}}],["introduce",{"_index":621,"title":{},"body":{"changelog.html":{}}}],["introspection",{"_index":1117,"title":{},"body":{"index.html":{}}}],["inversestate",{"_index":1269,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isn't",{"_index":482,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["isnegative",{"_index":1241,"title":{},"body":{"miscellaneous/variables.html":{}}}],["issue",{"_index":724,"title":{},"body":{"changelog.html":{}}}],["issues",{"_index":880,"title":{},"body":{"index.html":{}}}],["it's",{"_index":115,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"index.html":{}}}],["it('should",{"_index":886,"title":{},"body":{"index.html":{}}}],["item",{"_index":319,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["itself",{"_index":879,"title":{},"body":{"index.html":{}}}],["ivy",{"_index":652,"title":{},"body":{"changelog.html":{}}}],["jasmine",{"_index":439,"title":{},"body":{"interfaces/Matchers.html":{},"changelog.html":{},"index.html":{}}}],["jasmine.addmatchers(speculoosmatchers));or",{"_index":1067,"title":{},"body":{"index.html":{}}}],["jasmine.createspyobj('productservice",{"_index":1113,"title":{},"body":{"index.html":{}}}],["jasmine.createspyobj('userservice",{"_index":833,"title":{},"body":{"miscellaneous/functions.html":{}}}],["jasmine.custommatcher",{"_index":1239,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jasmine.custommatcherfactories",{"_index":1238,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jasmine.custommatcherresult",{"_index":1252,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jasmine.spyobj",{"_index":837,"title":{},"body":{"miscellaneous/functions.html":{}}}],["john",{"_index":1128,"title":{},"body":{"index.html":{}}}],["jquery",{"_index":551,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["jsdoc",{"_index":755,"title":{},"body":{"changelog.html":{}}}],["k",{"_index":513,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["kept",{"_index":200,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["keywords",{"_index":1226,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":1002,"title":{},"body":{"index.html":{},"license.html":{}}}],["know",{"_index":855,"title":{},"body":{"index.html":{}}}],["label",{"_index":424,"title":{},"body":{"interfaces/Matchers.html":{},"miscellaneous/variables.html":{}}}],["latest",{"_index":761,"title":{},"body":{"changelog.html":{}}}],["level",{"_index":498,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["liability",{"_index":1213,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1210,"title":{},"body":{"license.html":{}}}],["library",{"_index":847,"title":{},"body":{"index.html":{}}}],["license",{"_index":1160,"title":{"license.html":{}},"body":{"license.html":{},"properties.html":{}}}],["lifecycle",{"_index":1144,"title":{},"body":{"index.html":{}}}],["limitation",{"_index":1179,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1201,"title":{},"body":{"license.html":{}}}],["line",{"_index":153,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"index.html":{}}}],["lint",{"_index":752,"title":{},"body":{"changelog.html":{}}}],["list",{"_index":1064,"title":{},"body":{"index.html":{}}}],["literal",{"_index":373,"title":{},"body":{"classes/ActivatedRouteStub.html":{}}}],["load",{"_index":1101,"title":{},"body":{"index.html":{}}}],["logical",{"_index":100,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{}}}],["look",{"_index":1157,"title":{},"body":{"index.html":{}}}],["lot",{"_index":1122,"title":{},"body":{"index.html":{}}}],["lyon",{"_index":941,"title":{},"body":{"index.html":{}}}],["made",{"_index":1057,"title":{},"body":{"index.html":{}}}],["make",{"_index":334,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"index.html":{}}}],["map",{"_index":58,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["match",{"_index":122,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["matched",{"_index":478,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["matcher",{"_index":625,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["matchers",{"_index":382,"title":{"interfaces/Matchers.html":{}},"body":{"interfaces/Matchers.html":{},"changelog.html":{},"index.html":{}}}],["matchers.ts",{"_index":384,"title":{},"body":{"interfaces/Matchers.html":{}}}],["matchers.ts:12",{"_index":435,"title":{},"body":{"interfaces/Matchers.html":{}}}],["matchers.ts:17",{"_index":429,"title":{},"body":{"interfaces/Matchers.html":{}}}],["matchers.ts:23",{"_index":432,"title":{},"body":{"interfaces/Matchers.html":{}}}],["matchers.ts:28",{"_index":405,"title":{},"body":{"interfaces/Matchers.html":{}}}],["matchers.ts:33",{"_index":395,"title":{},"body":{"interfaces/Matchers.html":{}}}],["matchers.ts:38",{"_index":418,"title":{},"body":{"interfaces/Matchers.html":{}}}],["matchers.ts:43",{"_index":427,"title":{},"body":{"interfaces/Matchers.html":{}}}],["matchers.ts:48",{"_index":422,"title":{},"body":{"interfaces/Matchers.html":{}}}],["matchers.ts:53",{"_index":401,"title":{},"body":{"interfaces/Matchers.html":{}}}],["matchers.ts:7",{"_index":413,"title":{},"body":{"interfaces/Matchers.html":{}}}],["matches",{"_index":520,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["matching",{"_index":351,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"interfaces/Matchers.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["matrix",{"_index":106,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["max",{"_index":1105,"title":{},"body":{"index.html":{}}}],["meaning",{"_index":549,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["merchantability",{"_index":1203,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1182,"title":{},"body":{"license.html":{}}}],["message",{"_index":1244,"title":{},"body":{"miscellaneous/variables.html":{}}}],["messages",{"_index":925,"title":{},"body":{"index.html":{}}}],["method",{"_index":517,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["methods",{"_index":353,"title":{},"body":{"classes/ActivatedRouteStub.html":{},"interfaces/Matchers.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["mimics",{"_index":1087,"title":{},"body":{"index.html":{}}}],["minimal",{"_index":1158,"title":{},"body":{"index.html":{}}}],["minutes",{"_index":854,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":816,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1161,"title":{},"body":{"license.html":{},"properties.html":{}}}],["mock",{"_index":834,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["mocking",{"_index":871,"title":{},"body":{"index.html":{}}}],["mocks",{"_index":1140,"title":{},"body":{"index.html":{}}}],["modified",{"_index":207,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["modify",{"_index":1181,"title":{},"body":{"license.html":{}}}],["module",{"_index":982,"title":{},"body":{"index.html":{}}}],["modules",{"_index":1222,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["month",{"_index":1045,"title":{},"body":{"index.html":{}}}],["more",{"_index":99,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["mycomponent",{"_index":986,"title":{},"body":{"index.html":{}}}],["mycomponenttester",{"_index":931,"title":{},"body":{"index.html":{}}}],["name",{"_index":25,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"interfaces/Matchers.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["namespace",{"_index":438,"title":{},"body":{"interfaces/Matchers.html":{}}}],["native",{"_index":929,"title":{},"body":{"index.html":{}}}],["nativeelement",{"_index":963,"title":{},"body":{"index.html":{}}}],["navigation",{"_index":204,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"index.html":{}}}],["navigations",{"_index":1090,"title":{},"body":{"index.html":{}}}],["need",{"_index":875,"title":{},"body":{"index.html":{}}}],["needed",{"_index":938,"title":{},"body":{"index.html":{}}}],["needs",{"_index":637,"title":{},"body":{"changelog.html":{}}}],["negativecompare",{"_index":1254,"title":{},"body":{"miscellaneous/variables.html":{}}}],["new",{"_index":210,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["next",{"_index":152,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["ng",{"_index":644,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["ngcc",{"_index":667,"title":{},"body":{"changelog.html":{}}}],["ngoninit",{"_index":1141,"title":{},"body":{"index.html":{}}}],["ngx",{"_index":632,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["ninja",{"_index":1164,"title":{},"body":{"license.html":{},"properties.html":{}}}],["non",{"_index":330,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["none",{"_index":559,"title":{},"body":{"classes/TestHtmlElement.html":{},"miscellaneous/variables.html":{}}}],["noninfringement",{"_index":1207,"title":{},"body":{"license.html":{}}}],["notable",{"_index":597,"title":{},"body":{"changelog.html":{}}}],["notice",{"_index":1193,"title":{},"body":{"license.html":{}}}],["now",{"_index":634,"title":{},"body":{"changelog.html":{}}}],["npm",{"_index":946,"title":{},"body":{"index.html":{}}}],["null",{"_index":34,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"changelog.html":{}}}],["number",{"_index":417,"title":{},"body":{"interfaces/Matchers.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":826,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["objects",{"_index":998,"title":{},"body":{"index.html":{}}}],["observable",{"_index":59,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["observables",{"_index":198,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"index.html":{}}}],["obtaining",{"_index":1172,"title":{},"body":{"license.html":{}}}],["offer",{"_index":993,"title":{},"body":{"index.html":{}}}],["older",{"_index":640,"title":{},"body":{"changelog.html":{}}}],["omit",{"_index":156,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["once",{"_index":331,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"index.html":{}}}],["one",{"_index":310,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"index.html":{}}}],["option",{"_index":244,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"index.html":{}}}],["option's",{"_index":423,"title":{},"body":{"interfaces/Matchers.html":{},"miscellaneous/variables.html":{}}}],["optional",{"_index":27,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"interfaces/Matchers.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["options",{"_index":163,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{}}}],["options.children",{"_index":146,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["options.component",{"_index":140,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["options.data",{"_index":138,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["options.firstchild",{"_index":145,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["options.fragment",{"_index":137,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["options.outlet",{"_index":139,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["options.params",{"_index":132,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["options.params.pipe(map(params",{"_index":133,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["options.parent",{"_index":144,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["options.pathfromroot",{"_index":147,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["options.queryparams",{"_index":135,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["options.queryparams.pipe(map(params",{"_index":136,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["options.root",{"_index":143,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["options.routeconfig",{"_index":142,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["options.snapshot",{"_index":141,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["options.url",{"_index":131,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["options?.children",{"_index":252,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["options?.data",{"_index":262,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["options?.firstchild",{"_index":251,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["options?.fragment",{"_index":264,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["options?.params",{"_index":258,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["options?.parent",{"_index":253,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["options?.queryparams",{"_index":260,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["options?.routeconfig",{"_index":268,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["options?.url",{"_index":266,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["order",{"_index":977,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":248,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"license.html":{}}}],["out",{"_index":1219,"title":{},"body":{"license.html":{}}}],["outlet",{"_index":114,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["outputs",{"_index":1019,"title":{},"body":{"index.html":{}}}],["over",{"_index":979,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1223,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":669,"title":{"dependencies.html":{},"properties.html":{}},"body":{"changelog.html":{}}}],["page",{"_index":843,"title":{},"body":{"index.html":{}}}],["param",{"_index":582,"title":{},"body":{"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["parameter",{"_index":308,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"index.html":{}}}],["parameters",{"_index":23,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"interfaces/Matchers.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["parammap",{"_index":69,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":54,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["paramssubject",{"_index":236,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["parent",{"_index":76,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["parent(value",{"_index":177,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["paris",{"_index":940,"title":{},"body":{"index.html":{}}}],["partial",{"_index":64,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["partially",{"_index":92,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{}}}],["particular",{"_index":1205,"title":{},"body":{"license.html":{}}}],["parts",{"_index":301,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["pass",{"_index":66,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["passed",{"_index":78,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{}}}],["passing",{"_index":1015,"title":{},"body":{"index.html":{}}}],["password",{"_index":1076,"title":{},"body":{"index.html":{}}}],["path",{"_index":128,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["pathfromroot",{"_index":14,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["pathfromroot(value",{"_index":185,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["pattern",{"_index":844,"title":{},"body":{"index.html":{}}}],["peer",{"_index":740,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["perform",{"_index":1059,"title":{},"body":{"index.html":{}}}],["permission",{"_index":1166,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1189,"title":{},"body":{"license.html":{}}}],["person",{"_index":1171,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1190,"title":{},"body":{"license.html":{}}}],["pets",{"_index":1095,"title":{},"body":{"index.html":{}}}],["please",{"_index":1150,"title":{},"body":{"index.html":{}}}],["point",{"_index":972,"title":{},"body":{"index.html":{}}}],["polyfill",{"_index":731,"title":{},"body":{"changelog.html":{}}}],["polyfill.ts",{"_index":760,"title":{},"body":{"changelog.html":{}}}],["populated",{"_index":93,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{}}}],["portions",{"_index":1197,"title":{},"body":{"license.html":{}}}],["possible",{"_index":694,"title":{},"body":{"changelog.html":{}}}],["prefer",{"_index":956,"title":{},"body":{"index.html":{}}}],["present",{"_index":553,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["presentation",{"_index":858,"title":{},"body":{"index.html":{}}}],["previous",{"_index":642,"title":{},"body":{"changelog.html":{}}}],["previously",{"_index":909,"title":{},"body":{"index.html":{}}}],["price",{"_index":1106,"title":{},"body":{"index.html":{}}}],["private",{"_index":169,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["producticon",{"_index":1021,"title":{},"body":{"index.html":{}}}],["producticoncomponent",{"_index":1023,"title":{},"body":{"index.html":{}}}],["products",{"_index":1099,"title":{},"body":{"index.html":{}}}],["productservice",{"_index":1112,"title":{},"body":{"index.html":{}}}],["project",{"_index":599,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["properly",{"_index":692,"title":{},"body":{"changelog.html":{}}}],["properties",{"_index":381,"title":{"properties.html":{}},"body":{"interfaces/ActivatedRouteStubOptions.html":{},"properties.html":{}}}],["property",{"_index":580,"title":{},"body":{"classes/TestInput.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{}}}],["proto",{"_index":823,"title":{},"body":{"miscellaneous/functions.html":{}}}],["provide",{"_index":1036,"title":{},"body":{"index.html":{}}}],["provided",{"_index":245,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"license.html":{}}}],["providers",{"_index":1097,"title":{},"body":{"index.html":{}}}],["providertoken",{"_index":532,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["provides",{"_index":845,"title":{},"body":{"index.html":{}}}],["providing",{"_index":445,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["public",{"_index":305,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"changelog.html":{}}}],["public_api.ts",{"_index":753,"title":{},"body":{"changelog.html":{}}}],["publish",{"_index":1183,"title":{},"body":{"license.html":{}}}],["pull",{"_index":1154,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":1206,"title":{},"body":{"license.html":{}}}],["queried",{"_index":695,"title":{},"body":{"changelog.html":{}}}],["queries",{"_index":862,"title":{},"body":{"index.html":{}}}],["query",{"_index":108,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"changelog.html":{},"index.html":{}}}],["querying",{"_index":1026,"title":{},"body":{"index.html":{}}}],["queryparammap",{"_index":75,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{}}}],["queryparams",{"_index":74,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{}}}],["queryparamssubject",{"_index":237,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["questions",{"_index":881,"title":{},"body":{"index.html":{}}}],["quick",{"_index":857,"title":{},"body":{"index.html":{}}}],["quite",{"_index":1109,"title":{},"body":{"index.html":{}}}],["r",{"_index":486,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["radios",{"_index":1078,"title":{},"body":{"index.html":{}}}],["read",{"_index":921,"title":{},"body":{"index.html":{}}}],["readable",{"_index":924,"title":{},"body":{"index.html":{}}}],["readme",{"_index":725,"title":{},"body":{"changelog.html":{}}}],["readonly",{"_index":235,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"changelog.html":{}}}],["real",{"_index":214,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["really",{"_index":212,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["receiver",{"_index":397,"title":{},"body":{"interfaces/Matchers.html":{},"miscellaneous/variables.html":{}}}],["recommend",{"_index":975,"title":{},"body":{"index.html":{}}}],["recommended",{"_index":914,"title":{},"body":{"index.html":{}}}],["reduced",{"_index":1120,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":730,"title":{},"body":{"changelog.html":{}}}],["release",{"_index":809,"title":{},"body":{"changelog.html":{}}}],["relevant",{"_index":208,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["remove",{"_index":729,"title":{},"body":{"changelog.html":{}}}],["renovate",{"_index":657,"title":{},"body":{"changelog.html":{}}}],["repeating",{"_index":978,"title":{},"body":{"index.html":{}}}],["repetition",{"_index":944,"title":{},"body":{"index.html":{}}}],["repetitions",{"_index":916,"title":{},"body":{"index.html":{}}}],["repository",{"_index":1231,"title":{},"body":{"properties.html":{}}}],["requests",{"_index":1155,"title":{},"body":{"index.html":{}}}],["resolved",{"_index":113,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["responsibility",{"_index":219,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["restriction",{"_index":1177,"title":{},"body":{"license.html":{}}}],["result",{"_index":130,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"index.html":{}}}],["results",{"_index":350,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"interfaces/Matchers.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":158,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":516,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["returning",{"_index":957,"title":{},"body":{"index.html":{}}}],["returns",{"_index":29,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"interfaces/Matchers.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["reusable",{"_index":1040,"title":{},"body":{"index.html":{}}}],["reviewers",{"_index":1024,"title":{},"body":{"index.html":{}}}],["right",{"_index":1016,"title":{},"body":{"index.html":{}}}],["rights",{"_index":1180,"title":{},"body":{"license.html":{}}}],["root",{"_index":11,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"index.html":{}}}],["root(value",{"_index":179,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["route",{"_index":48,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["route's",{"_index":68,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{}}}],["route.parent",{"_index":148,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["route.parent.snapshot",{"_index":87,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{}}}],["route.setparam('category",{"_index":1102,"title":{},"body":{"index.html":{}}}],["route.setqueryparams",{"_index":1104,"title":{},"body":{"index.html":{}}}],["route.snapshot",{"_index":149,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["route.snapshot.parent",{"_index":88,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{}}}],["routeconfig",{"_index":15,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"changelog.html":{}}}],["routeconfig(route",{"_index":192,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["router",{"_index":123,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["routes",{"_index":110,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["routing",{"_index":869,"title":{},"body":{"index.html":{}}}],["routingcomponent",{"_index":1096,"title":{},"body":{"index.html":{}}}],["routingcomponenttester",{"_index":1092,"title":{},"body":{"index.html":{}}}],["rule",{"_index":747,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":775,"title":{},"body":{"changelog.html":{}}}],["rxjs",{"_index":60,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"changelog.html":{},"dependencies.html":{}}}],["same",{"_index":71,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"classes/TestHtmlElement.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["save",{"_index":948,"title":{},"body":{"index.html":{}}}],["scoped",{"_index":107,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["second",{"_index":1006,"title":{},"body":{"index.html":{}}}],["see",{"_index":601,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["select",{"_index":459,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["select(selector",{"_index":527,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["selected",{"_index":420,"title":{},"body":{"interfaces/Matchers.html":{},"miscellaneous/variables.html":{}}}],["selecting",{"_index":615,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["selector",{"_index":479,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["selectors",{"_index":863,"title":{},"body":{"index.html":{}}}],["selects",{"_index":997,"title":{},"body":{"index.html":{}}}],["sell",{"_index":1187,"title":{},"body":{"license.html":{}}}],["service",{"_index":836,"title":{},"body":{"miscellaneous/functions.html":{}}}],["services",{"_index":1115,"title":{},"body":{"index.html":{}}}],["set",{"_index":81,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{}}}],["setchildren(value",{"_index":38,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{}}}],["setdata",{"_index":354,"title":{},"body":{"classes/ActivatedRouteStub.html":{}}}],["setdata(data",{"_index":318,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["setdataitem",{"_index":355,"title":{},"body":{"classes/ActivatedRouteStub.html":{}}}],["setdataitem(name",{"_index":320,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["setdate(year",{"_index":1044,"title":{},"body":{"index.html":{}}}],["setfirstchild(value",{"_index":33,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{}}}],["setfragment",{"_index":356,"title":{},"body":{"classes/ActivatedRouteStub.html":{}}}],["setfragment(fragment",{"_index":324,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["setparam",{"_index":357,"title":{},"body":{"classes/ActivatedRouteStub.html":{}}}],["setparam(name",{"_index":311,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["setparams",{"_index":358,"title":{},"body":{"classes/ActivatedRouteStub.html":{}}}],["setparams(params",{"_index":306,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["setpathfromroot(value",{"_index":43,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{}}}],["setqueryparam",{"_index":359,"title":{},"body":{"classes/ActivatedRouteStub.html":{}}}],["setqueryparam(name",{"_index":315,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["setqueryparams",{"_index":360,"title":{},"body":{"classes/ActivatedRouteStub.html":{}}}],["setqueryparams(queryparams",{"_index":314,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["setroot(value",{"_index":21,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{}}}],["setrouteconfig(route",{"_index":47,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{}}}],["sets",{"_index":573,"title":{},"body":{"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["setting",{"_index":220,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["seturl",{"_index":361,"title":{},"body":{"classes/ActivatedRouteStub.html":{}}}],["seturl(url",{"_index":325,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["several",{"_index":1031,"title":{},"body":{"index.html":{}}}],["shall",{"_index":1194,"title":{},"body":{"license.html":{}}}],["shared",{"_index":109,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["shortcut",{"_index":303,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["shown",{"_index":953,"title":{},"body":{"index.html":{}}}],["signature",{"_index":714,"title":{},"body":{"changelog.html":{}}}],["similar",{"_index":500,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["simple",{"_index":1069,"title":{},"body":{"index.html":{}}}],["simpler",{"_index":840,"title":{},"body":{"index.html":{}}}],["simply",{"_index":848,"title":{},"body":{"index.html":{}}}],["simulating",{"_index":203,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"index.html":{}}}],["skip",{"_index":668,"title":{},"body":{"changelog.html":{}}}],["smiled",{"_index":1129,"title":{},"body":{"index.html":{}}}],["snapshot",{"_index":77,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["snapshot's",{"_index":80,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{}}}],["snapshot.children",{"_index":271,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["snapshot.data",{"_index":261,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["snapshot.firstchild",{"_index":269,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["snapshot.fragment",{"_index":263,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["snapshot.params",{"_index":257,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["snapshot.parent",{"_index":273,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["snapshot.pathfromroot",{"_index":277,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["snapshot.queryparams",{"_index":259,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["snapshot.root",{"_index":275,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["snapshot.routeconfig",{"_index":267,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["snapshot.url",{"_index":265,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["software",{"_index":1174,"title":{},"body":{"license.html":{}}}],["something",{"_index":1020,"title":{},"body":{"index.html":{}}}],["sometimes",{"_index":1138,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"interfaces/Matchers.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["specialized",{"_index":990,"title":{},"body":{"index.html":{}}}],["specific",{"_index":1013,"title":{},"body":{"index.html":{}}}],["speculoos",{"_index":633,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["speculoos.git",{"_index":1232,"title":{},"body":{"properties.html":{}}}],["speculoos/issues",{"_index":1230,"title":{},"body":{"properties.html":{}}}],["speculoosmatchers",{"_index":1235,"title":{},"body":{"miscellaneous/variables.html":{}}}],["spies",{"_index":828,"title":{},"body":{"miscellaneous/functions.html":{}}}],["spy",{"_index":825,"title":{},"body":{"miscellaneous/functions.html":{}}}],["spyobj",{"_index":618,"title":{},"body":{"changelog.html":{}}}],["squad",{"_index":1165,"title":{},"body":{"license.html":{},"properties.html":{}}}],["squad/ngx",{"_index":1229,"title":{},"body":{"properties.html":{}}}],["src/.../matchers.ts",{"_index":1236,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../mock.ts",{"_index":819,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../route.ts",{"_index":820,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/jasmine",{"_index":383,"title":{},"body":{"interfaces/Matchers.html":{}}}],["src/lib/matchers.ts",{"_index":1237,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/mock.ts",{"_index":821,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/lib/route.ts",{"_index":6,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{}}}],["src/lib/route.ts:204",{"_index":20,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{}}}],["src/lib/route.ts:208",{"_index":22,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{}}}],["src/lib/route.ts:212",{"_index":32,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{}}}],["src/lib/route.ts:216",{"_index":35,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{}}}],["src/lib/route.ts:220",{"_index":37,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{}}}],["src/lib/route.ts:224",{"_index":40,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{}}}],["src/lib/route.ts:228",{"_index":42,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{}}}],["src/lib/route.ts:232",{"_index":44,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{}}}],["src/lib/route.ts:238",{"_index":46,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{}}}],["src/lib/route.ts:242",{"_index":49,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{}}}],["src/lib/route.ts:244",{"_index":18,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{}}}],["src/lib/route.ts:278",{"_index":362,"title":{},"body":{"classes/ActivatedRouteStub.html":{}}}],["src/lib/route.ts:325",{"_index":375,"title":{},"body":{"classes/ActivatedRouteStub.html":{}}}],["src/lib/route.ts:333",{"_index":376,"title":{},"body":{"classes/ActivatedRouteStub.html":{}}}],["src/lib/route.ts:337",{"_index":377,"title":{},"body":{"classes/ActivatedRouteStub.html":{}}}],["src/lib/route.ts:341",{"_index":378,"title":{},"body":{"classes/ActivatedRouteStub.html":{}}}],["src/lib/route.ts:345",{"_index":379,"title":{},"body":{"classes/ActivatedRouteStub.html":{}}}],["src/lib/route.ts:353",{"_index":368,"title":{},"body":{"classes/ActivatedRouteStub.html":{}}}],["src/lib/route.ts:362",{"_index":367,"title":{},"body":{"classes/ActivatedRouteStub.html":{}}}],["src/lib/route.ts:370",{"_index":370,"title":{},"body":{"classes/ActivatedRouteStub.html":{}}}],["src/lib/route.ts:379",{"_index":369,"title":{},"body":{"classes/ActivatedRouteStub.html":{}}}],["src/lib/route.ts:388",{"_index":364,"title":{},"body":{"classes/ActivatedRouteStub.html":{}}}],["src/lib/route.ts:397",{"_index":365,"title":{},"body":{"classes/ActivatedRouteStub.html":{}}}],["src/lib/route.ts:405",{"_index":366,"title":{},"body":{"classes/ActivatedRouteStub.html":{}}}],["src/lib/route.ts:413",{"_index":371,"title":{},"body":{"classes/ActivatedRouteStub.html":{}}}],["src/lib/route.ts:427",{"_index":374,"title":{},"body":{"classes/ActivatedRouteStub.html":{}}}],["src/lib/route.ts:469",{"_index":372,"title":{},"body":{"classes/ActivatedRouteStub.html":{}}}],["src/lib/test",{"_index":441,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["standard",{"_index":602,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["start",{"_index":851,"title":{},"body":{"index.html":{}}}],["started",{"_index":595,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["state",{"_index":124,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"index.html":{}}}],["static",{"_index":112,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["stay",{"_index":302,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["stick",{"_index":641,"title":{},"body":{"changelog.html":{}}}],["still",{"_index":1135,"title":{},"body":{"index.html":{}}}],["strict",{"_index":688,"title":{},"body":{"changelog.html":{}}}],["string",{"_index":117,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"interfaces/Matchers.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["stub",{"_index":101,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["stubroute",{"_index":97,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["stubroute(options",{"_index":348,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{}}}],["style",{"_index":557,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["sub",{"_index":864,"title":{},"body":{"index.html":{}}}],["subclass",{"_index":501,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["subclasses",{"_index":991,"title":{},"body":{"index.html":{}}}],["subject",{"_index":1148,"title":{},"body":{"index.html":{},"license.html":{}}}],["sublicense",{"_index":1185,"title":{},"body":{"license.html":{}}}],["submitting",{"_index":1153,"title":{},"body":{"index.html":{}}}],["subqueries",{"_index":866,"title":{},"body":{"index.html":{}}}],["substantial",{"_index":1196,"title":{},"body":{"license.html":{}}}],["such",{"_index":535,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":193,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["super(hostcomponent",{"_index":1131,"title":{},"body":{"index.html":{}}}],["super(mycomponent",{"_index":932,"title":{},"body":{"index.html":{}}}],["super(tester",{"_index":542,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["superclasses",{"_index":827,"title":{},"body":{"miscellaneous/functions.html":{}}}],["support",{"_index":710,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["supports",{"_index":988,"title":{},"body":{"index.html":{}}}],["sync",{"_index":201,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["table",{"_index":856,"title":{},"body":{"index.html":{}}}],["takes",{"_index":1032,"title":{},"body":{"index.html":{}}}],["target",{"_index":1108,"title":{},"body":{"index.html":{}}}],["targets",{"_index":660,"title":{},"body":{"changelog.html":{}}}],["template",{"_index":1123,"title":{},"body":{"index.html":{}}}],["test",{"_index":85,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["test.ts",{"_index":970,"title":{},"body":{"index.html":{}}}],["testbed.configuretestingmodule",{"_index":984,"title":{},"body":{"index.html":{}}}],["testbutton",{"_index":440,"title":{"classes/TestButton.html":{}},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["testbuttons",{"_index":700,"title":{},"body":{"changelog.html":{}}}],["testdatepicker",{"_index":1041,"title":{},"body":{"index.html":{}}}],["tested",{"_index":773,"title":{},"body":{"changelog.html":{}}}],["testelement",{"_index":406,"title":{},"body":{"interfaces/Matchers.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["testelement:193",{"_index":522,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["testelement:299",{"_index":526,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["testelement:308",{"_index":528,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["testelement:318",{"_index":530,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["testelement:327",{"_index":477,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["testelement:335",{"_index":485,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["testelement:343",{"_index":488,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["testelement:352",{"_index":533,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["testelement:361",{"_index":537,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["testelement:372",{"_index":492,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["testelement:384",{"_index":504,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["testelement:42",{"_index":511,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["testelement:50",{"_index":508,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["testelement:66",{"_index":473,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["testelement:81",{"_index":514,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["testelements",{"_index":505,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"changelog.html":{}}}],["tester",{"_index":232,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["tester's",{"_index":218,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["tester.birthdate.setdate(2200",{"_index":1053,"title":{},"body":{"index.html":{}}}],["tester.country.selectindex(0",{"_index":943,"title":{},"body":{"index.html":{}}}],["tester.country.selectlabel('france",{"_index":937,"title":{},"body":{"index.html":{}}}],["tester.detectchanges",{"_index":987,"title":{},"body":{"index.html":{}}}],["tester.element('.selector",{"_index":699,"title":{},"body":{"changelog.html":{}}}],["tester.element('div",{"_index":519,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"changelog.html":{}}}],["tester.elements('.btn",{"_index":701,"title":{},"body":{"changelog.html":{}}}],["tester.elements('.selector",{"_index":703,"title":{},"body":{"changelog.html":{}}}],["tester.elements('div",{"_index":524,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"changelog.html":{}}}],["tester.save.click",{"_index":1055,"title":{},"body":{"index.html":{}}}],["testhtmlelement",{"_index":402,"title":{"classes/TestHtmlElement.html":{}},"body":{"interfaces/Matchers.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["testhtmlelement.click",{"_index":1074,"title":{},"body":{"index.html":{}}}],["testhtmlelement:16",{"_index":469,"title":{},"body":{"classes/TestButton.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["testing",{"_index":872,"title":{},"body":{"index.html":{}}}],["testinput",{"_index":398,"title":{"classes/TestInput.html":{}},"body":{"interfaces/Matchers.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["testinput.check",{"_index":1077,"title":{},"body":{"index.html":{}}}],["testinput.fillwith",{"_index":1075,"title":{},"body":{"index.html":{}}}],["testinput.uncheck",{"_index":1080,"title":{},"body":{"index.html":{}}}],["testlink",{"_index":698,"title":{},"body":{"changelog.html":{}}}],["testlinks",{"_index":702,"title":{},"body":{"changelog.html":{}}}],["tests",{"_index":65,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["testselect",{"_index":419,"title":{},"body":{"interfaces/Matchers.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["testselect.selectindex",{"_index":1082,"title":{},"body":{"index.html":{}}}],["testselect.selectlabel",{"_index":1084,"title":{},"body":{"index.html":{}}}],["testselect.selectvalue",{"_index":1083,"title":{},"body":{"index.html":{}}}],["testtextarea",{"_index":436,"title":{"classes/TestTextArea.html":{}},"body":{"interfaces/Matchers.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["testtextarea.fillwith",{"_index":1081,"title":{},"body":{"index.html":{}}}],["testxxx",{"_index":961,"title":{},"body":{"index.html":{}}}],["text",{"_index":795,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["textarea",{"_index":460,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["textarea(selector",{"_index":529,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["textarea.ts",{"_index":589,"title":{},"body":{"classes/TestTextArea.html":{}}}],["textarea.ts:17",{"_index":591,"title":{},"body":{"classes/TestTextArea.html":{}}}],["textarea.ts:25",{"_index":592,"title":{},"body":{"classes/TestTextArea.html":{}}}],["textarea.ts:32",{"_index":593,"title":{},"body":{"classes/TestTextArea.html":{}}}],["textarea.ts:8",{"_index":590,"title":{},"body":{"classes/TestTextArea.html":{}}}],["textcontent",{"_index":411,"title":{},"body":{"interfaces/Matchers.html":{},"miscellaneous/variables.html":{}}}],["that's",{"_index":1119,"title":{},"body":{"index.html":{}}}],["themselves",{"_index":1058,"title":{},"body":{"index.html":{}}}],["they're",{"_index":234,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["things",{"_index":211,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this._children",{"_index":182,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this._firstchild",{"_index":180,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this._parent",{"_index":176,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this._pathfromroot",{"_index":184,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this._root",{"_index":178,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this._routeconfig",{"_index":191,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.button('button').click",{"_index":1049,"title":{},"body":{"index.html":{}}}],["this.children?.map(route",{"_index":272,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.component(producticoncomponent",{"_index":1022,"title":{},"body":{"index.html":{}}}],["this.component(usercomponent",{"_index":1133,"title":{},"body":{"index.html":{}}}],["this.components(reviewercomponent",{"_index":1025,"title":{},"body":{"index.html":{}}}],["this.custom('#birth",{"_index":1051,"title":{},"body":{"index.html":{}}}],["this.data",{"_index":293,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.datasubject",{"_index":283,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.datasubject.asobservable",{"_index":294,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.datasubject.next(this.snapshot.data",{"_index":344,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.dispatcheventoftype('change",{"_index":587,"title":{},"body":{"classes/TestInput.html":{}}}],["this.dispatcheventoftype('input",{"_index":584,"title":{},"body":{"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["this.element('.card').button('.edit",{"_index":1061,"title":{},"body":{"index.html":{}}}],["this.element('.card').component(reviewercomponent",{"_index":1063,"title":{},"body":{"index.html":{}}}],["this.firstchild?.snapshot",{"_index":270,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.fragment",{"_index":295,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.fragmentsubject",{"_index":285,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.fragmentsubject.asobservable",{"_index":296,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.fragmentsubject.next(this.snapshot.fragment",{"_index":343,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.input('input",{"_index":1043,"title":{},"body":{"index.html":{}}}],["this.inputfield.fillwith(`${year",{"_index":1047,"title":{},"body":{"index.html":{}}}],["this.nativeelement.checked",{"_index":585,"title":{},"body":{"classes/TestInput.html":{}}}],["this.nativeelement.click",{"_index":560,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["this.nativeelement.disabled",{"_index":543,"title":{},"body":{"classes/TestButton.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["this.nativeelement.getclientrects().length",{"_index":564,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["this.nativeelement.offsetheight",{"_index":563,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["this.nativeelement.offsetwidth",{"_index":562,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["this.nativeelement.value",{"_index":583,"title":{},"body":{"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["this.params",{"_index":289,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.paramssubject",{"_index":279,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.paramssubject.asobservable",{"_index":290,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.paramssubject.next(this.snapshot.params",{"_index":341,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.parent",{"_index":255,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.parent.pathfromroot",{"_index":256,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.parent?.root",{"_index":254,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.parent?.snapshot",{"_index":274,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.pathfromroot.map(route",{"_index":278,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.queryparams",{"_index":291,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.queryparamssubject",{"_index":281,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.queryparamssubject.asobservable",{"_index":292,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.queryparamssubject.next(this.snapshot.queryparams",{"_index":342,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.root.snapshot",{"_index":276,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.select('#city",{"_index":936,"title":{},"body":{"index.html":{}}}],["this.select('#country",{"_index":933,"title":{},"body":{"index.html":{}}}],["this.setdata",{"_index":322,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.setparams",{"_index":312,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.setqueryparams",{"_index":316,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.snapshot",{"_index":250,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.snapshot.data",{"_index":323,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.snapshot.fragment",{"_index":337,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.snapshot.params",{"_index":313,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.snapshot.queryparams",{"_index":317,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.snapshot.routeconfig",{"_index":299,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.snapshot.url",{"_index":338,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.tester.detectchanges",{"_index":561,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["this.token('#birth",{"_index":1034,"title":{},"body":{"index.html":{}}}],["this.triggernavigation",{"_index":307,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.url",{"_index":297,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.urlsubject",{"_index":287,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.urlsubject.asobservable",{"_index":298,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["this.urlsubject.next(this.snapshot.url",{"_index":345,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["those",{"_index":992,"title":{},"body":{"index.html":{}}}],["though",{"_index":215,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"changelog.html":{},"index.html":{}}}],["through",{"_index":1071,"title":{},"body":{"index.html":{}}}],["throws",{"_index":480,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["thus",{"_index":231,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"index.html":{}}}],["title",{"_index":1258,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tobechecked",{"_index":385,"title":{},"body":{"interfaces/Matchers.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["tobevisible",{"_index":386,"title":{},"body":{"interfaces/Matchers.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["tocontaintext",{"_index":387,"title":{},"body":{"interfaces/Matchers.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["tocontaintext(textcontent",{"_index":404,"title":{},"body":{"interfaces/Matchers.html":{},"index.html":{}}}],["toggledropdown",{"_index":1048,"title":{},"body":{"index.html":{}}}],["tohaveclass",{"_index":388,"title":{},"body":{"interfaces/Matchers.html":{},"miscellaneous/variables.html":{}}}],["tohaveclass(classname",{"_index":412,"title":{},"body":{"interfaces/Matchers.html":{},"index.html":{}}}],["tohaveselectedindex",{"_index":389,"title":{},"body":{"interfaces/Matchers.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["tohaveselectedindex(index",{"_index":416,"title":{},"body":{"interfaces/Matchers.html":{},"index.html":{}}}],["tohaveselectedlabel",{"_index":390,"title":{},"body":{"interfaces/Matchers.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["tohaveselectedlabel(label",{"_index":421,"title":{},"body":{"interfaces/Matchers.html":{},"index.html":{}}}],["tohaveselectedvalue",{"_index":391,"title":{},"body":{"interfaces/Matchers.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["tohaveselectedvalue(value",{"_index":426,"title":{},"body":{"interfaces/Matchers.html":{},"index.html":{}}}],["tohavetext",{"_index":392,"title":{},"body":{"interfaces/Matchers.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["tohavetext(textcontent",{"_index":428,"title":{},"body":{"interfaces/Matchers.html":{},"index.html":{}}}],["tohavetrimmedtext",{"_index":393,"title":{},"body":{"interfaces/Matchers.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["tohavetrimmedtext(textcontent",{"_index":431,"title":{},"body":{"interfaces/Matchers.html":{},"index.html":{}}}],["tohavevalue",{"_index":394,"title":{},"body":{"interfaces/Matchers.html":{},"miscellaneous/variables.html":{}}}],["tohavevalue(value",{"_index":434,"title":{},"body":{"interfaces/Matchers.html":{},"index.html":{}}}],["token",{"_index":461,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["token(selector",{"_index":531,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["tokens",{"_index":462,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{}}}],["tokens(selector",{"_index":536,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["tort",{"_index":1217,"title":{},"body":{"license.html":{}}}],["tostring",{"_index":346,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["toys",{"_index":1103,"title":{},"body":{"index.html":{}}}],["tree",{"_index":125,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["triggering",{"_index":919,"title":{},"body":{"index.html":{}}}],["triggernavigation",{"_index":304,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["triggernavigation(options",{"_index":336,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["triggers",{"_index":300,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["trimmed",{"_index":433,"title":{},"body":{"interfaces/Matchers.html":{},"miscellaneous/variables.html":{}}}],["trimmedexpected",{"_index":1260,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":586,"title":{},"body":{"classes/TestInput.html":{}}}],["ts",{"_index":188,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["tslib",{"_index":812,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":1068,"title":{},"body":{"index.html":{}}}],["type",{"_index":26,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"interfaces/Matchers.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":1007,"title":{},"body":{"index.html":{}}}],["typesafe",{"_index":1111,"title":{},"body":{"index.html":{}}}],["typescript",{"_index":186,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["typically",{"_index":555,"title":{},"body":{"classes/TestHtmlElement.html":{},"index.html":{}}}],["typings",{"_index":690,"title":{},"body":{"changelog.html":{}}}],["typo",{"_index":784,"title":{},"body":{"changelog.html":{}}}],["u1",{"_index":1127,"title":{},"body":{"index.html":{}}}],["ugrade",{"_index":782,"title":{},"body":{"changelog.html":{}}}],["uncheck",{"_index":568,"title":{},"body":{"classes/TestInput.html":{}}}],["unchecks",{"_index":575,"title":{},"body":{"classes/TestInput.html":{}}}],["unconditionally",{"_index":225,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["undefined",{"_index":326,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["under",{"_index":84,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["understand",{"_index":850,"title":{},"body":{"index.html":{}}}],["unit",{"_index":842,"title":{},"body":{"index.html":{},"properties.html":{}}}],["unknown",{"_index":321,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/variables.html":{}}}],["update",{"_index":713,"title":{},"body":{"changelog.html":{},"miscellaneous/functions.html":{}}}],["update']);since",{"_index":1114,"title":{},"body":{"index.html":{}}}],["updated",{"_index":333,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["upgrade",{"_index":763,"title":{},"body":{"changelog.html":{}}}],["url",{"_index":105,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["urlsegment",{"_index":55,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["urlsubject",{"_index":240,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["usage",{"_index":518,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["use",{"_index":86,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":121,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"index.html":{}}}],["useful",{"_index":495,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["user",{"_index":1125,"title":{},"body":{"index.html":{}}}],["usercomponent",{"_index":1132,"title":{},"body":{"index.html":{}}}],["userservice",{"_index":829,"title":{},"body":{"miscellaneous/functions.html":{}}}],["uses",{"_index":1003,"title":{},"body":{"index.html":{}}}],["usevalue",{"_index":1098,"title":{},"body":{"index.html":{}}}],["using",{"_index":852,"title":{},"body":{"index.html":{}}}],["usual",{"_index":1134,"title":{},"body":{"index.html":{}}}],["usually",{"_index":835,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["utilities",{"_index":846,"title":{},"body":{"index.html":{}}}],["v11",{"_index":679,"title":{},"body":{"changelog.html":{}}}],["v13",{"_index":646,"title":{},"body":{"changelog.html":{}}}],["v7.4",{"_index":638,"title":{},"body":{"changelog.html":{}}}],["valid",{"_index":329,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["value",{"_index":28,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"interfaces/Matchers.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":72,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{}}}],["variables",{"_index":1234,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verbose",{"_index":1110,"title":{},"body":{"index.html":{}}}],["version",{"_index":603,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["versions",{"_index":779,"title":{},"body":{"changelog.html":{}}}],["very",{"_index":808,"title":{},"body":{"changelog.html":{}}}],["view",{"_index":663,"title":{},"body":{"changelog.html":{}}}],["visible",{"_index":403,"title":{},"body":{"interfaces/Matchers.html":{},"classes/TestHtmlElement.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["void",{"_index":30,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["want",{"_index":639,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["warranties",{"_index":1202,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1198,"title":{},"body":{"license.html":{}}}],["was${!isnegative",{"_index":1264,"title":{},"body":{"miscellaneous/variables.html":{}}}],["way",{"_index":195,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"index.html":{}}}],["well",{"_index":309,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["whatever",{"_index":1009,"title":{},"body":{"index.html":{}}}],["whether",{"_index":1214,"title":{},"body":{"license.html":{}}}],["without",{"_index":90,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["work",{"_index":213,"title":{},"body":{"classes/ActivatedRouteSnapshotStub.html":{},"classes/ActivatedRouteStub.html":{},"interfaces/ActivatedRouteStubOptions.html":{}}}],["wrap",{"_index":502,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["wrapped",{"_index":443,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["wrapper",{"_index":965,"title":{},"body":{"index.html":{}}}],["wrappers",{"_index":917,"title":{},"body":{"index.html":{}}}],["wrapping",{"_index":407,"title":{},"body":{"interfaces/Matchers.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["wraps",{"_index":515,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["write",{"_index":839,"title":{},"body":{"index.html":{}}}],["writing",{"_index":449,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"index.html":{},"properties.html":{}}}],["written",{"_index":884,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":950,"title":{},"body":{"index.html":{}}}],["yes",{"_index":363,"title":{},"body":{"classes/ActivatedRouteStub.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["you've",{"_index":883,"title":{},"body":{"index.html":{}}}],["yourself",{"_index":1073,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ActivatedRouteSnapshotStub.html":{"url":"classes/ActivatedRouteSnapshotStub.html","title":"class - ActivatedRouteSnapshotStub","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ActivatedRouteSnapshotStub\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/route.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ActivatedRouteSnapshot\n            \n\n\n\n            \n    Index\n    \n        \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    root\n                                \n                                \n                                    firstChild\n                                \n                                \n                                    children\n                                \n                                \n                                    pathFromRoot\n                                \n                                \n                                    routeConfig\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/lib/route.ts:244\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        root\n                    \n                \n\n                \n                    \n                        getroot()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/route.ts:204\n                                \n                            \n\n                \n                    \n                        setroot(value: ActivatedRouteSnapshot)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/route.ts:208\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            ActivatedRouteSnapshot\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        firstChild\n                    \n                \n\n                \n                    \n                        getfirstChild()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/route.ts:212\n                                \n                            \n\n                \n                    \n                        setfirstChild(value: ActivatedRouteSnapshot | null)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/route.ts:216\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                        ActivatedRouteSnapshot | null\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        children\n                    \n                \n\n                \n                    \n                        getchildren()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/route.ts:220\n                                \n                            \n\n                \n                    \n                        setchildren(value: Array)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/route.ts:224\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                        Array\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        pathFromRoot\n                    \n                \n\n                \n                    \n                        getpathFromRoot()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/route.ts:228\n                                \n                            \n\n                \n                    \n                        setpathFromRoot(value: Array)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/route.ts:232\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                        Array\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        routeConfig\n                    \n                \n\n                \n                    \n                        getrouteConfig()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/route.ts:238\n                                \n                            \n\n                \n                    \n                        setrouteConfig(route: Route | null)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/route.ts:242\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            route\n                                                    \n                                                            \n                                                                        Route | null\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { ActivatedRoute, ActivatedRouteSnapshot, convertToParamMap, Data, Params, Route, UrlSegment } from '@angular/router';\nimport { BehaviorSubject, map, Observable } from 'rxjs';\nimport { Type } from '@angular/core';\n\n/**\n * Creates a fake partial ActivatedRoute for tests.\n *\n * If you pass params, then the created route's paramMap will contain the same values.\n * The same goes for queryParams and queryParamMap.\n *\n * If you pass a parent route and a snapshot, and the passed snapshot doesn't have a parent, then the snapshot's\n * parent will be set to the parent route snapshot. This allows the code under test to use\n * `route.parent.snapshot` or `route.snapshot.parent`.\n *\n * If you pass a snapshot with a parent, but don't pass a parent or pass a parent without snapshot, then the route's\n * parent snapshot will be set to the given snapshot's parent. This allows the code under test to use\n * `route.parent.snapshot` or `route.snapshot.parent`.\n *\n * @returns a partially populated, fake ActivatedRoute, depending on what you passed in\n * @deprecated favor stubRoute, which creates an easier to use and more logical stub\n */\nexport function fakeRoute(options: {\n  url?: Observable;\n  /** An observable of the matrix parameters scoped to this route */\n  params?: Observable;\n  /** An observable of the query parameters shared by all the routes */\n  queryParams?: Observable;\n  /** An observable of the URL fragment shared by all the routes */\n  fragment?: Observable;\n  /** An observable of the static and resolved data of this route. */\n  data?: Observable;\n  /** The outlet name of the route. It's a constant */\n  outlet?: string;\n  /** The component of the route. It's a constant */\n  component?: Type | string | null;\n  /** The current snapshot of this route */\n  snapshot?: ActivatedRouteSnapshot;\n  /** The configuration used to match this route */\n  routeConfig?: Route | null;\n  /** The root of the router state */\n  root?: ActivatedRoute;\n  /** The parent of this route in the router state tree */\n  parent?: ActivatedRoute | null;\n  /** The first child of this route in the router state tree */\n  firstChild?: ActivatedRoute;\n  /** The children of this route in the router state tree */\n  children?: ActivatedRoute[];\n  /** The path from the root of the router state tree to this route */\n  pathFromRoot?: ActivatedRoute[];\n}): ActivatedRoute {\n  const result = {\n    url: options.url,\n    params: options.params,\n    paramMap: options.params && options.params.pipe(map(params => convertToParamMap(params))),\n    queryParams: options.queryParams,\n    queryParamMap: options.queryParams && options.queryParams.pipe(map(params => convertToParamMap(params))),\n    fragment: options.fragment,\n    data: options.data,\n    outlet: options.outlet,\n    component: options.component,\n    snapshot: options.snapshot,\n    routeConfig: options.routeConfig,\n    root: options.root,\n    parent: options.parent,\n    firstChild: options.firstChild,\n    children: options.children,\n    pathFromRoot: options.pathFromRoot\n  } as ActivatedRoute;\n\n  for (let route: null | ActivatedRoute = result; route; route = route.parent) {\n    if (route.parent && route.parent.snapshot && !route.snapshot) {\n      // eslint-disable-next-line deprecation/deprecation\n      route.snapshot = fakeSnapshot({});\n    }\n    if (route.parent && route.parent.snapshot && !route.snapshot.parent) {\n      (route.snapshot as Omit & { parent: ActivatedRouteSnapshot }).parent = route.parent.snapshot;\n    }\n\n    if (route.snapshot && route.snapshot.parent && !route.parent) {\n      // eslint-disable-next-line deprecation/deprecation\n      (route as Omit & { parent: ActivatedRoute }).parent = fakeRoute({});\n    }\n    if (route.snapshot && route.snapshot.parent && route.parent && !route.parent.snapshot) {\n      route.parent.snapshot = route.snapshot.parent;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Creates a fake partial ActivatedRouteSnapshot for tests.\n *\n * If you pass params, then the created snapshot's paramMap will contain the same values.\n * The same goes for queryParams and queryParamMap.\n *\n * @returns a partially populated, fake ActivatedRoute, depending on what you passed in\n * @deprecated favor stubRoute, which creates an easier to use and more logical stub for both the route and its snapshot\n */\nexport function fakeSnapshot(options: {\n  url?: UrlSegment[];\n  /** The matrix parameters scoped to this route */\n  params?: Params;\n  /** The query parameters shared by all the routes */\n  queryParams?: Params;\n  /** The URL fragment shared by all the routes */\n  fragment?: string;\n  /** The static and resolved data of this route */\n  data?: Data;\n  /** The outlet name of the route */\n  outlet?: string;\n  /** The component of the route */\n  component?: Type | string | null;\n  /** The configuration used to match this route */\n  routeConfig?: Route;\n  /** The root of the router state */\n  root?: ActivatedRouteSnapshot;\n  /** The parent of this route in the router state tree */\n  parent?: ActivatedRouteSnapshot | null;\n  /** The first child of this route in the router state tree */\n  firstChild?: ActivatedRouteSnapshot | null;\n  /** The children of this route in the router state tree */\n  children?: ActivatedRouteSnapshot[];\n  /** The path from the root of the router state tree to this route */\n  pathFromRoot?: ActivatedRouteSnapshot[];\n}): ActivatedRouteSnapshot {\n  return {\n    url: options.url,\n    params: options.params,\n    paramMap: options.params && convertToParamMap(options.params),\n    queryParams: options.queryParams,\n    queryParamMap: options.queryParams && convertToParamMap(options.queryParams),\n    fragment: options.fragment,\n    data: options.data,\n    outlet: options.outlet,\n    component: options.component,\n    routeConfig: options.routeConfig,\n    root: options.root,\n    parent: options.parent,\n    firstChild: options.firstChild,\n    children: options.children,\n    pathFromRoot: options.pathFromRoot\n  } as ActivatedRouteSnapshot;\n}\n\n/**\n * The options that are passed when creating an ActivatedRouteStub.\n */\nexport interface ActivatedRouteStubOptions {\n  /**\n   * The initial values of the parameters of the route\n   */\n  params?: Params;\n  /**\n   * The initial values of the query parameters of the route\n   */\n  queryParams?: Params;\n  /**\n   * The initial values of the data of the route\n   */\n  data?: Data;\n  /**\n   * The initial fragment of the route\n   */\n  fragment?: string | null;\n  /**\n   * The initial url of the route\n   */\n  url?: UrlSegment[];\n  /**\n   * The parent of the route\n   */\n  parent?: ActivatedRouteStub | null;\n  /**\n   * The first child of the route\n   */\n  firstChild?: ActivatedRouteStub | null;\n  /**\n   * The children of the route\n   */\n  children?: ActivatedRouteStub[] | null;\n  /**\n   * The configuration of the route\n   */\n  routeConfig?: Route | null;\n}\n\nclass ActivatedRouteSnapshotStub extends ActivatedRouteSnapshot {\n  private _parent: ActivatedRouteSnapshot | null = null;\n  private _root: ActivatedRouteSnapshot;\n  private _firstChild: ActivatedRouteSnapshot | null = null;\n  private _children: Array = [];\n  private _pathFromRoot: Array = [];\n  private _routeConfig: Route | null = null;\n\n  get parent(): ActivatedRouteSnapshot | null {\n    return this._parent;\n  }\n\n  set parent(value: ActivatedRouteSnapshot | null) {\n    this._parent = value;\n  }\n\n  get root(): ActivatedRouteSnapshot {\n    return this._root;\n  }\n\n  set root(value: ActivatedRouteSnapshot) {\n    this._root = value;\n  }\n\n  get firstChild(): ActivatedRouteSnapshot | null {\n    return this._firstChild;\n  }\n\n  set firstChild(value: ActivatedRouteSnapshot | null) {\n    this._firstChild = value;\n  }\n\n  get children(): Array {\n    return this._children;\n  }\n\n  set children(value: Array) {\n    this._children = value;\n  }\n\n  get pathFromRoot(): Array {\n    return this._pathFromRoot;\n  }\n\n  set pathFromRoot(value: Array) {\n    this._pathFromRoot = value;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  get routeConfig(): Route | null {\n    return this._routeConfig;\n  }\n\n  set routeConfig(route: Route | null) {\n    this._routeConfig = route;\n  }\n\n  constructor() {\n    super();\n    this._root = this;\n  }\n}\n\n/**\n * A stub for ActivatedRoute. It behaves almost the same way as the actual ActivatedRoute, exposing a snapshot\n * and observables for the params, query params etc., which are kept in sync.\n *\n * In addition, this stub allows simulating a navigation by changing the params, the query params, the fragment, etc.\n * When that happens, the snapshot is modified, then the relevant observables emit the new values.\n *\n * There are some things that don't really work the same way as the real ActivatedRoute though:\n * - the handling of the firstChild and of the children is entirely under the tester's responsibility. Setting the parent\n *   of a route stub does not add this route to the children of its parent, for example.\n * - when changing the params, query params, fragment, etc., their associated observable emits unconditionally, instead of\n *   first checking if the value is actually different from before. It's thus the responsibility of the tester to not\n *   change the values if they're the same as before.\n */\nexport class ActivatedRouteStub extends ActivatedRoute {\n  private _firstChild: ActivatedRouteStub | null;\n  private _children: Array;\n\n  private readonly paramsSubject: BehaviorSubject;\n  private readonly queryParamsSubject: BehaviorSubject;\n  private readonly dataSubject: BehaviorSubject;\n  private readonly fragmentSubject: BehaviorSubject;\n  private readonly urlSubject: BehaviorSubject>;\n\n  private _parent: ActivatedRouteStub | null;\n  private _root: ActivatedRouteStub;\n  private _pathFromRoot: Array;\n\n  /**\n   * Constructs a new instance, based on the given options.\n   * If an option is not provided (or if no option is provided at all), then the route has a default value for this option\n   * (empty parameters for example, null fragment, etc.)\n   * If no parent is passed, then this route has no parent and is thus set as the root. Otherwise, the root and the path\n   * from root are created based on the root and path from root of the given parent route.\n   */\n  constructor(options?: ActivatedRouteStubOptions) {\n    super();\n\n    const snapshot = new ActivatedRouteSnapshotStub();\n    this.snapshot = snapshot;\n\n    this._firstChild = options?.firstChild ?? null;\n    this._children = options?.children ?? [];\n    this._parent = options?.parent ?? null;\n    this._root = this.parent?.root ?? this;\n    this._pathFromRoot = this.parent ? [...this.parent.pathFromRoot, this] : [this];\n\n    snapshot.params = options?.params ?? {};\n    snapshot.queryParams = options?.queryParams ?? {};\n    snapshot.data = options?.data ?? {};\n    snapshot.fragment = options?.fragment ?? null;\n    snapshot.url = options?.url ?? [];\n    snapshot.routeConfig = options?.routeConfig ?? null;\n\n    snapshot.firstChild = this.firstChild?.snapshot ?? null;\n    snapshot.children = this.children?.map(route => route.snapshot) ?? [];\n    snapshot.parent = this.parent?.snapshot ?? null;\n    snapshot.root = this.root.snapshot;\n    snapshot.pathFromRoot = this.pathFromRoot.map(route => route.snapshot);\n\n    this.paramsSubject = new BehaviorSubject(this.snapshot.params);\n    this.queryParamsSubject = new BehaviorSubject(this.snapshot.queryParams);\n    this.dataSubject = new BehaviorSubject(this.snapshot.data);\n    this.fragmentSubject = new BehaviorSubject(this.snapshot.fragment);\n    this.urlSubject = new BehaviorSubject>(this.snapshot.url);\n\n    this.params = this.paramsSubject.asObservable();\n    this.queryParams = this.queryParamsSubject.asObservable();\n    this.data = this.dataSubject.asObservable();\n    this.fragment = this.fragmentSubject.asObservable();\n    this.url = this.urlSubject.asObservable();\n  }\n\n  get root() {\n    return this._root;\n  }\n\n  get parent(): ActivatedRouteStub | null {\n    return this._parent;\n  }\n\n  get pathFromRoot(): Array {\n    return this._pathFromRoot;\n  }\n\n  get firstChild(): ActivatedRouteStub | null {\n    return this._firstChild;\n  }\n\n  get children(): Array {\n    return this._children;\n  }\n\n  get routeConfig(): Route | null {\n    return this.snapshot.routeConfig;\n  }\n\n  /**\n   * Triggers a navigation with the given new parameters. All the other parts (query params etc.) stay as the are.\n   * This is a shortcut to `triggerNavigation` that can be used to only change the parameters.\n   */\n  public setParams(params: Params): void {\n    this.triggerNavigation({ params });\n  }\n\n  /**\n   * Triggers a navigation with the given new parameter. The other parameters, as well as all the other parts (query params etc.)\n   * stay as the are.\n   * This is a shortcut to `triggerNavigation` that can be used to only change one parameter.\n   */\n  public setParam(name: string, value: string): void {\n    this.setParams({ ...this.snapshot.params, [name]: value });\n  }\n\n  /**\n   * Triggers a navigation with the given new query parameters. All the other parts (params etc.) stay as the are.\n   * This is a shortcut to `triggerNavigation` that can be used to only change the query parameters.\n   */\n  public setQueryParams(queryParams: Params): void {\n    this.triggerNavigation({ queryParams });\n  }\n\n  /**\n   * Triggers a navigation with the given new parameter. The other query parameters, as well as all the other parts (params etc.)\n   * stay as the are.\n   * This is a shortcut to `triggerNavigation` that can be used to only change one query parameter.\n   */\n  public setQueryParam(name: string, value: string): void {\n    this.setQueryParams({ ...this.snapshot.queryParams, [name]: value });\n  }\n\n  /**\n   * Triggers a navigation with the given new data. The other parameters, as well as all the other parts (params etc.)\n   * stay as the are.\n   * This is a shortcut to `triggerNavigation` that can be used to only change the data.\n   */\n  public setData(data: Data): void {\n    this.triggerNavigation({ data });\n  }\n\n  /**\n   * Triggers a navigation with the given new data item. The other data, as well as all the other parts (params etc.)\n   * stay as the are.\n   * This is a shortcut to `triggerNavigation` that can be used to only change one data item.\n   */\n  public setDataItem(name: string, value: unknown): void {\n    this.setData({ ...this.snapshot.data, [name]: value });\n  }\n\n  /**\n   * Triggers a navigation with the given new fragment. The other parts (params etc.)  stay as the are.\n   * This is a shortcut to `triggerNavigation` that can be used to only change the fragment.\n   */\n  public setFragment(fragment: string | null): void {\n    this.triggerNavigation({ fragment });\n  }\n\n  /**\n   * Triggers a navigation with the given new url. The other parts (params etc.)  stay as the are.\n   * This is a shortcut to `triggerNavigation` that can be used to only change the url.\n   */\n  public setUrl(url: Array): void {\n    this.triggerNavigation({ url });\n  }\n\n  /**\n   * Triggers a navigation based on the given options. If an option is undefined or null, it's ignored. Except for fragment, which is only\n   * ignored if it's undefined, because null is a valid value for a fragment.\n   *\n   * The non-ignored values are used to change the snapshot of the route. Once the snapshot has been modified,\n   * the observables corresponding to the updated parts emit the new value.\n   *\n   * So, setting params and query params will make the params and queryParams observables emit, but not the fragment, data and\n   * url observables for example. This is consistent to how the router behaves.\n   */\n  public triggerNavigation(options: {\n    params?: Params;\n    queryParams?: Params;\n    fragment?: string | null;\n    data?: Data | null;\n    url?: Array | null;\n  }): void {\n    // set the snapshot first\n    if (options.params) {\n      this.snapshot.params = options.params;\n    }\n    if (options.queryParams) {\n      this.snapshot.queryParams = options.queryParams;\n    }\n    if (options.fragment !== undefined) {\n      this.snapshot.fragment = options.fragment;\n    }\n    if (options.data) {\n      this.snapshot.data = options.data;\n    }\n    if (options.url) {\n      this.snapshot.url = options.url;\n    }\n\n    // then emit everything that has changed\n    if (options.params) {\n      this.paramsSubject.next(this.snapshot.params);\n    }\n    if (options.queryParams) {\n      this.queryParamsSubject.next(this.snapshot.queryParams);\n    }\n    if (options.fragment !== undefined) {\n      this.fragmentSubject.next(this.snapshot.fragment);\n    }\n    if (options.data) {\n      this.dataSubject.next(this.snapshot.data);\n    }\n    if (options.url) {\n      this.urlSubject.next(this.snapshot.url);\n    }\n  }\n\n  public toString(): string {\n    return 'ActivatedRouteStub';\n  }\n}\n\n/**\n * Creates a new ActivatedRouteStub, by calling its constructor.\n */\nexport function stubRoute(options?: ActivatedRouteStubOptions): ActivatedRouteStub {\n  return new ActivatedRouteStub(options);\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ActivatedRouteStub.html":{"url":"classes/ActivatedRouteStub.html","title":"class - ActivatedRouteStub","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ActivatedRouteStub\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/route.ts\n        \n\n\n            \n                Description\n            \n            \n                A stub for ActivatedRoute. It behaves almost the same way as the actual ActivatedRoute, exposing a snapshot\nand observables for the params, query params etc., which are kept in sync.\nIn addition, this stub allows simulating a navigation by changing the params, the query params, the fragment, etc.\nWhen that happens, the snapshot is modified, then the relevant observables emit the new values.\nThere are some things that don't really work the same way as the real ActivatedRoute though:\n\nthe handling of the firstChild and of the children is entirely under the tester's responsibility. Setting the parent\nof a route stub does not add this route to the children of its parent, for example.\nwhen changing the params, query params, fragment, etc., their associated observable emits unconditionally, instead of\nfirst checking if the value is actually different from before. It's thus the responsibility of the tester to not\nchange the values if they're the same as before.\n\n\n            \n\n            \n                Extends\n            \n            \n                        ActivatedRoute\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                setData\n                            \n                            \n                                    Public\n                                setDataItem\n                            \n                            \n                                    Public\n                                setFragment\n                            \n                            \n                                    Public\n                                setParam\n                            \n                            \n                                    Public\n                                setParams\n                            \n                            \n                                    Public\n                                setQueryParam\n                            \n                            \n                                    Public\n                                setQueryParams\n                            \n                            \n                                    Public\n                                setUrl\n                            \n                            \n                                    Public\n                                toString\n                            \n                            \n                                    Public\n                                triggerNavigation\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    root\n                                \n                                \n                                    pathFromRoot\n                                \n                                \n                                    firstChild\n                                \n                                \n                                    children\n                                \n                                \n                                    routeConfig\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options?: ActivatedRouteStubOptions)\n                    \n                \n                        \n                            \n                                Defined in src/lib/route.ts:278\n                            \n                        \n\n                \n                    \n                            Constructs a new instance, based on the given options.\nIf an option is not provided (or if no option is provided at all), then the route has a default value for this option\n(empty parameters for example, null fragment, etc.)\nIf no parent is passed, then this route has no parent and is thus set as the root. Otherwise, the root and the path\nfrom root are created based on the root and path from root of the given parent route.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        ActivatedRouteStubOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setData\n                        \n                    \n                \n            \n            \n                \n                    \n                    setData(data: Data)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/route.ts:388\n                \n            \n\n\n            \n                \n                    Triggers a navigation with the given new data. The other parameters, as well as all the other parts (params etc.)\nstay as the are.\nThis is a shortcut to triggerNavigation that can be used to only change the data.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                Data\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setDataItem\n                        \n                    \n                \n            \n            \n                \n                    \n                    setDataItem(name: string, value)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/route.ts:397\n                \n            \n\n\n            \n                \n                    Triggers a navigation with the given new data item. The other data, as well as all the other parts (params etc.)\nstay as the are.\nThis is a shortcut to triggerNavigation that can be used to only change one data item.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setFragment\n                        \n                    \n                \n            \n            \n                \n                    \n                    setFragment(fragment: string | null)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/route.ts:405\n                \n            \n\n\n            \n                \n                    Triggers a navigation with the given new fragment. The other parts (params etc.)  stay as the are.\nThis is a shortcut to triggerNavigation that can be used to only change the fragment.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fragment\n                                    \n                                            string | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setParam\n                        \n                    \n                \n            \n            \n                \n                    \n                    setParam(name: string, value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/route.ts:362\n                \n            \n\n\n            \n                \n                    Triggers a navigation with the given new parameter. The other parameters, as well as all the other parts (query params etc.)\nstay as the are.\nThis is a shortcut to triggerNavigation that can be used to only change one parameter.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setParams\n                        \n                    \n                \n            \n            \n                \n                    \n                    setParams(params: Params)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/route.ts:353\n                \n            \n\n\n            \n                \n                    Triggers a navigation with the given new parameters. All the other parts (query params etc.) stay as the are.\nThis is a shortcut to triggerNavigation that can be used to only change the parameters.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                Params\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setQueryParam\n                        \n                    \n                \n            \n            \n                \n                    \n                    setQueryParam(name: string, value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/route.ts:379\n                \n            \n\n\n            \n                \n                    Triggers a navigation with the given new parameter. The other query parameters, as well as all the other parts (params etc.)\nstay as the are.\nThis is a shortcut to triggerNavigation that can be used to only change one query parameter.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setQueryParams\n                        \n                    \n                \n            \n            \n                \n                    \n                    setQueryParams(queryParams: Params)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/route.ts:370\n                \n            \n\n\n            \n                \n                    Triggers a navigation with the given new query parameters. All the other parts (params etc.) stay as the are.\nThis is a shortcut to triggerNavigation that can be used to only change the query parameters.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryParams\n                                    \n                                                Params\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setUrl\n                        \n                    \n                \n            \n            \n                \n                    \n                    setUrl(url: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/route.ts:413\n                \n            \n\n\n            \n                \n                    Triggers a navigation with the given new url. The other parts (params etc.)  stay as the are.\nThis is a shortcut to triggerNavigation that can be used to only change the url.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        toString\n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/route.ts:469\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        triggerNavigation\n                        \n                    \n                \n            \n            \n                \n                    \n                    triggerNavigation(options: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/route.ts:427\n                \n            \n\n\n            \n                \n                    Triggers a navigation based on the given options. If an option is undefined or null, it's ignored. Except for fragment, which is only\nignored if it's undefined, because null is a valid value for a fragment.\nThe non-ignored values are used to change the snapshot of the route. Once the snapshot has been modified,\nthe observables corresponding to the updated parts emit the new value.\nSo, setting params and query params will make the params and queryParams observables emit, but not the fragment, data and\nurl observables for example. This is consistent to how the router behaves.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        root\n                    \n                \n\n                \n                    \n                        getroot()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/route.ts:325\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        pathFromRoot\n                    \n                \n\n                \n                    \n                        getpathFromRoot()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/route.ts:333\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        firstChild\n                    \n                \n\n                \n                    \n                        getfirstChild()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/route.ts:337\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        children\n                    \n                \n\n                \n                    \n                        getchildren()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/route.ts:341\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        routeConfig\n                    \n                \n\n                \n                    \n                        getrouteConfig()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/route.ts:345\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ActivatedRoute, ActivatedRouteSnapshot, convertToParamMap, Data, Params, Route, UrlSegment } from '@angular/router';\nimport { BehaviorSubject, map, Observable } from 'rxjs';\nimport { Type } from '@angular/core';\n\n/**\n * Creates a fake partial ActivatedRoute for tests.\n *\n * If you pass params, then the created route's paramMap will contain the same values.\n * The same goes for queryParams and queryParamMap.\n *\n * If you pass a parent route and a snapshot, and the passed snapshot doesn't have a parent, then the snapshot's\n * parent will be set to the parent route snapshot. This allows the code under test to use\n * `route.parent.snapshot` or `route.snapshot.parent`.\n *\n * If you pass a snapshot with a parent, but don't pass a parent or pass a parent without snapshot, then the route's\n * parent snapshot will be set to the given snapshot's parent. This allows the code under test to use\n * `route.parent.snapshot` or `route.snapshot.parent`.\n *\n * @returns a partially populated, fake ActivatedRoute, depending on what you passed in\n * @deprecated favor stubRoute, which creates an easier to use and more logical stub\n */\nexport function fakeRoute(options: {\n  url?: Observable;\n  /** An observable of the matrix parameters scoped to this route */\n  params?: Observable;\n  /** An observable of the query parameters shared by all the routes */\n  queryParams?: Observable;\n  /** An observable of the URL fragment shared by all the routes */\n  fragment?: Observable;\n  /** An observable of the static and resolved data of this route. */\n  data?: Observable;\n  /** The outlet name of the route. It's a constant */\n  outlet?: string;\n  /** The component of the route. It's a constant */\n  component?: Type | string | null;\n  /** The current snapshot of this route */\n  snapshot?: ActivatedRouteSnapshot;\n  /** The configuration used to match this route */\n  routeConfig?: Route | null;\n  /** The root of the router state */\n  root?: ActivatedRoute;\n  /** The parent of this route in the router state tree */\n  parent?: ActivatedRoute | null;\n  /** The first child of this route in the router state tree */\n  firstChild?: ActivatedRoute;\n  /** The children of this route in the router state tree */\n  children?: ActivatedRoute[];\n  /** The path from the root of the router state tree to this route */\n  pathFromRoot?: ActivatedRoute[];\n}): ActivatedRoute {\n  const result = {\n    url: options.url,\n    params: options.params,\n    paramMap: options.params && options.params.pipe(map(params => convertToParamMap(params))),\n    queryParams: options.queryParams,\n    queryParamMap: options.queryParams && options.queryParams.pipe(map(params => convertToParamMap(params))),\n    fragment: options.fragment,\n    data: options.data,\n    outlet: options.outlet,\n    component: options.component,\n    snapshot: options.snapshot,\n    routeConfig: options.routeConfig,\n    root: options.root,\n    parent: options.parent,\n    firstChild: options.firstChild,\n    children: options.children,\n    pathFromRoot: options.pathFromRoot\n  } as ActivatedRoute;\n\n  for (let route: null | ActivatedRoute = result; route; route = route.parent) {\n    if (route.parent && route.parent.snapshot && !route.snapshot) {\n      // eslint-disable-next-line deprecation/deprecation\n      route.snapshot = fakeSnapshot({});\n    }\n    if (route.parent && route.parent.snapshot && !route.snapshot.parent) {\n      (route.snapshot as Omit & { parent: ActivatedRouteSnapshot }).parent = route.parent.snapshot;\n    }\n\n    if (route.snapshot && route.snapshot.parent && !route.parent) {\n      // eslint-disable-next-line deprecation/deprecation\n      (route as Omit & { parent: ActivatedRoute }).parent = fakeRoute({});\n    }\n    if (route.snapshot && route.snapshot.parent && route.parent && !route.parent.snapshot) {\n      route.parent.snapshot = route.snapshot.parent;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Creates a fake partial ActivatedRouteSnapshot for tests.\n *\n * If you pass params, then the created snapshot's paramMap will contain the same values.\n * The same goes for queryParams and queryParamMap.\n *\n * @returns a partially populated, fake ActivatedRoute, depending on what you passed in\n * @deprecated favor stubRoute, which creates an easier to use and more logical stub for both the route and its snapshot\n */\nexport function fakeSnapshot(options: {\n  url?: UrlSegment[];\n  /** The matrix parameters scoped to this route */\n  params?: Params;\n  /** The query parameters shared by all the routes */\n  queryParams?: Params;\n  /** The URL fragment shared by all the routes */\n  fragment?: string;\n  /** The static and resolved data of this route */\n  data?: Data;\n  /** The outlet name of the route */\n  outlet?: string;\n  /** The component of the route */\n  component?: Type | string | null;\n  /** The configuration used to match this route */\n  routeConfig?: Route;\n  /** The root of the router state */\n  root?: ActivatedRouteSnapshot;\n  /** The parent of this route in the router state tree */\n  parent?: ActivatedRouteSnapshot | null;\n  /** The first child of this route in the router state tree */\n  firstChild?: ActivatedRouteSnapshot | null;\n  /** The children of this route in the router state tree */\n  children?: ActivatedRouteSnapshot[];\n  /** The path from the root of the router state tree to this route */\n  pathFromRoot?: ActivatedRouteSnapshot[];\n}): ActivatedRouteSnapshot {\n  return {\n    url: options.url,\n    params: options.params,\n    paramMap: options.params && convertToParamMap(options.params),\n    queryParams: options.queryParams,\n    queryParamMap: options.queryParams && convertToParamMap(options.queryParams),\n    fragment: options.fragment,\n    data: options.data,\n    outlet: options.outlet,\n    component: options.component,\n    routeConfig: options.routeConfig,\n    root: options.root,\n    parent: options.parent,\n    firstChild: options.firstChild,\n    children: options.children,\n    pathFromRoot: options.pathFromRoot\n  } as ActivatedRouteSnapshot;\n}\n\n/**\n * The options that are passed when creating an ActivatedRouteStub.\n */\nexport interface ActivatedRouteStubOptions {\n  /**\n   * The initial values of the parameters of the route\n   */\n  params?: Params;\n  /**\n   * The initial values of the query parameters of the route\n   */\n  queryParams?: Params;\n  /**\n   * The initial values of the data of the route\n   */\n  data?: Data;\n  /**\n   * The initial fragment of the route\n   */\n  fragment?: string | null;\n  /**\n   * The initial url of the route\n   */\n  url?: UrlSegment[];\n  /**\n   * The parent of the route\n   */\n  parent?: ActivatedRouteStub | null;\n  /**\n   * The first child of the route\n   */\n  firstChild?: ActivatedRouteStub | null;\n  /**\n   * The children of the route\n   */\n  children?: ActivatedRouteStub[] | null;\n  /**\n   * The configuration of the route\n   */\n  routeConfig?: Route | null;\n}\n\nclass ActivatedRouteSnapshotStub extends ActivatedRouteSnapshot {\n  private _parent: ActivatedRouteSnapshot | null = null;\n  private _root: ActivatedRouteSnapshot;\n  private _firstChild: ActivatedRouteSnapshot | null = null;\n  private _children: Array = [];\n  private _pathFromRoot: Array = [];\n  private _routeConfig: Route | null = null;\n\n  get parent(): ActivatedRouteSnapshot | null {\n    return this._parent;\n  }\n\n  set parent(value: ActivatedRouteSnapshot | null) {\n    this._parent = value;\n  }\n\n  get root(): ActivatedRouteSnapshot {\n    return this._root;\n  }\n\n  set root(value: ActivatedRouteSnapshot) {\n    this._root = value;\n  }\n\n  get firstChild(): ActivatedRouteSnapshot | null {\n    return this._firstChild;\n  }\n\n  set firstChild(value: ActivatedRouteSnapshot | null) {\n    this._firstChild = value;\n  }\n\n  get children(): Array {\n    return this._children;\n  }\n\n  set children(value: Array) {\n    this._children = value;\n  }\n\n  get pathFromRoot(): Array {\n    return this._pathFromRoot;\n  }\n\n  set pathFromRoot(value: Array) {\n    this._pathFromRoot = value;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  get routeConfig(): Route | null {\n    return this._routeConfig;\n  }\n\n  set routeConfig(route: Route | null) {\n    this._routeConfig = route;\n  }\n\n  constructor() {\n    super();\n    this._root = this;\n  }\n}\n\n/**\n * A stub for ActivatedRoute. It behaves almost the same way as the actual ActivatedRoute, exposing a snapshot\n * and observables for the params, query params etc., which are kept in sync.\n *\n * In addition, this stub allows simulating a navigation by changing the params, the query params, the fragment, etc.\n * When that happens, the snapshot is modified, then the relevant observables emit the new values.\n *\n * There are some things that don't really work the same way as the real ActivatedRoute though:\n * - the handling of the firstChild and of the children is entirely under the tester's responsibility. Setting the parent\n *   of a route stub does not add this route to the children of its parent, for example.\n * - when changing the params, query params, fragment, etc., their associated observable emits unconditionally, instead of\n *   first checking if the value is actually different from before. It's thus the responsibility of the tester to not\n *   change the values if they're the same as before.\n */\nexport class ActivatedRouteStub extends ActivatedRoute {\n  private _firstChild: ActivatedRouteStub | null;\n  private _children: Array;\n\n  private readonly paramsSubject: BehaviorSubject;\n  private readonly queryParamsSubject: BehaviorSubject;\n  private readonly dataSubject: BehaviorSubject;\n  private readonly fragmentSubject: BehaviorSubject;\n  private readonly urlSubject: BehaviorSubject>;\n\n  private _parent: ActivatedRouteStub | null;\n  private _root: ActivatedRouteStub;\n  private _pathFromRoot: Array;\n\n  /**\n   * Constructs a new instance, based on the given options.\n   * If an option is not provided (or if no option is provided at all), then the route has a default value for this option\n   * (empty parameters for example, null fragment, etc.)\n   * If no parent is passed, then this route has no parent and is thus set as the root. Otherwise, the root and the path\n   * from root are created based on the root and path from root of the given parent route.\n   */\n  constructor(options?: ActivatedRouteStubOptions) {\n    super();\n\n    const snapshot = new ActivatedRouteSnapshotStub();\n    this.snapshot = snapshot;\n\n    this._firstChild = options?.firstChild ?? null;\n    this._children = options?.children ?? [];\n    this._parent = options?.parent ?? null;\n    this._root = this.parent?.root ?? this;\n    this._pathFromRoot = this.parent ? [...this.parent.pathFromRoot, this] : [this];\n\n    snapshot.params = options?.params ?? {};\n    snapshot.queryParams = options?.queryParams ?? {};\n    snapshot.data = options?.data ?? {};\n    snapshot.fragment = options?.fragment ?? null;\n    snapshot.url = options?.url ?? [];\n    snapshot.routeConfig = options?.routeConfig ?? null;\n\n    snapshot.firstChild = this.firstChild?.snapshot ?? null;\n    snapshot.children = this.children?.map(route => route.snapshot) ?? [];\n    snapshot.parent = this.parent?.snapshot ?? null;\n    snapshot.root = this.root.snapshot;\n    snapshot.pathFromRoot = this.pathFromRoot.map(route => route.snapshot);\n\n    this.paramsSubject = new BehaviorSubject(this.snapshot.params);\n    this.queryParamsSubject = new BehaviorSubject(this.snapshot.queryParams);\n    this.dataSubject = new BehaviorSubject(this.snapshot.data);\n    this.fragmentSubject = new BehaviorSubject(this.snapshot.fragment);\n    this.urlSubject = new BehaviorSubject>(this.snapshot.url);\n\n    this.params = this.paramsSubject.asObservable();\n    this.queryParams = this.queryParamsSubject.asObservable();\n    this.data = this.dataSubject.asObservable();\n    this.fragment = this.fragmentSubject.asObservable();\n    this.url = this.urlSubject.asObservable();\n  }\n\n  get root() {\n    return this._root;\n  }\n\n  get parent(): ActivatedRouteStub | null {\n    return this._parent;\n  }\n\n  get pathFromRoot(): Array {\n    return this._pathFromRoot;\n  }\n\n  get firstChild(): ActivatedRouteStub | null {\n    return this._firstChild;\n  }\n\n  get children(): Array {\n    return this._children;\n  }\n\n  get routeConfig(): Route | null {\n    return this.snapshot.routeConfig;\n  }\n\n  /**\n   * Triggers a navigation with the given new parameters. All the other parts (query params etc.) stay as the are.\n   * This is a shortcut to `triggerNavigation` that can be used to only change the parameters.\n   */\n  public setParams(params: Params): void {\n    this.triggerNavigation({ params });\n  }\n\n  /**\n   * Triggers a navigation with the given new parameter. The other parameters, as well as all the other parts (query params etc.)\n   * stay as the are.\n   * This is a shortcut to `triggerNavigation` that can be used to only change one parameter.\n   */\n  public setParam(name: string, value: string): void {\n    this.setParams({ ...this.snapshot.params, [name]: value });\n  }\n\n  /**\n   * Triggers a navigation with the given new query parameters. All the other parts (params etc.) stay as the are.\n   * This is a shortcut to `triggerNavigation` that can be used to only change the query parameters.\n   */\n  public setQueryParams(queryParams: Params): void {\n    this.triggerNavigation({ queryParams });\n  }\n\n  /**\n   * Triggers a navigation with the given new parameter. The other query parameters, as well as all the other parts (params etc.)\n   * stay as the are.\n   * This is a shortcut to `triggerNavigation` that can be used to only change one query parameter.\n   */\n  public setQueryParam(name: string, value: string): void {\n    this.setQueryParams({ ...this.snapshot.queryParams, [name]: value });\n  }\n\n  /**\n   * Triggers a navigation with the given new data. The other parameters, as well as all the other parts (params etc.)\n   * stay as the are.\n   * This is a shortcut to `triggerNavigation` that can be used to only change the data.\n   */\n  public setData(data: Data): void {\n    this.triggerNavigation({ data });\n  }\n\n  /**\n   * Triggers a navigation with the given new data item. The other data, as well as all the other parts (params etc.)\n   * stay as the are.\n   * This is a shortcut to `triggerNavigation` that can be used to only change one data item.\n   */\n  public setDataItem(name: string, value: unknown): void {\n    this.setData({ ...this.snapshot.data, [name]: value });\n  }\n\n  /**\n   * Triggers a navigation with the given new fragment. The other parts (params etc.)  stay as the are.\n   * This is a shortcut to `triggerNavigation` that can be used to only change the fragment.\n   */\n  public setFragment(fragment: string | null): void {\n    this.triggerNavigation({ fragment });\n  }\n\n  /**\n   * Triggers a navigation with the given new url. The other parts (params etc.)  stay as the are.\n   * This is a shortcut to `triggerNavigation` that can be used to only change the url.\n   */\n  public setUrl(url: Array): void {\n    this.triggerNavigation({ url });\n  }\n\n  /**\n   * Triggers a navigation based on the given options. If an option is undefined or null, it's ignored. Except for fragment, which is only\n   * ignored if it's undefined, because null is a valid value for a fragment.\n   *\n   * The non-ignored values are used to change the snapshot of the route. Once the snapshot has been modified,\n   * the observables corresponding to the updated parts emit the new value.\n   *\n   * So, setting params and query params will make the params and queryParams observables emit, but not the fragment, data and\n   * url observables for example. This is consistent to how the router behaves.\n   */\n  public triggerNavigation(options: {\n    params?: Params;\n    queryParams?: Params;\n    fragment?: string | null;\n    data?: Data | null;\n    url?: Array | null;\n  }): void {\n    // set the snapshot first\n    if (options.params) {\n      this.snapshot.params = options.params;\n    }\n    if (options.queryParams) {\n      this.snapshot.queryParams = options.queryParams;\n    }\n    if (options.fragment !== undefined) {\n      this.snapshot.fragment = options.fragment;\n    }\n    if (options.data) {\n      this.snapshot.data = options.data;\n    }\n    if (options.url) {\n      this.snapshot.url = options.url;\n    }\n\n    // then emit everything that has changed\n    if (options.params) {\n      this.paramsSubject.next(this.snapshot.params);\n    }\n    if (options.queryParams) {\n      this.queryParamsSubject.next(this.snapshot.queryParams);\n    }\n    if (options.fragment !== undefined) {\n      this.fragmentSubject.next(this.snapshot.fragment);\n    }\n    if (options.data) {\n      this.dataSubject.next(this.snapshot.data);\n    }\n    if (options.url) {\n      this.urlSubject.next(this.snapshot.url);\n    }\n  }\n\n  public toString(): string {\n    return 'ActivatedRouteStub';\n  }\n}\n\n/**\n * Creates a new ActivatedRouteStub, by calling its constructor.\n */\nexport function stubRoute(options?: ActivatedRouteStubOptions): ActivatedRouteStub {\n  return new ActivatedRouteStub(options);\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ActivatedRouteStubOptions.html":{"url":"interfaces/ActivatedRouteStubOptions.html","title":"interface - ActivatedRouteStubOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActivatedRouteStubOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/route.ts\n        \n\n\n            \n                Description\n            \n            \n                The options that are passed when creating an ActivatedRouteStub.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            children\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            firstChild\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fragment\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            params\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            parent\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            queryParams\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            routeConfig\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        children\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        children:         ActivatedRouteStub[] | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ActivatedRouteStub[] | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The children of the route\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         Data\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Data\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The initial values of the data of the route\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstChild\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstChild:         ActivatedRouteStub | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ActivatedRouteStub | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The first child of the route\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fragment\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fragment:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The initial fragment of the route\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        params\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        params:         Params\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Params\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The initial values of the parameters of the route\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        parent:         ActivatedRouteStub | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ActivatedRouteStub | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The parent of the route\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queryParams\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queryParams:         Params\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Params\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The initial values of the query parameters of the route\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        routeConfig\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        routeConfig:     Route | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Route | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The configuration of the route\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:     UrlSegment[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     UrlSegment[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The initial url of the route\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ActivatedRoute, ActivatedRouteSnapshot, convertToParamMap, Data, Params, Route, UrlSegment } from '@angular/router';\nimport { BehaviorSubject, map, Observable } from 'rxjs';\nimport { Type } from '@angular/core';\n\n/**\n * Creates a fake partial ActivatedRoute for tests.\n *\n * If you pass params, then the created route's paramMap will contain the same values.\n * The same goes for queryParams and queryParamMap.\n *\n * If you pass a parent route and a snapshot, and the passed snapshot doesn't have a parent, then the snapshot's\n * parent will be set to the parent route snapshot. This allows the code under test to use\n * `route.parent.snapshot` or `route.snapshot.parent`.\n *\n * If you pass a snapshot with a parent, but don't pass a parent or pass a parent without snapshot, then the route's\n * parent snapshot will be set to the given snapshot's parent. This allows the code under test to use\n * `route.parent.snapshot` or `route.snapshot.parent`.\n *\n * @returns a partially populated, fake ActivatedRoute, depending on what you passed in\n * @deprecated favor stubRoute, which creates an easier to use and more logical stub\n */\nexport function fakeRoute(options: {\n  url?: Observable;\n  /** An observable of the matrix parameters scoped to this route */\n  params?: Observable;\n  /** An observable of the query parameters shared by all the routes */\n  queryParams?: Observable;\n  /** An observable of the URL fragment shared by all the routes */\n  fragment?: Observable;\n  /** An observable of the static and resolved data of this route. */\n  data?: Observable;\n  /** The outlet name of the route. It's a constant */\n  outlet?: string;\n  /** The component of the route. It's a constant */\n  component?: Type | string | null;\n  /** The current snapshot of this route */\n  snapshot?: ActivatedRouteSnapshot;\n  /** The configuration used to match this route */\n  routeConfig?: Route | null;\n  /** The root of the router state */\n  root?: ActivatedRoute;\n  /** The parent of this route in the router state tree */\n  parent?: ActivatedRoute | null;\n  /** The first child of this route in the router state tree */\n  firstChild?: ActivatedRoute;\n  /** The children of this route in the router state tree */\n  children?: ActivatedRoute[];\n  /** The path from the root of the router state tree to this route */\n  pathFromRoot?: ActivatedRoute[];\n}): ActivatedRoute {\n  const result = {\n    url: options.url,\n    params: options.params,\n    paramMap: options.params && options.params.pipe(map(params => convertToParamMap(params))),\n    queryParams: options.queryParams,\n    queryParamMap: options.queryParams && options.queryParams.pipe(map(params => convertToParamMap(params))),\n    fragment: options.fragment,\n    data: options.data,\n    outlet: options.outlet,\n    component: options.component,\n    snapshot: options.snapshot,\n    routeConfig: options.routeConfig,\n    root: options.root,\n    parent: options.parent,\n    firstChild: options.firstChild,\n    children: options.children,\n    pathFromRoot: options.pathFromRoot\n  } as ActivatedRoute;\n\n  for (let route: null | ActivatedRoute = result; route; route = route.parent) {\n    if (route.parent && route.parent.snapshot && !route.snapshot) {\n      // eslint-disable-next-line deprecation/deprecation\n      route.snapshot = fakeSnapshot({});\n    }\n    if (route.parent && route.parent.snapshot && !route.snapshot.parent) {\n      (route.snapshot as Omit & { parent: ActivatedRouteSnapshot }).parent = route.parent.snapshot;\n    }\n\n    if (route.snapshot && route.snapshot.parent && !route.parent) {\n      // eslint-disable-next-line deprecation/deprecation\n      (route as Omit & { parent: ActivatedRoute }).parent = fakeRoute({});\n    }\n    if (route.snapshot && route.snapshot.parent && route.parent && !route.parent.snapshot) {\n      route.parent.snapshot = route.snapshot.parent;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Creates a fake partial ActivatedRouteSnapshot for tests.\n *\n * If you pass params, then the created snapshot's paramMap will contain the same values.\n * The same goes for queryParams and queryParamMap.\n *\n * @returns a partially populated, fake ActivatedRoute, depending on what you passed in\n * @deprecated favor stubRoute, which creates an easier to use and more logical stub for both the route and its snapshot\n */\nexport function fakeSnapshot(options: {\n  url?: UrlSegment[];\n  /** The matrix parameters scoped to this route */\n  params?: Params;\n  /** The query parameters shared by all the routes */\n  queryParams?: Params;\n  /** The URL fragment shared by all the routes */\n  fragment?: string;\n  /** The static and resolved data of this route */\n  data?: Data;\n  /** The outlet name of the route */\n  outlet?: string;\n  /** The component of the route */\n  component?: Type | string | null;\n  /** The configuration used to match this route */\n  routeConfig?: Route;\n  /** The root of the router state */\n  root?: ActivatedRouteSnapshot;\n  /** The parent of this route in the router state tree */\n  parent?: ActivatedRouteSnapshot | null;\n  /** The first child of this route in the router state tree */\n  firstChild?: ActivatedRouteSnapshot | null;\n  /** The children of this route in the router state tree */\n  children?: ActivatedRouteSnapshot[];\n  /** The path from the root of the router state tree to this route */\n  pathFromRoot?: ActivatedRouteSnapshot[];\n}): ActivatedRouteSnapshot {\n  return {\n    url: options.url,\n    params: options.params,\n    paramMap: options.params && convertToParamMap(options.params),\n    queryParams: options.queryParams,\n    queryParamMap: options.queryParams && convertToParamMap(options.queryParams),\n    fragment: options.fragment,\n    data: options.data,\n    outlet: options.outlet,\n    component: options.component,\n    routeConfig: options.routeConfig,\n    root: options.root,\n    parent: options.parent,\n    firstChild: options.firstChild,\n    children: options.children,\n    pathFromRoot: options.pathFromRoot\n  } as ActivatedRouteSnapshot;\n}\n\n/**\n * The options that are passed when creating an ActivatedRouteStub.\n */\nexport interface ActivatedRouteStubOptions {\n  /**\n   * The initial values of the parameters of the route\n   */\n  params?: Params;\n  /**\n   * The initial values of the query parameters of the route\n   */\n  queryParams?: Params;\n  /**\n   * The initial values of the data of the route\n   */\n  data?: Data;\n  /**\n   * The initial fragment of the route\n   */\n  fragment?: string | null;\n  /**\n   * The initial url of the route\n   */\n  url?: UrlSegment[];\n  /**\n   * The parent of the route\n   */\n  parent?: ActivatedRouteStub | null;\n  /**\n   * The first child of the route\n   */\n  firstChild?: ActivatedRouteStub | null;\n  /**\n   * The children of the route\n   */\n  children?: ActivatedRouteStub[] | null;\n  /**\n   * The configuration of the route\n   */\n  routeConfig?: Route | null;\n}\n\nclass ActivatedRouteSnapshotStub extends ActivatedRouteSnapshot {\n  private _parent: ActivatedRouteSnapshot | null = null;\n  private _root: ActivatedRouteSnapshot;\n  private _firstChild: ActivatedRouteSnapshot | null = null;\n  private _children: Array = [];\n  private _pathFromRoot: Array = [];\n  private _routeConfig: Route | null = null;\n\n  get parent(): ActivatedRouteSnapshot | null {\n    return this._parent;\n  }\n\n  set parent(value: ActivatedRouteSnapshot | null) {\n    this._parent = value;\n  }\n\n  get root(): ActivatedRouteSnapshot {\n    return this._root;\n  }\n\n  set root(value: ActivatedRouteSnapshot) {\n    this._root = value;\n  }\n\n  get firstChild(): ActivatedRouteSnapshot | null {\n    return this._firstChild;\n  }\n\n  set firstChild(value: ActivatedRouteSnapshot | null) {\n    this._firstChild = value;\n  }\n\n  get children(): Array {\n    return this._children;\n  }\n\n  set children(value: Array) {\n    this._children = value;\n  }\n\n  get pathFromRoot(): Array {\n    return this._pathFromRoot;\n  }\n\n  set pathFromRoot(value: Array) {\n    this._pathFromRoot = value;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  get routeConfig(): Route | null {\n    return this._routeConfig;\n  }\n\n  set routeConfig(route: Route | null) {\n    this._routeConfig = route;\n  }\n\n  constructor() {\n    super();\n    this._root = this;\n  }\n}\n\n/**\n * A stub for ActivatedRoute. It behaves almost the same way as the actual ActivatedRoute, exposing a snapshot\n * and observables for the params, query params etc., which are kept in sync.\n *\n * In addition, this stub allows simulating a navigation by changing the params, the query params, the fragment, etc.\n * When that happens, the snapshot is modified, then the relevant observables emit the new values.\n *\n * There are some things that don't really work the same way as the real ActivatedRoute though:\n * - the handling of the firstChild and of the children is entirely under the tester's responsibility. Setting the parent\n *   of a route stub does not add this route to the children of its parent, for example.\n * - when changing the params, query params, fragment, etc., their associated observable emits unconditionally, instead of\n *   first checking if the value is actually different from before. It's thus the responsibility of the tester to not\n *   change the values if they're the same as before.\n */\nexport class ActivatedRouteStub extends ActivatedRoute {\n  private _firstChild: ActivatedRouteStub | null;\n  private _children: Array;\n\n  private readonly paramsSubject: BehaviorSubject;\n  private readonly queryParamsSubject: BehaviorSubject;\n  private readonly dataSubject: BehaviorSubject;\n  private readonly fragmentSubject: BehaviorSubject;\n  private readonly urlSubject: BehaviorSubject>;\n\n  private _parent: ActivatedRouteStub | null;\n  private _root: ActivatedRouteStub;\n  private _pathFromRoot: Array;\n\n  /**\n   * Constructs a new instance, based on the given options.\n   * If an option is not provided (or if no option is provided at all), then the route has a default value for this option\n   * (empty parameters for example, null fragment, etc.)\n   * If no parent is passed, then this route has no parent and is thus set as the root. Otherwise, the root and the path\n   * from root are created based on the root and path from root of the given parent route.\n   */\n  constructor(options?: ActivatedRouteStubOptions) {\n    super();\n\n    const snapshot = new ActivatedRouteSnapshotStub();\n    this.snapshot = snapshot;\n\n    this._firstChild = options?.firstChild ?? null;\n    this._children = options?.children ?? [];\n    this._parent = options?.parent ?? null;\n    this._root = this.parent?.root ?? this;\n    this._pathFromRoot = this.parent ? [...this.parent.pathFromRoot, this] : [this];\n\n    snapshot.params = options?.params ?? {};\n    snapshot.queryParams = options?.queryParams ?? {};\n    snapshot.data = options?.data ?? {};\n    snapshot.fragment = options?.fragment ?? null;\n    snapshot.url = options?.url ?? [];\n    snapshot.routeConfig = options?.routeConfig ?? null;\n\n    snapshot.firstChild = this.firstChild?.snapshot ?? null;\n    snapshot.children = this.children?.map(route => route.snapshot) ?? [];\n    snapshot.parent = this.parent?.snapshot ?? null;\n    snapshot.root = this.root.snapshot;\n    snapshot.pathFromRoot = this.pathFromRoot.map(route => route.snapshot);\n\n    this.paramsSubject = new BehaviorSubject(this.snapshot.params);\n    this.queryParamsSubject = new BehaviorSubject(this.snapshot.queryParams);\n    this.dataSubject = new BehaviorSubject(this.snapshot.data);\n    this.fragmentSubject = new BehaviorSubject(this.snapshot.fragment);\n    this.urlSubject = new BehaviorSubject>(this.snapshot.url);\n\n    this.params = this.paramsSubject.asObservable();\n    this.queryParams = this.queryParamsSubject.asObservable();\n    this.data = this.dataSubject.asObservable();\n    this.fragment = this.fragmentSubject.asObservable();\n    this.url = this.urlSubject.asObservable();\n  }\n\n  get root() {\n    return this._root;\n  }\n\n  get parent(): ActivatedRouteStub | null {\n    return this._parent;\n  }\n\n  get pathFromRoot(): Array {\n    return this._pathFromRoot;\n  }\n\n  get firstChild(): ActivatedRouteStub | null {\n    return this._firstChild;\n  }\n\n  get children(): Array {\n    return this._children;\n  }\n\n  get routeConfig(): Route | null {\n    return this.snapshot.routeConfig;\n  }\n\n  /**\n   * Triggers a navigation with the given new parameters. All the other parts (query params etc.) stay as the are.\n   * This is a shortcut to `triggerNavigation` that can be used to only change the parameters.\n   */\n  public setParams(params: Params): void {\n    this.triggerNavigation({ params });\n  }\n\n  /**\n   * Triggers a navigation with the given new parameter. The other parameters, as well as all the other parts (query params etc.)\n   * stay as the are.\n   * This is a shortcut to `triggerNavigation` that can be used to only change one parameter.\n   */\n  public setParam(name: string, value: string): void {\n    this.setParams({ ...this.snapshot.params, [name]: value });\n  }\n\n  /**\n   * Triggers a navigation with the given new query parameters. All the other parts (params etc.) stay as the are.\n   * This is a shortcut to `triggerNavigation` that can be used to only change the query parameters.\n   */\n  public setQueryParams(queryParams: Params): void {\n    this.triggerNavigation({ queryParams });\n  }\n\n  /**\n   * Triggers a navigation with the given new parameter. The other query parameters, as well as all the other parts (params etc.)\n   * stay as the are.\n   * This is a shortcut to `triggerNavigation` that can be used to only change one query parameter.\n   */\n  public setQueryParam(name: string, value: string): void {\n    this.setQueryParams({ ...this.snapshot.queryParams, [name]: value });\n  }\n\n  /**\n   * Triggers a navigation with the given new data. The other parameters, as well as all the other parts (params etc.)\n   * stay as the are.\n   * This is a shortcut to `triggerNavigation` that can be used to only change the data.\n   */\n  public setData(data: Data): void {\n    this.triggerNavigation({ data });\n  }\n\n  /**\n   * Triggers a navigation with the given new data item. The other data, as well as all the other parts (params etc.)\n   * stay as the are.\n   * This is a shortcut to `triggerNavigation` that can be used to only change one data item.\n   */\n  public setDataItem(name: string, value: unknown): void {\n    this.setData({ ...this.snapshot.data, [name]: value });\n  }\n\n  /**\n   * Triggers a navigation with the given new fragment. The other parts (params etc.)  stay as the are.\n   * This is a shortcut to `triggerNavigation` that can be used to only change the fragment.\n   */\n  public setFragment(fragment: string | null): void {\n    this.triggerNavigation({ fragment });\n  }\n\n  /**\n   * Triggers a navigation with the given new url. The other parts (params etc.)  stay as the are.\n   * This is a shortcut to `triggerNavigation` that can be used to only change the url.\n   */\n  public setUrl(url: Array): void {\n    this.triggerNavigation({ url });\n  }\n\n  /**\n   * Triggers a navigation based on the given options. If an option is undefined or null, it's ignored. Except for fragment, which is only\n   * ignored if it's undefined, because null is a valid value for a fragment.\n   *\n   * The non-ignored values are used to change the snapshot of the route. Once the snapshot has been modified,\n   * the observables corresponding to the updated parts emit the new value.\n   *\n   * So, setting params and query params will make the params and queryParams observables emit, but not the fragment, data and\n   * url observables for example. This is consistent to how the router behaves.\n   */\n  public triggerNavigation(options: {\n    params?: Params;\n    queryParams?: Params;\n    fragment?: string | null;\n    data?: Data | null;\n    url?: Array | null;\n  }): void {\n    // set the snapshot first\n    if (options.params) {\n      this.snapshot.params = options.params;\n    }\n    if (options.queryParams) {\n      this.snapshot.queryParams = options.queryParams;\n    }\n    if (options.fragment !== undefined) {\n      this.snapshot.fragment = options.fragment;\n    }\n    if (options.data) {\n      this.snapshot.data = options.data;\n    }\n    if (options.url) {\n      this.snapshot.url = options.url;\n    }\n\n    // then emit everything that has changed\n    if (options.params) {\n      this.paramsSubject.next(this.snapshot.params);\n    }\n    if (options.queryParams) {\n      this.queryParamsSubject.next(this.snapshot.queryParams);\n    }\n    if (options.fragment !== undefined) {\n      this.fragmentSubject.next(this.snapshot.fragment);\n    }\n    if (options.data) {\n      this.dataSubject.next(this.snapshot.data);\n    }\n    if (options.url) {\n      this.urlSubject.next(this.snapshot.url);\n    }\n  }\n\n  public toString(): string {\n    return 'ActivatedRouteStub';\n  }\n}\n\n/**\n * Creates a new ActivatedRouteStub, by calling its constructor.\n */\nexport function stubRoute(options?: ActivatedRouteStubOptions): ActivatedRouteStub {\n  return new ActivatedRouteStub(options);\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Matchers.html":{"url":"interfaces/Matchers.html","title":"interface - Matchers","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Matchers\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/jasmine-matchers.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        toBeChecked\n                                    \n                                \n                                \n                                    \n                                        toBeVisible\n                                    \n                                \n                                \n                                    \n                                        toContainText\n                                    \n                                \n                                \n                                    \n                                        toHaveClass\n                                    \n                                \n                                \n                                    \n                                        toHaveSelectedIndex\n                                    \n                                \n                                \n                                    \n                                        toHaveSelectedLabel\n                                    \n                                \n                                \n                                    \n                                        toHaveSelectedValue\n                                    \n                                \n                                \n                                    \n                                        toHaveText\n                                    \n                                \n                                \n                                    \n                                        toHaveTrimmedText\n                                    \n                                \n                                \n                                    \n                                        toHaveValue\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toBeChecked\n                        \n                    \n                \n            \n            \n                \ntoBeChecked()\n                \n            \n\n\n            \n                \n                    Defined in src/jasmine-matchers.ts:33\n                \n            \n\n\n            \n                \n                    Checks that the receiver is a TestInput and is checked\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toBeVisible\n                        \n                    \n                \n            \n            \n                \ntoBeVisible()\n                \n            \n\n\n            \n                \n                    Defined in src/jasmine-matchers.ts:53\n                \n            \n\n\n            \n                \n                    Checks that the receiver is a TestHtmlElement which is visible.\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toContainText\n                        \n                    \n                \n            \n            \n                \ntoContainText(textContent: string)\n                \n            \n\n\n            \n                \n                    Defined in src/jasmine-matchers.ts:28\n                \n            \n\n\n            \n                \n                    Checks that the receiver is a TestElement wrapping a DOM element and contains the given textContent\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    textContent\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toHaveClass\n                        \n                    \n                \n            \n            \n                \ntoHaveClass(className: string)\n                \n            \n\n\n            \n                \n                    Defined in src/jasmine-matchers.ts:7\n                \n            \n\n\n            \n                \n                    Checks that the receiver is a TestElement wrapping a DOM element and has the given CSS class\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    className\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toHaveSelectedIndex\n                        \n                    \n                \n            \n            \n                \ntoHaveSelectedIndex(index: number)\n                \n            \n\n\n            \n                \n                    Defined in src/jasmine-matchers.ts:38\n                \n            \n\n\n            \n                \n                    Checks that the receiver is a TestSelect wrapping a DOM element and has the given selected index\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toHaveSelectedLabel\n                        \n                    \n                \n            \n            \n                \ntoHaveSelectedLabel(label: string)\n                \n            \n\n\n            \n                \n                    Defined in src/jasmine-matchers.ts:48\n                \n            \n\n\n            \n                \n                    Checks that the receiver is a TestSelect wrapping a DOM element with the selected option's label equal to the given label\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toHaveSelectedValue\n                        \n                    \n                \n            \n            \n                \ntoHaveSelectedValue(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/jasmine-matchers.ts:43\n                \n            \n\n\n            \n                \n                    Checks that the receiver is a TestSelect wrapping a DOM element with the selected option's value equal to the given value\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toHaveText\n                        \n                    \n                \n            \n            \n                \ntoHaveText(textContent: string)\n                \n            \n\n\n            \n                \n                    Defined in src/jasmine-matchers.ts:17\n                \n            \n\n\n            \n                \n                    Checks that the receiver is a TestElement wrapping a DOM element and has the exact given textContent\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    textContent\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toHaveTrimmedText\n                        \n                    \n                \n            \n            \n                \ntoHaveTrimmedText(textContent: string)\n                \n            \n\n\n            \n                \n                    Defined in src/jasmine-matchers.ts:23\n                \n            \n\n\n            \n                \n                    Checks that the receiver is a TestElement wrapping a DOM element and has the given textContent\nafter both have been trimmed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    textContent\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toHaveValue\n                        \n                    \n                \n            \n            \n                \ntoHaveValue(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/jasmine-matchers.ts:12\n                \n            \n\n\n            \n                \n                    Checks that the receiver is a TestInput or a TestTextArea and has the given value\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        declare namespace jasmine {\n  interface Matchers {\n    /**\n     * Checks that the receiver is a TestElement wrapping a DOM element and has the given CSS class\n     */\n    toHaveClass(className: string): boolean;\n\n    /**\n     * Checks that the receiver is a TestInput or a TestTextArea and has the given value\n     */\n    toHaveValue(value: string): boolean;\n\n    /**\n     * Checks that the receiver is a TestElement wrapping a DOM element and has the exact given textContent\n     */\n    toHaveText(textContent: string): boolean;\n\n    /**\n     * Checks that the receiver is a TestElement wrapping a DOM element and has the given textContent\n     * after both have been trimmed.\n     */\n    toHaveTrimmedText(textContent: string): boolean;\n\n    /**\n     * Checks that the receiver is a TestElement wrapping a DOM element and contains the given textContent\n     */\n    toContainText(textContent: string): boolean;\n\n    /**\n     * Checks that the receiver is a TestInput and is checked\n     */\n    toBeChecked(): boolean;\n\n    /**\n     * Checks that the receiver is a TestSelect wrapping a DOM element and has the given selected index\n     */\n    toHaveSelectedIndex(index: number): boolean;\n\n    /**\n     * Checks that the receiver is a TestSelect wrapping a DOM element with the selected option's value equal to the given value\n     */\n    toHaveSelectedValue(value: string): boolean;\n\n    /**\n     * Checks that the receiver is a TestSelect wrapping a DOM element with the selected option's label equal to the given label\n     */\n    toHaveSelectedLabel(label: string): boolean;\n\n    /**\n     * Checks that the receiver is a TestHtmlElement which is visible.\n     */\n    toBeVisible(): boolean;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestButton.html":{"url":"classes/TestButton.html","title":"class - TestButton","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestButton\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/test-button.ts\n        \n\n\n            \n                Description\n            \n            \n                A wrapped button element, providing additional methods and attributes helping with writing tests\n\n            \n\n            \n                Extends\n            \n            \n                        TestHtmlElement\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                            \n                                attr\n                            \n                            \n                                button\n                            \n                            \n                                component\n                            \n                            \n                                components\n                            \n                            \n                                custom\n                            \n                            \n                                customs\n                            \n                            \n                                dispatchEvent\n                            \n                            \n                                dispatchEventOfType\n                            \n                            \n                                element\n                            \n                            \n                                elements\n                            \n                            \n                                input\n                            \n                            \n                                select\n                            \n                            \n                                textarea\n                            \n                            \n                                token\n                            \n                            \n                                tokens\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    disabled\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tester: ComponentTester<>, debugElement: DebugElement)\n                    \n                \n                        \n                            \n                                Defined in src/lib/test-button.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tester\n                                                  \n                                                        \n                                                                        ComponentTester<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        debugElement\n                                                  \n                                                        \n                                                                        DebugElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        click\n                        \n                    \n                \n            \n            \n                \nclick()\n                \n            \n\n\n            \n                \n                    Inherited from         TestHtmlElement\n\n                \n            \n            \n                \n                        Defined in         TestHtmlElement:16\n\n                \n            \n\n\n            \n                \n                    Clicks on the wrapped element, then triggers a change detection\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attr\n                        \n                    \n                \n            \n            \n                \nattr(name: string)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:66\n\n                \n            \n\n\n            \n                \n                    Gets the attribute of the wrapped element with the given name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the name of the attribute to get\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        button\n                        \n                    \n                \n            \n            \n                \nbutton(selector: string | Type)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:327\n\n                \n            \n\n\n            \n                \n                    Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS or directive selector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TestButton | null\n\n                    \n                    \n                        the wrapped button, or null if no element was matched\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        component\n                        \n                    \n                \n            \n            \n                \ncomponent(selector: Type)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:335\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        R\n                    \n                \n            \n\n            \n                \n                    Gets the first directive matching the given component directive selector and returns its component instance\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the selector of a component directive\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     R\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        components\n                        \n                    \n                \n            \n            \n                \ncomponents(selector: Type)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:343\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        R\n                    \n                \n            \n\n            \n                \n                    Gets the directives matching the given component directive selector and returns their component instance\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the selector of a component directive\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        custom\n                        \n                    \n                \n            \n            \n                \ncustom(selector: string | Type, customTestElementType: Type)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:372\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        E\n                    \n                \n            \n\n            \n                \n                    Gets the element matching the given selector, and if found, creates and returns a custom TestElement of the provided\ntype. This is useful to create custom higher-level abstractions similar to TestInput, TestSelect, etc. for\ncustom elements or components.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS or directive selector\n\n                                    \n                                \n                                \n                                    customTestElementType\n                                    \n                                            Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the type of the TestElement subclass that will wrap the found element\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     E | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        customs\n                        \n                    \n                \n            \n            \n                \ncustoms(selector: string | Type, customTestElementType: Type)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:384\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        E\n                    \n                \n            \n\n            \n                \n                    Gets the elements matching the given selector, and creates and returns custom TestElements of the provided\ntype. This is useful to create custom higher-level abstractions similar to TestInput, TestSelect, etc. for\ncustom elements or components.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS or directive selector\n\n                                    \n                                \n                                \n                                    customTestElementType\n                                    \n                                            Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the type of the TestElement subclass that will wrap the found elements\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dispatchEvent\n                        \n                    \n                \n            \n            \n                \ndispatchEvent(event: Event)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:50\n\n                \n            \n\n\n            \n                \n                    dispatches the given event from the wrapped element, then triggers a change detection\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dispatchEventOfType\n                        \n                    \n                \n            \n            \n                \ndispatchEventOfType(type: string)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:42\n\n                \n            \n\n\n            \n                \n                    dispatches an event of the given type from the wrapped element, then triggers a change detection\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        element\n                        \n                    \n                \n            \n            \n                \nelement(selector: K)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:81\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        K\n                    \n                \n            \n\n            \n                \n                    Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\nof the returned value is the TestElement subclass matching the type of the found element. So, if the\nmatched element is an input for example, the method will return a TestInput.\nUsage:\n\nconst testElement: TestHtmlElement | null = tester.element('div');\n\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            K\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS selector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TestHtmlElement | null\n\n                    \n                    \n                        the wrapped element, or null if no element matches the selector.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        elements\n                        \n                    \n                \n            \n            \n                \nelements(selector: K)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:193\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        K\n                    \n                \n            \n\n            \n                \n                    Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\nof the returned elements is the TestElement subclass matching the type of the found element. So, if the\nmatched elements are inputs for example, the method will return an array of TestInput.\nUsage:\n\nconst testElements: Array> = tester.elements('div');\n\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            K\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS selector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Array>\n\n                    \n                    \n                        the array of matched elements, empty if no element was matched\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        input\n                        \n                    \n                \n            \n            \n                \ninput(selector: string | Type)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:299\n\n                \n            \n\n\n            \n                \n                    Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS or directive selector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TestInput | null\n\n                    \n                    \n                        the wrapped input, or null if no element was matched\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        select\n                        \n                    \n                \n            \n            \n                \nselect(selector: string | Type)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:308\n\n                \n            \n\n\n            \n                \n                    Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS or directive selector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TestSelect | null\n\n                    \n                    \n                        the wrapped select, or null if no element was matched\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        textarea\n                        \n                    \n                \n            \n            \n                \ntextarea(selector: string | Type)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:318\n\n                \n            \n\n\n            \n                \n                    Gets the first textarea matched by the given selector\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS or directive selector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TestTextArea | null\n\n                    \n                    \n                        the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n            \n                \ntoken(selector: string | Type, token: ProviderToken)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:352\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        R\n                    \n                \n            \n\n            \n                \n                    Gets the first element matching the given selector, then gets the given token from its injector, or null if there is no such token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS or directive selector\n\n                                    \n                                \n                                \n                                    token\n                                    \n                                            ProviderToken\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the token to get from the matched element injector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     R | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tokens\n                        \n                    \n                \n            \n            \n                \ntokens(selector: string | Type, token: ProviderToken)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:361\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        R\n                    \n                \n            \n\n            \n                \n                    Gets the elements matching the given selector, then gets their given token from their injector, or null if there is no such token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS or directive selector\n\n                                    \n                                \n                                \n                                    token\n                                    \n                                            ProviderToken\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the token to get from the matched element injector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n\n                \n                    \n                        getdisabled()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-button.ts:16\n                                \n                            \n                    \n                        \n                                the disabled flag of the button\n\n\n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ComponentTester } from './component-tester';\nimport { TestHtmlElement } from './test-html-element';\nimport { DebugElement } from '@angular/core';\n\n/**\n * A wrapped button element, providing additional methods and attributes helping with writing tests\n */\nexport class TestButton extends TestHtmlElement {\n  constructor(tester: ComponentTester, debugElement: DebugElement) {\n    super(tester, debugElement);\n  }\n\n  /**\n   * the disabled flag of the button\n   */\n  get disabled(): boolean {\n    return this.nativeElement.disabled;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestHtmlElement.html":{"url":"classes/TestHtmlElement.html","title":"class - TestHtmlElement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestHtmlElement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/test-html-element.ts\n        \n\n\n            \n                Description\n            \n            \n                A wrapped DOM HTML element, providing additional methods and attributes helping with writing tests\n\n            \n\n            \n                Extends\n            \n            \n                        TestElement\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                            \n                                attr\n                            \n                            \n                                button\n                            \n                            \n                                component\n                            \n                            \n                                components\n                            \n                            \n                                custom\n                            \n                            \n                                customs\n                            \n                            \n                                dispatchEvent\n                            \n                            \n                                dispatchEventOfType\n                            \n                            \n                                element\n                            \n                            \n                                elements\n                            \n                            \n                                input\n                            \n                            \n                                select\n                            \n                            \n                                textarea\n                            \n                            \n                                token\n                            \n                            \n                                tokens\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    visible\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tester: ComponentTester<>, debugElement: DebugElement)\n                    \n                \n                        \n                            \n                                Defined in src/lib/test-html-element.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tester\n                                                  \n                                                        \n                                                                        ComponentTester<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        debugElement\n                                                  \n                                                        \n                                                                        DebugElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        click\n                        \n                    \n                \n            \n            \n                \nclick()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/test-html-element.ts:16\n                \n            \n\n\n            \n                \n                    Clicks on the wrapped element, then triggers a change detection\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attr\n                        \n                    \n                \n            \n            \n                \nattr(name: string)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:66\n\n                \n            \n\n\n            \n                \n                    Gets the attribute of the wrapped element with the given name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the name of the attribute to get\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        button\n                        \n                    \n                \n            \n            \n                \nbutton(selector: string | Type)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:327\n\n                \n            \n\n\n            \n                \n                    Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS or directive selector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TestButton | null\n\n                    \n                    \n                        the wrapped button, or null if no element was matched\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        component\n                        \n                    \n                \n            \n            \n                \ncomponent(selector: Type)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:335\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        R\n                    \n                \n            \n\n            \n                \n                    Gets the first directive matching the given component directive selector and returns its component instance\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the selector of a component directive\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     R\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        components\n                        \n                    \n                \n            \n            \n                \ncomponents(selector: Type)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:343\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        R\n                    \n                \n            \n\n            \n                \n                    Gets the directives matching the given component directive selector and returns their component instance\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the selector of a component directive\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        custom\n                        \n                    \n                \n            \n            \n                \ncustom(selector: string | Type, customTestElementType: Type)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:372\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        E\n                    \n                \n            \n\n            \n                \n                    Gets the element matching the given selector, and if found, creates and returns a custom TestElement of the provided\ntype. This is useful to create custom higher-level abstractions similar to TestInput, TestSelect, etc. for\ncustom elements or components.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS or directive selector\n\n                                    \n                                \n                                \n                                    customTestElementType\n                                    \n                                            Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the type of the TestElement subclass that will wrap the found element\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     E | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        customs\n                        \n                    \n                \n            \n            \n                \ncustoms(selector: string | Type, customTestElementType: Type)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:384\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        E\n                    \n                \n            \n\n            \n                \n                    Gets the elements matching the given selector, and creates and returns custom TestElements of the provided\ntype. This is useful to create custom higher-level abstractions similar to TestInput, TestSelect, etc. for\ncustom elements or components.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS or directive selector\n\n                                    \n                                \n                                \n                                    customTestElementType\n                                    \n                                            Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the type of the TestElement subclass that will wrap the found elements\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dispatchEvent\n                        \n                    \n                \n            \n            \n                \ndispatchEvent(event: Event)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:50\n\n                \n            \n\n\n            \n                \n                    dispatches the given event from the wrapped element, then triggers a change detection\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dispatchEventOfType\n                        \n                    \n                \n            \n            \n                \ndispatchEventOfType(type: string)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:42\n\n                \n            \n\n\n            \n                \n                    dispatches an event of the given type from the wrapped element, then triggers a change detection\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        element\n                        \n                    \n                \n            \n            \n                \nelement(selector: K)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:81\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        K\n                    \n                \n            \n\n            \n                \n                    Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\nof the returned value is the TestElement subclass matching the type of the found element. So, if the\nmatched element is an input for example, the method will return a TestInput.\nUsage:\n\nconst testElement: TestHtmlElement | null = tester.element('div');\n\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            K\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS selector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TestHtmlElement | null\n\n                    \n                    \n                        the wrapped element, or null if no element matches the selector.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        elements\n                        \n                    \n                \n            \n            \n                \nelements(selector: K)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:193\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        K\n                    \n                \n            \n\n            \n                \n                    Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\nof the returned elements is the TestElement subclass matching the type of the found element. So, if the\nmatched elements are inputs for example, the method will return an array of TestInput.\nUsage:\n\nconst testElements: Array> = tester.elements('div');\n\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            K\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS selector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Array>\n\n                    \n                    \n                        the array of matched elements, empty if no element was matched\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        input\n                        \n                    \n                \n            \n            \n                \ninput(selector: string | Type)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:299\n\n                \n            \n\n\n            \n                \n                    Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS or directive selector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TestInput | null\n\n                    \n                    \n                        the wrapped input, or null if no element was matched\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        select\n                        \n                    \n                \n            \n            \n                \nselect(selector: string | Type)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:308\n\n                \n            \n\n\n            \n                \n                    Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS or directive selector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TestSelect | null\n\n                    \n                    \n                        the wrapped select, or null if no element was matched\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        textarea\n                        \n                    \n                \n            \n            \n                \ntextarea(selector: string | Type)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:318\n\n                \n            \n\n\n            \n                \n                    Gets the first textarea matched by the given selector\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS or directive selector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TestTextArea | null\n\n                    \n                    \n                        the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n            \n                \ntoken(selector: string | Type, token: ProviderToken)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:352\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        R\n                    \n                \n            \n\n            \n                \n                    Gets the first element matching the given selector, then gets the given token from its injector, or null if there is no such token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS or directive selector\n\n                                    \n                                \n                                \n                                    token\n                                    \n                                            ProviderToken\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the token to get from the matched element injector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     R | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tokens\n                        \n                    \n                \n            \n            \n                \ntokens(selector: string | Type, token: ProviderToken)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:361\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        R\n                    \n                \n            \n\n            \n                \n                    Gets the elements matching the given selector, then gets their given token from their injector, or null if there is no such token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS or directive selector\n\n                                    \n                                \n                                \n                                    token\n                                    \n                                            ProviderToken\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the token to get from the matched element injector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        visible\n                    \n                \n\n                \n                    \n                        getvisible()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-html-element.ts:26\n                                \n                            \n                    \n                        \n                                Tests if the element is visible, in the same meaning (and implementation) as in jQuery, i.e.\npresent anywhere in the DOM, and visible.\nAn element is not visible typically, if its display style or any of its ancestors display style is none.\n\n\n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ComponentTester } from './component-tester';\nimport { TestElement } from './test-element';\nimport { DebugElement } from '@angular/core';\n\n/**\n * A wrapped DOM HTML element, providing additional methods and attributes helping with writing tests\n */\nexport class TestHtmlElement extends TestElement {\n  constructor(tester: ComponentTester, debugElement: DebugElement) {\n    super(tester, debugElement);\n  }\n\n  /**\n   * Clicks on the wrapped element, then triggers a change detection\n   */\n  click(): void {\n    this.nativeElement.click();\n    this.tester.detectChanges();\n  }\n\n  /**\n   * Tests if the element is visible, in the same meaning (and implementation) as in jQuery, i.e.\n   * present anywhere in the DOM, and visible.\n   * An element is not visible typically, if its display style or any of its ancestors display style is none.\n   */\n  get visible(): boolean {\n    return !!(this.nativeElement.offsetWidth || this.nativeElement.offsetHeight || this.nativeElement.getClientRects().length);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestInput.html":{"url":"classes/TestInput.html","title":"class - TestInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/test-input.ts\n        \n\n\n            \n                Description\n            \n            \n                A wrapped DOM HTML input element, providing additional methods and attributes helping with writing tests\n\n            \n\n            \n                Extends\n            \n            \n                        TestHtmlElement\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                check\n                            \n                            \n                                fillWith\n                            \n                            \n                                uncheck\n                            \n                            \n                                click\n                            \n                            \n                                attr\n                            \n                            \n                                button\n                            \n                            \n                                component\n                            \n                            \n                                components\n                            \n                            \n                                custom\n                            \n                            \n                                customs\n                            \n                            \n                                dispatchEvent\n                            \n                            \n                                dispatchEventOfType\n                            \n                            \n                                element\n                            \n                            \n                                elements\n                            \n                            \n                                input\n                            \n                            \n                                select\n                            \n                            \n                                textarea\n                            \n                            \n                                token\n                            \n                            \n                                tokens\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    value\n                                \n                                \n                                    checked\n                                \n                                \n                                    disabled\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tester: ComponentTester<>, debugElement: DebugElement)\n                    \n                \n                        \n                            \n                                Defined in src/lib/test-input.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tester\n                                                  \n                                                        \n                                                                        ComponentTester<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        debugElement\n                                                  \n                                                        \n                                                                        DebugElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        check\n                        \n                    \n                \n            \n            \n                \ncheck()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/test-input.ts:46\n                \n            \n\n\n            \n                \n                    Checks the wrapped input, then dispatches an event of type change and triggers a change detection\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fillWith\n                        \n                    \n                \n            \n            \n                \nfillWith(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/test-input.ts:17\n                \n            \n\n\n            \n                \n                    Sets the value of the wrapped input, then dispatches an event of type input and triggers a change detection\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the new value of the input\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uncheck\n                        \n                    \n                \n            \n            \n                \nuncheck()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/test-input.ts:54\n                \n            \n\n\n            \n                \n                    Unchecks the wrapped input, then dispatches an event of type change and triggers a change detection\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        click\n                        \n                    \n                \n            \n            \n                \nclick()\n                \n            \n\n\n            \n                \n                    Inherited from         TestHtmlElement\n\n                \n            \n            \n                \n                        Defined in         TestHtmlElement:16\n\n                \n            \n\n\n            \n                \n                    Clicks on the wrapped element, then triggers a change detection\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attr\n                        \n                    \n                \n            \n            \n                \nattr(name: string)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:66\n\n                \n            \n\n\n            \n                \n                    Gets the attribute of the wrapped element with the given name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the name of the attribute to get\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        button\n                        \n                    \n                \n            \n            \n                \nbutton(selector: string | Type)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:327\n\n                \n            \n\n\n            \n                \n                    Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS or directive selector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TestButton | null\n\n                    \n                    \n                        the wrapped button, or null if no element was matched\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        component\n                        \n                    \n                \n            \n            \n                \ncomponent(selector: Type)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:335\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        R\n                    \n                \n            \n\n            \n                \n                    Gets the first directive matching the given component directive selector and returns its component instance\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the selector of a component directive\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     R\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        components\n                        \n                    \n                \n            \n            \n                \ncomponents(selector: Type)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:343\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        R\n                    \n                \n            \n\n            \n                \n                    Gets the directives matching the given component directive selector and returns their component instance\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the selector of a component directive\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        custom\n                        \n                    \n                \n            \n            \n                \ncustom(selector: string | Type, customTestElementType: Type)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:372\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        E\n                    \n                \n            \n\n            \n                \n                    Gets the element matching the given selector, and if found, creates and returns a custom TestElement of the provided\ntype. This is useful to create custom higher-level abstractions similar to TestInput, TestSelect, etc. for\ncustom elements or components.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS or directive selector\n\n                                    \n                                \n                                \n                                    customTestElementType\n                                    \n                                            Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the type of the TestElement subclass that will wrap the found element\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     E | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        customs\n                        \n                    \n                \n            \n            \n                \ncustoms(selector: string | Type, customTestElementType: Type)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:384\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        E\n                    \n                \n            \n\n            \n                \n                    Gets the elements matching the given selector, and creates and returns custom TestElements of the provided\ntype. This is useful to create custom higher-level abstractions similar to TestInput, TestSelect, etc. for\ncustom elements or components.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS or directive selector\n\n                                    \n                                \n                                \n                                    customTestElementType\n                                    \n                                            Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the type of the TestElement subclass that will wrap the found elements\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dispatchEvent\n                        \n                    \n                \n            \n            \n                \ndispatchEvent(event: Event)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:50\n\n                \n            \n\n\n            \n                \n                    dispatches the given event from the wrapped element, then triggers a change detection\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dispatchEventOfType\n                        \n                    \n                \n            \n            \n                \ndispatchEventOfType(type: string)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:42\n\n                \n            \n\n\n            \n                \n                    dispatches an event of the given type from the wrapped element, then triggers a change detection\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        element\n                        \n                    \n                \n            \n            \n                \nelement(selector: K)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:81\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        K\n                    \n                \n            \n\n            \n                \n                    Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\nof the returned value is the TestElement subclass matching the type of the found element. So, if the\nmatched element is an input for example, the method will return a TestInput.\nUsage:\n\nconst testElement: TestHtmlElement | null = tester.element('div');\n\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            K\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS selector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TestHtmlElement | null\n\n                    \n                    \n                        the wrapped element, or null if no element matches the selector.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        elements\n                        \n                    \n                \n            \n            \n                \nelements(selector: K)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:193\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        K\n                    \n                \n            \n\n            \n                \n                    Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\nof the returned elements is the TestElement subclass matching the type of the found element. So, if the\nmatched elements are inputs for example, the method will return an array of TestInput.\nUsage:\n\nconst testElements: Array> = tester.elements('div');\n\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            K\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS selector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Array>\n\n                    \n                    \n                        the array of matched elements, empty if no element was matched\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        input\n                        \n                    \n                \n            \n            \n                \ninput(selector: string | Type)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:299\n\n                \n            \n\n\n            \n                \n                    Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS or directive selector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TestInput | null\n\n                    \n                    \n                        the wrapped input, or null if no element was matched\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        select\n                        \n                    \n                \n            \n            \n                \nselect(selector: string | Type)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:308\n\n                \n            \n\n\n            \n                \n                    Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS or directive selector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TestSelect | null\n\n                    \n                    \n                        the wrapped select, or null if no element was matched\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        textarea\n                        \n                    \n                \n            \n            \n                \ntextarea(selector: string | Type)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:318\n\n                \n            \n\n\n            \n                \n                    Gets the first textarea matched by the given selector\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS or directive selector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TestTextArea | null\n\n                    \n                    \n                        the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n            \n                \ntoken(selector: string | Type, token: ProviderToken)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:352\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        R\n                    \n                \n            \n\n            \n                \n                    Gets the first element matching the given selector, then gets the given token from its injector, or null if there is no such token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS or directive selector\n\n                                    \n                                \n                                \n                                    token\n                                    \n                                            ProviderToken\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the token to get from the matched element injector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     R | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tokens\n                        \n                    \n                \n            \n            \n                \ntokens(selector: string | Type, token: ProviderToken)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:361\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        R\n                    \n                \n            \n\n            \n                \n                    Gets the elements matching the given selector, then gets their given token from their injector, or null if there is no such token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS or directive selector\n\n                                    \n                                \n                                \n                                    token\n                                    \n                                            ProviderToken\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the token to get from the matched element injector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        value\n                    \n                \n\n                \n                    \n                        getvalue()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-input.ts:25\n                                \n                            \n                    \n                        \n                                the value of the wrapped input\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        checked\n                    \n                \n\n                \n                    \n                        getchecked()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-input.ts:32\n                                \n                            \n                    \n                        \n                                the checked property of the wrapped input\n\n\n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n\n                \n                    \n                        getdisabled()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-input.ts:39\n                                \n                            \n                    \n                        \n                                the disabled property of the wrapped input\n\n\n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ComponentTester } from './component-tester';\nimport { TestHtmlElement } from './test-html-element';\nimport { DebugElement } from '@angular/core';\n\n/**\n * A wrapped DOM HTML input element, providing additional methods and attributes helping with writing tests\n */\nexport class TestInput extends TestHtmlElement {\n  constructor(tester: ComponentTester, debugElement: DebugElement) {\n    super(tester, debugElement);\n  }\n\n  /**\n   * Sets the value of the wrapped input, then dispatches an event of type input and triggers a change detection\n   * @param value the new value of the input\n   */\n  fillWith(value: string): void {\n    this.nativeElement.value = value;\n    this.dispatchEventOfType('input');\n  }\n\n  /**\n   * the value of the wrapped input\n   */\n  get value(): string {\n    return this.nativeElement.value;\n  }\n\n  /**\n   * the checked property of the wrapped input\n   */\n  get checked(): boolean {\n    return this.nativeElement.checked;\n  }\n\n  /**\n   * the disabled property of the wrapped input\n   */\n  get disabled(): boolean {\n    return this.nativeElement.disabled;\n  }\n\n  /**\n   * Checks the wrapped input, then dispatches an event of type change and triggers a change detection\n   */\n  check(): void {\n    this.nativeElement.checked = true;\n    this.dispatchEventOfType('change');\n  }\n\n  /**\n   * Unchecks the wrapped input, then dispatches an event of type change and triggers a change detection\n   */\n  uncheck(): void {\n    this.nativeElement.checked = false;\n    this.dispatchEventOfType('change');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestTextArea.html":{"url":"classes/TestTextArea.html","title":"class - TestTextArea","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestTextArea\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/test-textarea.ts\n        \n\n\n            \n                Description\n            \n            \n                A wrapped DOM HTML textarea element, providing additional methods and attributes helping with writing tests\n\n            \n\n            \n                Extends\n            \n            \n                        TestHtmlElement\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                fillWith\n                            \n                            \n                                click\n                            \n                            \n                                attr\n                            \n                            \n                                button\n                            \n                            \n                                component\n                            \n                            \n                                components\n                            \n                            \n                                custom\n                            \n                            \n                                customs\n                            \n                            \n                                dispatchEvent\n                            \n                            \n                                dispatchEventOfType\n                            \n                            \n                                element\n                            \n                            \n                                elements\n                            \n                            \n                                input\n                            \n                            \n                                select\n                            \n                            \n                                textarea\n                            \n                            \n                                token\n                            \n                            \n                                tokens\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    value\n                                \n                                \n                                    disabled\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tester: ComponentTester<>, debugElement: DebugElement)\n                    \n                \n                        \n                            \n                                Defined in src/lib/test-textarea.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tester\n                                                  \n                                                        \n                                                                        ComponentTester<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        debugElement\n                                                  \n                                                        \n                                                                        DebugElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        fillWith\n                        \n                    \n                \n            \n            \n                \nfillWith(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/test-textarea.ts:17\n                \n            \n\n\n            \n                \n                    Sets the value of the wrapped textarea, then dispatches an event of type input and triggers a change detection\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the new value of the textarea\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        click\n                        \n                    \n                \n            \n            \n                \nclick()\n                \n            \n\n\n            \n                \n                    Inherited from         TestHtmlElement\n\n                \n            \n            \n                \n                        Defined in         TestHtmlElement:16\n\n                \n            \n\n\n            \n                \n                    Clicks on the wrapped element, then triggers a change detection\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attr\n                        \n                    \n                \n            \n            \n                \nattr(name: string)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:66\n\n                \n            \n\n\n            \n                \n                    Gets the attribute of the wrapped element with the given name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the name of the attribute to get\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        button\n                        \n                    \n                \n            \n            \n                \nbutton(selector: string | Type)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:327\n\n                \n            \n\n\n            \n                \n                    Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS or directive selector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TestButton | null\n\n                    \n                    \n                        the wrapped button, or null if no element was matched\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        component\n                        \n                    \n                \n            \n            \n                \ncomponent(selector: Type)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:335\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        R\n                    \n                \n            \n\n            \n                \n                    Gets the first directive matching the given component directive selector and returns its component instance\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the selector of a component directive\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     R\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        components\n                        \n                    \n                \n            \n            \n                \ncomponents(selector: Type)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:343\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        R\n                    \n                \n            \n\n            \n                \n                    Gets the directives matching the given component directive selector and returns their component instance\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the selector of a component directive\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        custom\n                        \n                    \n                \n            \n            \n                \ncustom(selector: string | Type, customTestElementType: Type)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:372\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        E\n                    \n                \n            \n\n            \n                \n                    Gets the element matching the given selector, and if found, creates and returns a custom TestElement of the provided\ntype. This is useful to create custom higher-level abstractions similar to TestInput, TestSelect, etc. for\ncustom elements or components.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS or directive selector\n\n                                    \n                                \n                                \n                                    customTestElementType\n                                    \n                                            Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the type of the TestElement subclass that will wrap the found element\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     E | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        customs\n                        \n                    \n                \n            \n            \n                \ncustoms(selector: string | Type, customTestElementType: Type)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:384\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        E\n                    \n                \n            \n\n            \n                \n                    Gets the elements matching the given selector, and creates and returns custom TestElements of the provided\ntype. This is useful to create custom higher-level abstractions similar to TestInput, TestSelect, etc. for\ncustom elements or components.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS or directive selector\n\n                                    \n                                \n                                \n                                    customTestElementType\n                                    \n                                            Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the type of the TestElement subclass that will wrap the found elements\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dispatchEvent\n                        \n                    \n                \n            \n            \n                \ndispatchEvent(event: Event)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:50\n\n                \n            \n\n\n            \n                \n                    dispatches the given event from the wrapped element, then triggers a change detection\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dispatchEventOfType\n                        \n                    \n                \n            \n            \n                \ndispatchEventOfType(type: string)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:42\n\n                \n            \n\n\n            \n                \n                    dispatches an event of the given type from the wrapped element, then triggers a change detection\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        element\n                        \n                    \n                \n            \n            \n                \nelement(selector: K)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:81\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        K\n                    \n                \n            \n\n            \n                \n                    Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\nof the returned value is the TestElement subclass matching the type of the found element. So, if the\nmatched element is an input for example, the method will return a TestInput.\nUsage:\n\nconst testElement: TestHtmlElement | null = tester.element('div');\n\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            K\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS selector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TestHtmlElement | null\n\n                    \n                    \n                        the wrapped element, or null if no element matches the selector.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        elements\n                        \n                    \n                \n            \n            \n                \nelements(selector: K)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:193\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        K\n                    \n                \n            \n\n            \n                \n                    Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\nof the returned elements is the TestElement subclass matching the type of the found element. So, if the\nmatched elements are inputs for example, the method will return an array of TestInput.\nUsage:\n\nconst testElements: Array> = tester.elements('div');\n\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            K\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS selector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Array>\n\n                    \n                    \n                        the array of matched elements, empty if no element was matched\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        input\n                        \n                    \n                \n            \n            \n                \ninput(selector: string | Type)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:299\n\n                \n            \n\n\n            \n                \n                    Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS or directive selector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TestInput | null\n\n                    \n                    \n                        the wrapped input, or null if no element was matched\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        select\n                        \n                    \n                \n            \n            \n                \nselect(selector: string | Type)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:308\n\n                \n            \n\n\n            \n                \n                    Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS or directive selector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TestSelect | null\n\n                    \n                    \n                        the wrapped select, or null if no element was matched\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        textarea\n                        \n                    \n                \n            \n            \n                \ntextarea(selector: string | Type)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:318\n\n                \n            \n\n\n            \n                \n                    Gets the first textarea matched by the given selector\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS or directive selector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TestTextArea | null\n\n                    \n                    \n                        the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n            \n                \ntoken(selector: string | Type, token: ProviderToken)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:352\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        R\n                    \n                \n            \n\n            \n                \n                    Gets the first element matching the given selector, then gets the given token from its injector, or null if there is no such token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS or directive selector\n\n                                    \n                                \n                                \n                                    token\n                                    \n                                            ProviderToken\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the token to get from the matched element injector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     R | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tokens\n                        \n                    \n                \n            \n            \n                \ntokens(selector: string | Type, token: ProviderToken)\n                \n            \n\n\n            \n                \n                    Inherited from         TestElement\n\n                \n            \n            \n                \n                        Defined in         TestElement:361\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        R\n                    \n                \n            \n\n            \n                \n                    Gets the elements matching the given selector, then gets their given token from their injector, or null if there is no such token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a CSS or directive selector\n\n                                    \n                                \n                                \n                                    token\n                                    \n                                            ProviderToken\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the token to get from the matched element injector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        value\n                    \n                \n\n                \n                    \n                        getvalue()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-textarea.ts:25\n                                \n                            \n                    \n                        \n                                the value of the wrapped textarea\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n\n                \n                    \n                        getdisabled()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-textarea.ts:32\n                                \n                            \n                    \n                        \n                                the disabled property of the wrapped textarea\n\n\n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ComponentTester } from './component-tester';\nimport { TestHtmlElement } from './test-html-element';\nimport { DebugElement } from '@angular/core';\n\n/**\n * A wrapped DOM HTML textarea element, providing additional methods and attributes helping with writing tests\n */\nexport class TestTextArea extends TestHtmlElement {\n  constructor(tester: ComponentTester, debugElement: DebugElement) {\n    super(tester, debugElement);\n  }\n\n  /**\n   * Sets the value of the wrapped textarea, then dispatches an event of type input and triggers a change detection\n   * @param value the new value of the textarea\n   */\n  fillWith(value: string): void {\n    this.nativeElement.value = value;\n    this.dispatchEventOfType('input');\n  }\n\n  /**\n   * the value of the wrapped textarea\n   */\n  get value(): string {\n    return this.nativeElement.value;\n  }\n\n  /**\n   * the disabled property of the wrapped textarea\n   */\n  get disabled(): boolean {\n    return this.nativeElement.disabled;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n7.2.0 (2022-03-03)\nFeatures\n\nadd routeConfig to the stub snapshot and route (768c113)\n\n7.1.0 (2022-02-21)\nFeatures\n\nallow selecting by type, and getting tokens (a84096b)\ncreateMock, for easier SpyObj creations (bf9309e)\nintroduce stubRoute and deprecate fakeRoute and fakeSnapshot (55de6e2)\nquery for custom test elements (53b3a45)\ntoHaveTrimmedText matcher (825f19f)\n\n7.0.0 (2021-11-04)\n⚠ BREAKING CHANGES\n\nngx-speculoos is now based on Angular 13.x. It also needs RxJS v7.4+. If you want to use it with an older version of Angular, then stick to the previous version of ngx-speculoos.\n\nbump to ng and cli v13 (6ca161c)\n\n\n6.0.0 (2021-05-13)\nFeatures\n\nenable Ivy partial compilation (5731919)\n\nBug Fixes\n\nrenovate config (2df1219)\n\n⚠ BREAKING CHANGES\n\nngx-speculoos now targets Angular 12.0.0 and Ivy only. If you want to use it with Angular 11.x or View Engine, stick to the previous version of ngx-speculoos. Partial Ivy compilation is now enabled, allowing ngcc to skip this package and you to have faster builds! 🚀\n\n5.0.0 (2020-11-20)\n⚠ BREAKING CHANGES\n\nngx-speculoos is now built against Angular 11.0.0. If you want to use it with Angular 10.x, stick to the previous version of ngx-speculoos.\n\nFeatures\n\nbump to Angular v11 (060449f)\n\n4.1.0 (2020-08-15)\nFeatures\n\ntest if html element is visible + corresponding matcher (192a2bd)\n\n4.0.0 (2020-06-26)\nFeatures\n\nstrict and better typings (822963d)\n\nWe now properly infer (if possible) the type of the queried element(s).\nFor example:\nconst testElement = tester.element('div'); // inferred as TestHtmlElement | null\nconst testLink = tester.element('.selector'); // inferred as TestHtmlElement | null\nconst testButtons = tester.elements('.btn'); // inferred as Array\nconst testElements = tester.elements('div'); // inferred as Array>\nconst testLinks = tester.elements('.selector'); // inferred as Array>⚠ BREAKING CHANGES\n\nngx-speculoos is now built against Angular 10.0.0. If you want to use it with Angular 9.x, stick to the previous version of ngx-speculoos.\n\n3.0.0 (2020-02-07)\n⚠ BREAKING CHANGES\n\nngx-speculoos is now built against Angular 9.0.0. If you want to use it with Angular 8.x, stick to the previous version of ngx-speculoos.\n\nFeatures\n\nsupport basic ng-add (80a3aac)\n\nBug Fixes\n\nmatchers: update signature for jasmine 3.4.3 (09e1172), closes /github.com/DefinitelyTyped/DefinitelyTyped/commit/b7d7813c5deacde98bcb7a5e63104431b85c09eb#diff-04770c66399ad864e0881886aaf0800\ndowngrade compodoc to 1.1.8 because of code block issue on README (bba2b6b), closes #146 compodoc/compodoc#765\nremove reflect polyfill (592249a)\n\nchore\n\nupdate to Angular and CLI 9.0.0 (1c0395b)\n\n2.0.0 (2019-05-31)\nBug Fixes\n\nadd @angular/platform-browser as a peer dep (e354723)\nadd ngx-speculoos as an implicit dependency (df43796)\ncodelyzer rule name (3b7ff6c)\ncombine imports (17ac60f)\ndo not lint public_api.ts (6179153)\njsdoc formatting (3c95bc6)\nreadonly is already public (3a159e3)\nupdate polyfill.ts with latest (27b885a)\n\nchore\n\nupgrade to Angular 8.0.0 (f46816e)\n\nBREAKING CHANGES\n\nngx-speculoos is now built against Angular 8.0.0. If you want to use it with Angular 7.x, stick to the previous version of ngx-speculoos.\n\n\n1.1.0 (2018-11-17)\nFeatures\n\nadd disabled property on TestInput, TestTextarea and TestSelect (b2e77d6), closes #100\n\n\n1.0.0 (2018-11-02)\nThis 1.0.0 version is based and tested on Angular 7.0.0, although it should run fine with Angular 6.\nFuture versions are not guaranteed to support Angular 6, though. We encourage you to ugrade.\nBug Fixes\n\ndocs: typo in readme (2e6bce7), closes #42\n\n\n0.2.3 (2018-06-17)\n\n0.2.2 (2018-06-04)\n\n0.2.1 (2018-06-04)\n\n0.2.0 (2018-05-28)\nBug Fixes\n\ncustom matchers always return false if no element (a282826)\nfix toHaveText on empty text contents (0172de3)\n\nFeatures\n\nadd custom matcher for class (39d1f3a)\nadd custom matcher for value (eee2e97)\ncustom matcher toBeChecked (065ab58)\ncustom matcher toContainText (#13) (e0a0472)\ncustom matcher toHaveSelectedIndex (e1163fb)\ncustom matcher toHaveSelectedLabel (2c49330)\ncustom matcher toHaveSelectedValue (085fd65)\ncustom matcher toHaveText (8036c22)\n\n\n0.1.0 (2018-05-25)\nVery first release :champagne:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : 2.3.1\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/core : ^13.0.0\n        \n            @angular/platform-browser : ^13.0.0\n        \n            @angular/router : ^13.0.0\n        \n            rxjs : ^7.4.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            collectMethodNames   (src/.../mock.ts)\n                        \n                        \n                            createMock   (src/.../mock.ts)\n                        \n                        \n                            fakeRoute   (src/.../route.ts)\n                        \n                        \n                            fakeSnapshot   (src/.../route.ts)\n                        \n                        \n                            stubRoute   (src/.../route.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        collectMethodNames\n                        \n                    \n                \n            \n            \n                \ncollectMethodNames(proto)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    proto\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createMock\n                        \n                    \n                \n            \n            \n                \ncreateMock(type: Type)\n                \n            \n\n\n\n\n            \n                \n                    Creates a spy object for a class where all the methods of the class (and of its superclasses) are spies.\nI.e., for a class UserService with methods get(), create(), update() and delete(), calling\ncreateMock(UserService) is equivalent to calling\njasmine.createSpyObj('UserService', ['get', 'create', 'update', 'delete']).\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the type to mock (usually a service class)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     jasmine.SpyObj\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/lib/route.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        fakeRoute\n                        \n                    \n                \n            \n            \n                \n                    favor stubRoute, which creates an easier to use and more logical stub\n                \n            \n            \n                \nfakeRoute(options)\n                \n            \n\n\n\n\n            \n                \n                    Creates a fake partial ActivatedRoute for tests.\nIf you pass params, then the created route's paramMap will contain the same values.\nThe same goes for queryParams and queryParamMap.\nIf you pass a parent route and a snapshot, and the passed snapshot doesn't have a parent, then the snapshot's\nparent will be set to the parent route snapshot. This allows the code under test to use\nroute.parent.snapshot or route.snapshot.parent.\nIf you pass a snapshot with a parent, but don't pass a parent or pass a parent without snapshot, then the route's\nparent snapshot will be set to the given snapshot's parent. This allows the code under test to use\nroute.parent.snapshot or route.snapshot.parent.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ActivatedRoute\n\n                    \n                    \n                        a partially populated, fake ActivatedRoute, depending on what you passed in\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fakeSnapshot\n                        \n                    \n                \n            \n            \n                \n                    favor stubRoute, which creates an easier to use and more logical stub for both the route and its snapshot\n                \n            \n            \n                \nfakeSnapshot(options)\n                \n            \n\n\n\n\n            \n                \n                    Creates a fake partial ActivatedRouteSnapshot for tests.\nIf you pass params, then the created snapshot's paramMap will contain the same values.\nThe same goes for queryParams and queryParamMap.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ActivatedRouteSnapshot\n\n                    \n                    \n                        a partially populated, fake ActivatedRoute, depending on what you passed in\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stubRoute\n                        \n                    \n                \n            \n            \n                \nstubRoute(options?: ActivatedRouteStubOptions)\n                \n            \n\n\n\n\n            \n                \n                    Creates a new ActivatedRouteStub, by calling its constructor.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                ActivatedRouteStubOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ActivatedRouteStub\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\nngx-speculoos\nngx-speculoos helps you write simpler, cleaner unit tests for your Angular components, based on the\npage object pattern. It also provides utilities to make writing Angular unit tests easier.\nThe library simply wraps the standard Angular ComponentFixture, and you should thus be \nable to understand and start using ngx-speculoos in just a few minutes if you already know\nhow to write Angular unit tests.\nTable of Contents\n\nQuick presentation\nWhy should you care?\nInstallation\nGetting started\n\n\nFeatures in details\nComponentTester\nQueries\nQueries for elements\nCSS and Type selectors\nQueries for sub components\nQueries for injection tokens\nQueries for custom TestElement\nSubqueries\n\n\nDispatching events\nCustom Jasmine matchers\nRouting helper\nMocking helper\nTesting with a host component\n\n\nGotchas\nWhen do I need to call detectChanges()\nCan I use the TestElement methods to act on the component element itself, rather than a sub-element?\n\n\nIssues, questions\nComplete example\n\nQuick presentation\nWhy should you care?\nIf you've ever written tests like the following:\nit('should display French cities when selecting the country France', () => {\n  const countrySelect = fixture.nativeElement.querySelector('#country'); // countrySelect is of type any\n  countrySelect.selectedIndex = 12; // what is at index 12?\n  countrySelect.dispatchEvent(new Event('change')); // why do I need to do that?\n  fixture.detectChanges();\n  \n  const city = fixture.nativeElement.querySelector('#city'); // city is of type any\n  expect(city).toBeTruthy();\n  expect(city.options.length).toBe(3);\n  expect(city.options[0].value).toBe('');\n  expect(city.options[0].label).toBe('');\n  expect(city.options[1].value).toBe('PARIS');\n  expect(city.options[1].label).toBe('Paris');\n  expect(city.options[2].value).toBe('LYON');\n  expect(city.options[2].label).toBe('Lyon');\n});\n\nit('should hide cities when selecting the empty country option', () => {\n  const countrySelect = fixture.nativeElement.querySelector('#country'); // I did that previously. What about DRY?\n  countrySelect.selectedIndex = 0;\n  countrySelect.dispatchEvent(new Event('change')); // why do I need to do that?\n  fixture.detectChanges(); // why do I need to do that?\n  \n  expect(fixture.nativeElement.querySelector('#city')).toBeFalsy(); // I did that previously. What about DRY?\n});ngx-speculoos allows writing the above tests in a simpler, cleaner way:\n\nby using the page object pattern (which is optional, but recommended), you avoid repetitions. \nby using wrappers around elements, dispatching events and triggering change detection is automatic.\nby using wrappers around elements, you get useful additional methods to make tests easier to write and read.\nby using custom matchers, you get even simpler expectations and more readable error messages\nin any case you need them, you always have access to the fixture, the native elements, the debug elements, etc.\n\nclass MyComponentTester extends ComponentTester {\n  constructor() {\n    super(MyComponent);\n  }\n  \n  get country() {\n    return this.select('#country'); // returns a TestSelect object, not any. Similar methods exist for inputs, buttons, etc.\n  }\n  \n  get city() {\n    return this.select('#city'); // returns a TestSelect object, not any\n  }\n}\n\n[...]\n\nit('should display French cities when selecting the country France', () => {\n  tester.country.selectLabel('France'); // no dispatchEvent, no detectChanges needed\n  \n  expect(tester.city.optionValues).toEqual(['', 'PARIS', 'LYON']);\n  expect(tester.city.optionLabels).toEqual(['', 'Paris', 'Lyon']);\n});\n\nit('should hide cities when selecting empty country option', () => {\n  tester.country.selectIndex(0); // no repetition of the selector, no dispatchEvent, no detectChanges needed\n  \n  expect(tester.city).toBeFalsy(); // no repetition of the selector\n});Installation\nUsing the CLI: ng add ngx-speculoos\nUsing npm: npm install --save-dev ngx-speculoos\nUsing yarn: yarn add --dev ngx-speculoos\nGetting started\n\nimport ComponentTester, and other needed classes from ngx-speculoos\nCreate a MyComponentTester class (in your my-component.spec.ts file, typically) extending \nComponentTester, as shown above.\nExpose getters (or methods, if you prefer) returning the elements used in your tests, using\none of the ComponentTester methods (element, elements, input, select, textarea, button, etc.).\nSee the API documentation for details\nWrite your tests, as shown above, benefiting from the additional methods on the TestXxx classes.\nIf needed, you can always get the fixture, componentInstance, debugElement, nativeElement, etc.\nfrom the ComponentTester, and the nativeElement from each TestXxx wrapper.\nIf you like our custom matchers, add them in a beforeEach block as shown above, and enjoy.\nYou can also add them for all tests at once by adding the beforeEach block to the CLI-generated test.ts file.\n\nFeatures in details\nComponentTester\nThis is the entry point for most of the functionalities of ngx-speculoos. It wraps a ComponentFixture.\nYou can simply create one in your tests using\nconst tester = new ComponentTester(MyComponent);and then use it to query for sub elements, components, directives, etc. But we recommend adopting the \npage object pattern, in order to make your test easier to write and read, and to avoid repeating the\nsame selectors over and over again. \nYou do that by writing a class that extends ComponentTester, and provides getters (or functions)\nto query for elements, components, etc. \nclass MyComponentTester extends ComponentTester {\n  constructor() {\n    super(MyComponent);\n  }\n  \n  get country() {\n    return this.select('#country'); // returns a TestSelect object, not any. Similar methods exist for inputs, buttons, etc.\n  }\n  \n  get city() {\n    return this.select('#city'); // returns a TestSelect object, not any\n  }\n}and then in your tests, or in your beforeEach, once you've configured the testing module, you create\nan instance of your component tester.\ndescribe('My component', () => {\n  let tester: MyComponentTester;\n  \n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [MyComponent],\n      ...\n    });\n    \n    tester = new MyComponentTester();\n    tester.detectChanges();\n  });\n  \n  it ('should ...`, () => {\n    \n  });Queries\nQueries for elements\nMost of the queries that ngx-speculoos supports are used to query for DOM elements. The queries, however, \ndon't actually returns native DOM elements, but wrappers around them, which are instances of TestElement.\nTestElement has more specialized subclasses: TestHtmlElement, TestInput, TestSelect, TestTextarea, TestButton.\nThose subclasses offer helpful methods to get information or dispatch events to HTML elements, inputs, selects, etc.\nOur custom matchers act on those TestElement objects. \nYou can create your own subclasses of TestElement and query for them, too.\nA TestElement is a wrapper around an Angular DebugElement. So it can access the DebugElement and the \nnative DOM element that it wraps. It also has an instance of the ComponentTester which created it,\nwhich itself wraps the Angular ComponentFixture and thus allows detecting changes automatically after\nan element has been dispatched, for example.\nCSS and Type selectors\nThe first kind of query uses CSS selectors. This is simply a wrapper around Angular's DebugElement.query(By.css()).\nThe second kind of query uses directive types. This is simply a wrapper around Angular's DebugElement.query(By.directive()).\nWhatever the kind of selector you choose, the methods are the same though:\n\nelement(selector) to get the first element matching the selector\nelements(selector) to get an array of elements matching the selector\n\nBoth of those methods will automatically return a TestInput, or a TestSelect, or any other TestElement\nsubclass that ngx-speculoos provides based on the actual type of element being matched. But if you know\nin advance what the result of the query is, you can use more-specific methods, or their generic parameter.\nPassing an HTML element name as selector also automatically returns the right type\n\ninput(selector) returns a TestInput\ntextarea(selector) returns a TestTextarea\nselect(selector) returns a TestSelect\nbutton(selector) returns a TestButton\nelement(selector) returns a TestInput\nelement(selector) returns a TestHtmlElement\nelements(selector) returns an Array\nelement('input') returns a TestInput\n\nQueries for sub components\nIt's often useful to get the component instance of a sub component, for example to inspect its state,\nor to make one of its outputs emit something. You can do that using the component and components\nmethods:\nget productIcon() {\n  return this.component(ProductIconComponent); // returns a ProductIconComponent \n}\n\nget reviewers() {\n  return this.components(ReviewerComponent); // returns an Array \n}Queries for injection tokens\nQuerying using element(DatepickerDirective) will return you a TestElement on which the \nDatepickerDirective has been applied.\nIf you need to get the Datepicker directive instance itself, then use the token() method\n(or tokens() to get several of them) \nwhich takes a selector (CSS or type) as first argument, and the token as second argument:\nget datepicker() {\n  return this.token('#birth-date', DatepickerDirective); // returns a DatepickerDirective instance\n}Queries for custom TestElement\nWe provide TestInput, TestSelect, etc. to easily inspect or interact with inputs and selects in our tests.\nBut what if you want the same kind of test abstraction for your own reusable components or directives, like\nfor example your DatepickerDirective.\nYou can create your own TestElement subclass for that. This subclass must have a constructor that\ntakes a ComponentTester as first argument, and a DebugElement as second argument.\nclass TestDatepicker extends TestHtmlElement {\n  constructor(tester: ComponentTester, debugElement: DebugElement) {\n    super(tester, debugElement);\n  }\n\n  get inputField() {\n    return this.input('input');\n  }\n\n  setDate(year: number, month: number, day: number) {\n    this.inputField.fillWith(`${year}-${month}-${day}`);\n  }\n\n  toggleDropdown() {\n    this.button('button').click();\n  }\n}Once you have created that class, you can use the custom() and customs() methods, using any selector,\nto get instances of your custom `TestElement``\nget birthDate() {\n  return this.custom('#birth-date', TestDatepicker);\n}it('should not save if birth date is in the future') {\n  // ...\n  tester.birthDate.setDate(2200, 1, 1);\n  tester.save.click();\n  expect(userService.create).not.toHaveBenCalled();\n}Subqueries\nA query is made from the root ComponentTester. But TestElement themselves also support queries.\nSo you can query for a parent TestElement, and then use it to perform subqueries:\nget cardEditButton() {\n  return this.element('.card').button('.edit');\n}\n\nget cardReviewerComponent() {\n  return this.element('.card').component(ReviewerComponent);\n}Custom Jasmine matchers\nWe provide custom matchers, that act on TestElement and on its more specific subclasses (TestInput, TestSelect, etc.).\nThe complete matcher list includes:\n\ntoHaveClass(className: string)\ntoHaveValue(value: string)\ntoHaveText(textContent: string)\ntoHaveTrimmedText(textContent: string)\ntoContainText(textContent: string)\ntoBeChecked()\ntoHaveSelectedIndex(index: number)\ntoHaveSelectedValue(value: string)\ntoHaveSelectedLabel(label: string)\ntoBeVisible()\n\nThese matchers must be installed in each test using them:\nbeforeEach(() => jasmine.addMatchers(speculoosMatchers));or in all tests, by adding the above line of code in the test.ts file.\nDispatching events\nTestElement provides two methods that allow dispatching events in a simple way. \n\ndispatchEvent(event: Event)\ndispatchEventOfType(type: string)\n\nGoing through these methods automatically calls detectChanges() on the ComponentTester after the event has been dispatched,\nso you don't need to call that yourself.\nThe TestElement subclasses that we provide have more specific event dispatching methods.\nFor example\n\nTestHtmlElement.click()\nTestInput.fillWith() for text, password, number, etc.\nTestInput.check() for radios and checkboxes\nTestInput.uncheck() for checkboxes\nTestTextarea.fillWith()\nTestSelect.selectIndex()\nTestSelect.selectValue()\nTestSelect.selectLabel()\n\nCreating your own TestElement subclasses is a good way to provide such custom methods to interact\nwith your own reusable components in tests.\nRouting helper\nThe library provides a stub for the ActivatedRoute class that you typically inject in your routing components.\nIt mimics the behavior of the actual ActivatedRoute, by having a snapshot and observables that emit when this\nsnapshot changes. And it also allows simulating navigations by imperatively changing the parameters, query parameters, \netc.\nimport { ActivatedRouteStub } from 'ngx-speculoos';\n\nclass RoutingComponentTester extends ComponentTester {\n  // ...\n}\n\ndescribe('routing component', () => {\n  let route: ActivatedRouteStub;\n  let tester: RoutingComponentTester;\n  \n  beforeEach(() => {\n    route = stubRoute({\n      params: { categoryId: 'pets' }\n    });\n    \n    TestBed.configureTestingModule({\n      declarations: [RoutingComponent],\n      providers: [\n        { provide: ActivatedRoute, useValue: route }\n      ]\n    });\n    \n    tester = new RoutingComponentTester();\n    tester.detectChanges();\n  });\n  \n  it('should display all the products of the category', () => {\n    // test based on the initial route state\n  });\n\n  it('should load other products when the category changes or when the query changes', () => {\n    route.setParam('category', 'toys');\n    tester.detectChanges();\n    // ...\n\n    route.setQueryParams({ 'max-price': '30', target: 'children' });\n    tester.detectChanges();\n    // ...\n  });\n});Mocking helper\nJasmine is quite verbose when creating mock objects in a typesafe way:\nconst productService = jasmine.createSpyObj('ProductService', ['list', 'get', 'create', 'update']);Since most of what we mock (usually Angular services) are classes, we can actually do a bit of introspection\nand create a mock that will automatically mock all the methods declared in the class. That's what our \ncreateMock() function does. The above code can thus be reduced to:\nconst productService = createMock(ProductService);Testing with a host component\nngx-speculoos doesn't provide any specific support for testing with host components, but we do it\na lot, simply by creating a ComponentTester for the host component rather than the component under test:\n@Component({\n  template: ''\n})\nclass HostComponent {\n  user: User = {\n    id: 'u1',\n    name: 'John'\n  };\n  \n  smiled = false;\n}\n\nclass HostComponentTester extends ComponentTester {\n  constructor() {\n    super(HostComponent);\n  }\n  \n  get userComponent() {\n    return this.component(UserComponent);\n  }\n  \n  // ...\n}Once you have that, you can access the host component using componentInstance(),\nthe component under test using userComponent(), and any element of the component under test\nusing the usual queries.\nGotchas\nWhen do I need to call detectChanges()?\nAny event dispatched through a TestElement automatically calls detectChanges() for you.\nBut you still need to call detectChanges() by yourself in the other cases:\n\nto actually initialize your component. Sometimes, you want to configure some mocks before the ngOnInit()\nmethod of your component is called. That's why creating a ComponentTester does not automatically call\ndetectChanges(). You need to do it yourself. The first call will cause the component lifecycle to start,\njust as when using a ComponentFixture directly.\nto force change detection once you've changed the state of your component without dispatching an event:\nby changing the state, or emitting an event through a subject, or triggering a navigation \nfrom the ActivatedRouteStub\n\nCan I use the TestElement methods to act on the component element itself, rather than a sub-element?\nYes. The ComponentTester has a testElement property, which is the TestHtmlElement wrapping the component's element.\nIssues, questions\nPlease, provide feedback by filing issues, or by submitting pull requests, to the Github Project.\nComplete example\nYou can look at a minimal complete example in the demo project.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2018 Ninja Squad\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    9 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 7.2.0\n        \n            Description : Helps writing Angular unit tests\n        \n            Keywords : angular, test\n        \n            Bugs : https://github.com/Ninja-Squad/ngx-speculoos/issues\n        \n            License : MIT\n        \n            Repository : https://github.com/Ninja-Squad/ngx-speculoos.git\n        \n            Author : Ninja Squad\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            speculoosMatchers   (src/.../matchers.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/matchers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        speculoosMatchers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     jasmine.CustomMatcherFactories\n\n                    \n                \n                \n                    \n                        Default value : {\n  /**\n   * Checks that the receiver is a TestElement wrapping a DOM element and as the given CSS class\n   */\n  toHaveClass: (): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: unknown, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check class '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestElement)) {\n        return { pass: false, message: `Expected to check class '${expected}' on element, but element was not a TestElement` };\n      }\n      const actual = el.classes;\n      const pass = actual.indexOf(expected) !== -1;\n      const message =\n        `Expected element to ${isNegative ? 'not ' : ''}have class '${expected}', ` +\n        `but had ${actual.length ? \"'\" + actual.join(', ') + \"'\" : 'none'}`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: unknown, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: unknown, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestInput or a TestTextArea and has the given value\n   */\n  toHaveValue: (): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: unknown, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check value '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestInput) && !(el instanceof TestTextArea)) {\n        return {\n          pass: false,\n          message: `Expected to check value '${expected}' on element, but element was neither a TestInput nor a TestTextArea`\n        };\n      }\n      const actual = el.value;\n      const pass = actual === expected;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have value '${expected}', but had value '${actual}'`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: unknown, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: unknown, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestElement wrapping a DOM element and has the exact given textContent\n   */\n  toHaveText: (): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: unknown, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check text '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestElement)) {\n        return { pass: false, message: `Expected to check text '${expected}' on element, but element was not a TestElement` };\n      }\n      const actual = el.textContent;\n      const pass = actual === expected;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have text '${expected}', but had '${actual}'`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: unknown, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: unknown, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestElement wrapping a DOM element and has the given textContent, after both have been trimmed.\n   * So, An element such as\n   * ```\n   * \n   *   Some title\n   * \n   * ```\n   * will pass the test\n   * ```\n   * expect(tester.title).toHaveTrimmedText('Some title')\n   * ```\n   */\n  toHaveTrimmedText: (): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: unknown, expected: string) => {\n      const trimmedExpected = expected.trim();\n      if (!el) {\n        return { pass: false, message: `Expected to check trimmed text '${trimmedExpected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestElement)) {\n        return {\n          pass: false,\n          message: `Expected to check trimmed text '${trimmedExpected}' on element, but element was not a TestElement`\n        };\n      }\n      const actual = el.textContent?.trim();\n      const pass = actual === trimmedExpected;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have trimmed text '${trimmedExpected}', but had '${actual}'`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: unknown, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: unknown, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestElement wrapping a DOM element and contains the given textContent\n   */\n  toContainText: (): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: unknown, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check text '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestElement)) {\n        return { pass: false, message: `Expected to check text '${expected}' on element, but element was not a TestElement` };\n      }\n      const actual = el.textContent;\n      if (!actual) {\n        return {\n          pass: isNegative,\n          message: `Expected element to ${isNegative ? 'not ' : ''}contain text '${expected}', but had no text`\n        };\n      }\n      const pass = actual.indexOf(expected) !== -1;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}contain text '${expected}', but had text '${actual}'`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: unknown, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: unknown, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestElement wrapping a DOM element and contains the given textContent\n   */\n  toBeChecked: (): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: unknown) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check if element was checked, but element was falsy` };\n      }\n      if (!(el instanceof TestInput)) {\n        return { pass: false, message: `Expected to check if element was checked, but element was not a TestInput` };\n      }\n      const pass = el.checked;\n      const message = `Expected element to be ${isNegative ? 'not ' : ''}checked, but was${!isNegative ? ' not' : ''}`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: unknown): jasmine.CustomMatcherResult => {\n        return assert(false, el);\n      },\n      negativeCompare: (el: unknown): jasmine.CustomMatcherResult => {\n        return assert(true, el);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestSelect wrapping a DOM element and has the given selected index\n   */\n  toHaveSelectedIndex: (): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: unknown, expected: number) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check selected index ${expected} on element, but element was falsy` };\n      }\n      if (!(el instanceof TestSelect)) {\n        return { pass: false, message: `Expected to check selected index ${expected} on element, but element was not a TestSelect` };\n      }\n      const actual = el.selectedIndex;\n      const pass = actual === expected;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have selected index ${expected}, but had ${actual}`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: unknown, expected: number): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: unknown, expected: number): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestSelect wrapping a DOM element with the selected option's value equal to the given value\n   */\n  toHaveSelectedValue: (): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: unknown, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check selected value '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestSelect)) {\n        return { pass: false, message: `Expected to check selected value '${expected}' on element, but element was not a TestSelect` };\n      }\n      const actual = el.selectedValue;\n      const pass = actual === expected;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have selected value '${expected}', but had '${actual}'`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: unknown, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: unknown, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestSelect wrapping a DOM element with the selected option's label equal to the given label\n   */\n  toHaveSelectedLabel: (): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: unknown, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check selected label '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestSelect)) {\n        return { pass: false, message: `Expected to check selected label '${expected}' on element, but element was not a TestSelect` };\n      }\n      const actual = el.selectedLabel;\n      const pass = actual === expected;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have selected label '${expected}', but had '${actual}'`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: unknown, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: unknown, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestHtmlElement which is visible\n   */\n  toBeVisible: (): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: unknown) => {\n      const expectedState = `${isNegative ? 'in' : ''}visible`;\n      const inverseState = `${isNegative ? '' : 'in'}visible`;\n      if (!el) {\n        return { pass: false, message: `Expected to check if element was ${expectedState}, but element was falsy` };\n      }\n      if (!(el instanceof TestHtmlElement)) {\n        return { pass: false, message: `Expected to check if element was ${expectedState}, but element was not a TestHtmlElement` };\n      }\n      const pass = el.visible;\n      const message = `Expected element to be ${expectedState}, but was ${inverseState}`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: unknown): jasmine.CustomMatcherResult => {\n        return assert(false, el);\n      },\n      negativeCompare: (el: unknown): jasmine.CustomMatcherResult => {\n        return assert(true, el);\n      }\n    };\n  }\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
